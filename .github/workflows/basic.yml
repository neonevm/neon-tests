name: "Basic tests"

on:
  schedule:
    - cron: "0 23,2 * * *"
#    - cron: "0 0,4,8,12,16,20 * * *"
  pull_request:
    types: [ opened, reopened, synchronize ]
  workflow_dispatch:
    inputs:
      network:
        type: choice
        default: night-stand
        required: true
        description: "Stand name"
        options:
          - night-stand
          - devnet
          - private-devnet
      runner:
        type: choice
        default: ubuntu-20.04
        required: true
        description: "Where to run tests (our runner or github)"
        options:
          - neon-hosted
          - aws-hosted
          - ubuntu-20.04
      numprocesses:
        type: choice
        default: 4
        required: true
        description: "Number of parallel jobs"
        options:
          - 4
          - 8
          - 12
          - auto
env:
  NETWORK: night-stand
  RUNNER: neon-hosted
  BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  SOLANA_URL: "${{ secrets.SOLANA_URL }}"
  NUMPROCESSES: 4

jobs:
  prepare-env:
    runs-on: ubuntu-20.04
    if: always()
    steps:
      - name: Setup `night-stand` by cron schedule
        id: setup_night_stand
        if: github.event.schedule=='0 23,2 * * *'
        run: |
          echo "NETWORK=night-stand" >> $GITHUB_ENV
      - name: Setup `devnet` by cron schedule
        id: setup_devnet
        if: github.event.schedule=='0 0,4,8,12,16,20 * * *'
        run: |
          echo "NETWORK=devnet" >> $GITHUB_ENV
      - name: Setup env
        id: setup
        run: |
          # $1 - inputs
          # $2 - env.VAR
          function setVar {
            if [ -z "$1" ]
              then
                RESULT="$2"
              else
                RESULT="$1"
            fi
            echo $RESULT
          }

          NETWORK=$( setVar "${{ github.event.inputs.network }}" "${{ env.NETWORK }}" )
          RUNNER=$( setVar "${{ github.event.inputs.runner }}" "${{ env.RUNNER }}" )
          NUMPROCESSES=$( setVar "${{ github.event.inputs.numprocesses }}" "${{ env.NUMPROCESSES }}" )

          echo "Network: ${NETWORK}"
          echo "Runner: ${RUNNER}"
          echo "Numprocesses: ${NUMPROCESSES}"
          echo "Build url: ${{ env.BUILD_URL }}"

          echo "network=${NETWORK}" >> $GITHUB_OUTPUT
          echo "runner=${RUNNER}" >> $GITHUB_OUTPUT
          echo "jobs=${JOBS_NUMBER}" >> $GITHUB_OUTPUT
          echo "numprocesses=${NUMPROCESSES}" >> $GITHUB_OUTPUT
    outputs:
      network: ${{ steps.setup.outputs.network }}
      runner: ${{ steps.setup.outputs.runner }}
      numprocesses: ${{ steps.setup.outputs.numprocesses }}

  tests:
    name: "Basic tests"
    needs:
      - prepare-env
    runs-on: ${{ needs.prepare-env.outputs.runner }}
    env:
      NETWORK: ${{ needs.prepare-env.outputs.network }}
      RUNNER: ${{ needs.prepare-env.outputs.runner }}
      NUMPROCESSES: ${{ needs.prepare-env.outputs.numprocesses }}
    if: always()
    steps:
      - uses: actions/checkout@v2
      - name: "Install deps"
        id: requirements
        uses: ./.github/actions/requirements
      - name: "Run basic tests"
        id: basic
        run: "./clickfile.py run basic -n ${{ env.NETWORK }} --numprocesses ${{ env.NUMPROCESSES }}"
      - uses: actions/upload-artifact@v2
        with:
          name: "Allure results"
          path: allure-results
      - name: "Notify on failure."
        if: ${{ failure() }}
        run: "./clickfile.py send-notification -u ${{ secrets.SLACK_QA_CHANNEL_URL }} -b ${{ env.BUILD_URL }} -n ${{ needs.prepare-env.outputs.network }}"
      - name: "Archive report"
        if: always()
        run: tar -czf allure-results.tar.gz allure-results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: "allure-results.tar.gz"
          path: allure-results.tar.gz
      - name: "Download allure history"
        if: always()
        run: "./clickfile.py get-allure-history basic --network ${{ needs.prepare-env.outputs.network }}"
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      - name: "Generate allure report"
        if: always()
        uses: QuintilianoNery/action-allure-report-V2@master
      - name: "Fix permissions"
        if: "${{ env.RUNNER == 'neon-hosted' && (failure() || success()) }}"
        continue-on-error: true
        run: sudo chown deploy:deploy -R allure-report
      - name: "Upload allure history"
        if: always()
        run: "./clickfile.py upload-allure-report basic --network ${{ needs.prepare-env.outputs.network }}"
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
