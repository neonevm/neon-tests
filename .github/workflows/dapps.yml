name: "dApps testing"
on:
  schedule:
    - cron: "0 1 * * 6"
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.DAPPS_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DAPPS_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-2
  AWS_S3_BUCKET: neon-tests-dapps
  BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  prepare:
    runs-on: ubuntu-20.04
    steps:
      - name: Install terraform
        id: terraform
        run: |
          sudo apt-get update && sudo apt-get install -y python-dev gnupg software-properties-common wget jq
          wget -O- https://apt.releases.hashicorp.com/gpg | \
              gpg --dearmor | \
              sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring \
              --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
              --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
              https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
              sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform

      - uses: actions/checkout@v3
      - name: Install python requirements
        if: ${{ steps.terraform.outcome == 'success' }}
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Deploy stand with terraform
        id: deploy
        if: ${{ steps.requirements.outcome == 'success' }}
        run: |
          ssh_key=/tmp/dapps-stand
          echo "${{ secrets.SHH_DAPPS_PRIVATE_KEY }}" >> ${ssh_key} && chmod 400 ${ssh_key}
          ./clickfile.py infra deploy
      - uses: actions/upload-artifact@v3
        if: ${{ steps.deploy.outcome == 'success' }}
        with:
          name: tf-state
          path: deploy/aws/

      - name: Set outputs
        id: share
        if: ${{ steps.deploy.outcome == 'success' }}
        env:
          SOLANA_IP: ${{ env.SOLANA_IP }}
          PROXY_IP: ${{ env.PROXY_IP }}
        run: |
          echo "solana_ip=${{ env.SOLANA_IP }}" >> $GITHUB_OUTPUT
          echo "proxy_ip=${{ env.PROXY_IP }}" >> $GITHUB_OUTPUT

    outputs:
      solana_ip: ${{ steps.share.outputs.solana_ip }}
      proxy_ip: ${{ steps.share.outputs.proxy_ip }}

  uniswap:
    runs-on: neon-hosted
    needs:
      - prepare
    steps:
      - uses: actions/checkout@v3
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        env:
          SOLANA_IP: ${{ needs.prepare.outputs.solana_ip }}
          PROXY_IP: ${{ needs.prepare.outputs.proxy_ip }}
        run: |
          ./clickfile.py infra gen-accounts -c 3 -a 10000

      - name: Launch uniswap tests
        if: ${{ steps.accounts.outcome == 'success' }}
        id: uniswap
        env:
          PROXY_IP: ${{ needs.prepare.outputs.proxy_ip }}
          SOLANA_IP: ${{ needs.prepare.outputs.solana_ip }}
          ACCOUNTS: ${{ env.ACCOUNTS }}
        run: |
          CWD=/tmp/uniswap-${{ github.run_id }}
          mkdir -p ${CWD}
          git clone https://github.com/neonlabsorg/Uniswap-V2-NEON.git ${CWD}
          docker build -t uniswap:latest ${CWD}
          proxy_url=http://${{ env.PROXY_IP }}:9090/solana
          test -t 1 && USE_TTY="-t"
          docker run -i ${USE_TTY} --name=uniswap-${{ github.run_id }} -e NEON_PROXY_URL=${proxy_url} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} --entrypoint /bin/bash uniswap:latest -c "npx hardhat run /usr/src/app/scripts/deploy.ts"
          docker cp uniswap-${{ github.run_id }}:/usr/src/app/report.json report.json
          docker rm -f uniswap-${{ github.run_id }}
          mv report.json uniswap-report.json

      - name: Save report
        uses: actions/upload-artifact@v3
        with:
            name: uniswap-report
            path: uniswap-report.json

  saddle:
    runs-on: neon-hosted
    needs:
      - prepare
    steps:
      - uses: actions/checkout@v3
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        env:
          SOLANA_IP: ${{ needs.prepare.outputs.solana_ip }}
          PROXY_IP: ${{ needs.prepare.outputs.proxy_ip }}
        run: |
          ./clickfile.py infra gen-accounts -c 4 -a 10000

      - name: Launch saddle tests
        if: ${{ steps.accounts.outcome == 'success' }}
        id: uniswap
        env:
          PROXY_IP: ${{ needs.prepare.outputs.proxy_ip }}
          SOLANA_IP: ${{ needs.prepare.outputs.solana_ip }}
          ACCOUNTS: ${{ env.ACCOUNTS }}
        run: |
          CWD=/tmp/saddle-${{ github.run_id }}
          mkdir -p ${CWD}
          git clone https://github.com/neonlabsorg/saddle-contract ${CWD}
          docker build -t saddle:latest ${CWD}
          proxy_url=http://${{ env.PROXY_IP }}:9090/solana
          docker run -i -d --name=saddle-${{ github.run_id }} saddle:latest /bin/bash
          docker exec -i -e NEON_PROXY_URL=${proxy_url} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} saddle-${{ github.run_id }} npx hardhat run /usr/src/app/scripts/deploy2Tokens.ts
          docker exec -i -e NEON_PROXY_URL=${proxy_url} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} saddle-${{ github.run_id }} npx hardhat run /usr/src/app/scripts/deploy3Tokens.ts
          docker exec -i -e NEON_PROXY_URL=${proxy_url} -e NEON_ACCOUNTS=${{ env.ACCOUNTS }} saddle-${{ github.run_id }} npx hardhat run /usr/src/app/scripts/deployMetaPool.ts
          docker cp saddle-${{ github.run_id }}:/usr/src/app/report.json saddle-report.json
          docker rm -f saddle-${{ github.run_id }}

      - name: Save report
        uses: actions/upload-artifact@v3
        with:
          name: saddle-report
          path: saddle-report.json
  yearn:
    runs-on: neon-hosted
    needs:
      - prepare
    steps:
      - uses: actions/checkout@v3
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements

      - name: Prepare accounts
        id: accounts
        env:
          SOLANA_IP: ${{ needs.prepare.outputs.solana_ip }}
          PROXY_IP: ${{ needs.prepare.outputs.proxy_ip }}
        run: |
          ./clickfile.py infra gen-accounts -c 10 -a 25000

      - name: Launch yearn tests
        id: yearn
        env:
          PROXY_IP: ${{ needs.prepare.outputs.proxy_ip }}
          SOLANA_IP: ${{ needs.prepare.outputs.solana_ip }}
          ACCOUNTS: ${{ env.ACCOUNTS }}
        run: |
          CWD=/tmp/yearn-${{ github.run_id }}
          mkdir -p ${CWD}
          git clone https://github.com/neonlabsorg/yearn-vaults ${CWD}
          docker build -t yearn:latest --build-arg PROXY_URL='http://${{ env.PROXY_IP }}:9090/solana' ${CWD}
          docker run --rm --network host \
            -e ACCOUNTS=${{ env.ACCOUNTS }} \
            yearn:latest \
            bash -c " \
              brownie test \
                tests/functional/registry \
              -vv \
              --network neon"
          docker cp yearn-${{ github.run_id }}:/usr/src/app/report.json yearn-report.json
          docker rm -f yearn-${{ github.run_id }}

      - name: Save report
        uses: actions/upload-artifact@v3
        with:
          name: yearn-report
          path: yearn-report.json

  swap-report:
    runs-on: ubuntu-20.04
    needs: [prepare, uniswap, saddle, yearn]
    if: always()
    env:
      SOLANA_URL: "http://${{ needs.prepare.outputs.solana_ip }}:8899"
      PROXY_URL: "http://${{ needs.prepare.outputs.proxy_ip }}:9090/solana"
    steps:
      - uses: actions/checkout@v3
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements
      - uses: actions/download-artifact@v3
        with:
          name: uniswap-report
          path: reports/
      - uses: actions/download-artifact@v3
        with:
          name: saddle-report
          path: reports/
      - uses: actions/download-artifact@v3
        with:
          name: yearn-report
          path: reports/
      - name: "Swap report"
        run: ./clickfile.py dapps report --directory=reports



  destroy:
    runs-on: ubuntu-20.04
    needs: [prepare, uniswap, saddle, yearn, swap-report]
    if: always()
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: tf-state
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements
      - name: Destroy stand with terraform
        id: destroy
        run: |
          sudo apt-get update && sudo apt-get install -y python-dev gnupg software-properties-common wget
          wget -O- https://apt.releases.hashicorp.com/gpg | \
              gpg --dearmor | \
              sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring \
              --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
              --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
              https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
              sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
          ssh_key=/tmp/dapps-stand
          echo "${{ secrets.SHH_DAPPS_PRIVATE_KEY }}" >> ${ssh_key} && chmod 400 ${ssh_key}
          ./clickfile.py infra destroy

  notify:
    runs-on: ubuntu-20.04
    needs: [prepare, uniswap, saddle, yearn, destroy]
    if: ${{ failure() }}
    steps:
      - uses: actions/checkout@v3
      - name: Install python requirements
        id: requirements
        uses: ./.github/actions/python-requirements
      - name: Notify on failure
        id: notification
        run: |
          ./clickfile.py send-notification -u ${{ secrets.SLACK_QA_CHANNEL_URL }} -b ${{ env.BUILD_URL }} -t "DApps testing failed, please check!"
