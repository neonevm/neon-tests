name: "Operator economy"

on:
  schedule:
    - cron: "0 6 * * 0,1,2,3,4"
  workflow_dispatch:
    inputs:
      network:
        type: choice
        default: night-stand
        required: true
        description: "Stand name"
        options:
          - night-stand
          - devnet
          - terraform

env:
  NETWORK: ${{ github.event.inputs.network || 'night-stand' }}
  BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  IMAGE:  neonlabsorg/neon_tests
  CONTAINER:  economy-${{ github.run_id }}
jobs:
  dockerize:
    if: ${{ github.ref_name != 'develop'}}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: "Dockerize neon tests"
        id: requirements
        uses: ./.github/actions/dockerize-neon-tests
        with:
          image_tag: ${{ github.sha }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
  prepare-env:
    runs-on: ubuntu-20.04
    if: always()
    steps:
      - name: Setup `night-stand` by cron schedule
        id: setup_night_stand
        if: github.event.schedule=='0 6 * * *'
        run: |
          echo "NETWORK=night-stand" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - name: "Prepare terraform stand"
        id: prepare_terraform
        if: ${{ env.NETWORK == 'terraform' }}
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          HCLOUD_TOKEN: ${{secrets.HCLOUD_TOKEN}}
          TFSTATE_BUCKET: ${{vars.TFSTATE_BUCKET}}
          TFSTATE_KEY_PREFIX: ${{vars.TFSTATE_KEY_PREFIX}}
          TFSTATE_REGION: ${{vars.TFSTATE_REGION}}
          TF_VAR_ci_pp_solana_url: ${{ secrets.SOLANA_URL }}
        uses: ./.github/actions/create-tf-stand
        with:
          ci_stands_key_hcloud: ${{ secrets.CI_STANDS_KEY_HCLOUD }}

    outputs:
      proxy_ip: ${{ steps.prepare_terraform.outputs.proxy_ip }}
      solana_ip: ${{ steps.prepare_terraform.outputs.solana_ip }}
      network: ${{ env.NETWORK }}

  tests:
    name: "Operator tests"
    needs:
      - prepare-env
      - dockerize
    runs-on: neon-hosted
    env:
      NETWORK: ${{ needs.prepare-env.outputs.network }}
      SOLANA_IP: ${{ needs.prepare-env.outputs.solana_ip }}
      PROXY_IP: ${{ needs.prepare-env.outputs.proxy_ip }}
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    steps:
      - uses: actions/checkout@v4
      - name: Define image tag
        id: image_tag
        uses: ./.github/actions/define-image-tag
      - name: Run docker container
        run: |
          docker pull ${{ env.IMAGE }}:${{ steps.image_tag.outputs.tag }}
          docker run -i -d --name=${{ env.CONTAINER }} ${{ env.IMAGE }}:${{ steps.image_tag.outputs.tag }} \
            -e SOLANA_IP -e PROXY_IP /bin/bash
      - name: "Run economy tests"
        run: |
          docker exec -i ${{ env.CONTAINER }} python3 ./clickfile.py run economy -n ${{ env.NETWORK }}
      - name: "Notify on failure."
        if: failure()
        run: |
          docker exec -i ${{ env.CONTAINER }} python3 ./clickfile.py send-notification \
            -u ${{ secrets.SLACK_QA_CHANNEL_URL }} \
            -b ${{ env.BUILD_URL }}
      - name: "Generate allure report"
        uses: ./.github/actions/generate-allure-report
        if: always()
        with:
          container: ${{ env.CONTAINER }}
          network: ${{ env.NETWORK }}
          aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tests_name: economy
      - name: Remove docker container
        if: always()
        run: docker rm -f ${{ env.CONTAINER }}
  destroy:
    runs-on: ubuntu-20.04
    needs: [ prepare-env, tests ]
    if: always() && needs.prepare-env.outputs.network == 'terraform'
    steps:
      - uses: actions/checkout@v4
      - name: "Destroy stand"
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          HCLOUD_TOKEN: ${{secrets.HCLOUD_TOKEN}}
          TFSTATE_BUCKET: ${{vars.TFSTATE_BUCKET}}
          TFSTATE_KEY_PREFIX: ${{vars.TFSTATE_KEY_PREFIX}}
          TFSTATE_REGION: ${{vars.TFSTATE_REGION}}
          PROXY_IP: ${{ needs.prepare-env.outputs.proxy_ip }}
          SOLANA_IP: ${{ needs.prepare-env.outputs.solana_ip }}
        uses: ./.github/actions/destroy-tf-stand
        with:
          ci_stands_key_hcloud: ${{ secrets.CI_STANDS_KEY_HCLOUD }}

