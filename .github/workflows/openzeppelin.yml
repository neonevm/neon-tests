name: "OpenZeppelin"

on:
  schedule:
    - cron: "0 3 * * 0,1,2,3,4"
  workflow_dispatch:
    inputs:
      network:
        type: choice
        default: night-stand
        required: true
        description: "Stand name"
        options:
          - night-stand
          - devnet
          - terraform
      jobsNumber:
        description: "Count of parallel jobs"
        required: true
        default: "8"
      oz_branch:
        description: "Which OZ branch to use (if it is empty 'master', branch will be used)"
        required: false
        default: master

env:
  JOBS_NUMBER: ${{ github.event.inputs.jobsNumber || '8' }}
  NETWORK: ${{ github.event.inputs.network || 'night-stand' }}
  IMAGE:  neonlabsorg/neon_tests
  CONTAINER:  oz-${{ github.run_id }}
  BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  dockerize:
    if: github.ref_name != 'develop' || github.event.inputs.oz_branch !=''
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: "Dockerize neon tests"
        uses: ./.github/actions/dockerize-neon-tests
        with:
          image_tag: ${{ github.sha }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          oz_branch: ${{ github.event.inputs.oz_branch || 'master' }}
  prepare-env:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: "Prepare terraform stand"
        if: ${{ env.NETWORK == 'terraform' }}
        id: prepare_terraform
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          HCLOUD_TOKEN: ${{secrets.HCLOUD_TOKEN}}
          TFSTATE_BUCKET: ${{vars.TFSTATE_BUCKET}}
          TFSTATE_KEY_PREFIX: ${{vars.TFSTATE_KEY_PREFIX}}
          TFSTATE_REGION: ${{vars.TFSTATE_REGION}}
          TF_VAR_ci_pp_solana_url: ${{ secrets.SOLANA_URL }}
        uses: ./.github/actions/create-tf-stand
        with:
          ci_stands_key_hcloud: ${{ secrets.CI_STANDS_KEY_HCLOUD }}
      - name: "Define outputs"
        id: vars
        uses: ./.github/actions/define-stand-env
        with:
          network: ${{ env.NETWORK }}
          devnet_solana_url: ${{ secrets.SOLANA_URL }}
          proxy_ip: ${{ steps.prepare_terraform.outputs.proxy_ip }}
          solana_ip: ${{ steps.prepare_terraform.outputs.solana_ip }}
          proxy_url: ${{ github.event.inputs.proxy_url }}
          solana_url: ${{ github.event.inputs.solana_url }}
          faucet_url: ${{ github.event.inputs.faucet_url }}
          network_id: ${{ github.event.inputs.network_id }}

    outputs:
      network: ${{ env.NETWORK }}
      solana_url: ${{ steps.prepare_stand.outputs.solana_url }}
      proxy_url: ${{ steps.vars.outputs.proxy_url }}
      faucet_url:  ${{ steps.vars.outputs.faucet_url }}
      network_id: ${{ steps.vars.outputs.network_id }}
      proxy_ip: ${{ steps.prepare_terraform.outputs.proxy_ip }}
      solana_ip: ${{ steps.prepare_terraform.outputs.solana_ip }}
      dapps: ${{ steps.dapps.outputs.list }}

  tests:
    name: OpenZeppelin tests
    needs:
      - prepare-env
      - dockerize
    runs-on: neon-hosted
    if: always() && contains(fromJSON('["success", "skipped"]'), needs.dockerize.result) && needs.prepare-env.result == 'success'
    steps:
      - uses: actions/checkout@v4
      - name: Define image tag
        id: image_tag
        run: |
          if [[ "${{ needs.dockerize.result }}" != "skipped" ]]; then
            tag=${{ github.sha }}
          else
            tag='latest'
          fi
          echo "tag=${tag}"
          echo "tag=${tag}" >> $GITHUB_OUTPUT
      - name: Pull docker image
        run: docker pull ${{ env.IMAGE }}:${{ steps.image_tag.outputs.tag }}
      - name: Run docker container
        run: |
          docker run -i -d --name=${{ env.CONTAINER }} ${{ env.IMAGE }}:${{ steps.image_tag.outputs.tag }} /bin/bash
      - name: Run OpenZeppelin tests
        timeout-minutes: 150
        run: |
          env=''
          if [ "${{ env.NETWORK }}" == "terraform" ]; then
            env="-e PROXY_IP=${{ needs.prepare-env.outputs.proxy_ip }} -e SOLANA_IP=${{ needs.prepare-env.outputs.solana_ip }}"
          fi
          echo "env=${env}"
          docker exec -i -e OZ_BALANCES_REPORT_FLAG=1 ${env} ${{ env.CONTAINER }} python3 ./clickfile.py run oz \
            --network ${{ env.NETWORK }} \
            --jobs ${{ env.JOBS_NUMBER }} \
            --users 10
      - name: Print OpenZeppelin report
        run: |
          docker exec -i ${{ env.CONTAINER }} python3 ./clickfile.py ozreport
      - name: "Generate allure report"
        uses: ./.github/actions/generate-allure-report
        with:
          container: ${{ env.CONTAINER }}
          network: ${{ env.NETWORK }}
          aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tests_name: oz
      - name: Analyze tests results
        run: |
          docker exec -i ${{ env.CONTAINER }} python3 ./clickfile.py analyze-openzeppelin-results
      - name: "Notify on failure."
        if: failure()
        run: |
          docker exec -i ${{ env.CONTAINER }} \
            python3 ./clickfile.py send-notification -u ${{ secrets.SLACK_QA_CHANNEL_URL }} \
          -b ${{ env.BUILD_URL }} -n ${{ env.NETWORK }}
      - name: Remove docker container
        if: always()
        run: docker rm -f ${{ env.CONTAINER }}

  destroy:
    runs-on: ubuntu-20.04
    needs: [tests, prepare-env]
    if: always() && needs.prepare-env.outputs.network == 'terraform'
    steps:
      - uses: actions/checkout@v4
      - name: "Destroy stand"
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          HCLOUD_TOKEN: ${{secrets.HCLOUD_TOKEN}}
          TFSTATE_BUCKET: ${{vars.TFSTATE_BUCKET}}
          TFSTATE_KEY_PREFIX: ${{vars.TFSTATE_KEY_PREFIX}}
          TFSTATE_REGION: ${{vars.TFSTATE_REGION}}
          PROXY_IP: ${{ needs.prepare-env.outputs.proxy_ip }}
          SOLANA_IP: ${{ needs.prepare-env.outputs.solana_ip }}
        uses: ./.github/actions/destroy-tf-stand
        with:
          ci_stands_key_hcloud: ${{ secrets.CI_STANDS_KEY_HCLOUD }}
          devnet_solana_url: ${{ secrets.SOLANA_URL }}
