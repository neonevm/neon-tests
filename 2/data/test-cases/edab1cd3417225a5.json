{
  "uid" : "edab1cd3417225a5",
  "name" : "test_eth_get_transaction_by_block_hash_and_index[params1-False]",
  "fullName" : "integration.tests.basic.test_rpc_calls.TestRpcCalls#test_eth_get_transaction_by_block_hash_and_index",
  "historyId" : "c8e74f68a4ca72a260d5e4eda8fb8ed2",
  "time" : {
    "start" : 1650530992129,
    "stop" : 1650530992272,
    "duration" : 143
  },
  "description" : "Verify implemented rpc calls work eth_getTransactionByBlockHashAndIndex",
  "descriptionHtml" : "<p>Verify implemented rpc calls work eth_getTransactionByBlockHashAndIndex</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: rpc call is failed: bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466\nassert False\n +  where False = isinstance(JsonRpcErrorResponse(id=78, error={'code': -32602, 'message': 'bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466'}, jsonrpc='2.0'), <class 'integration.tests.basic.model.model.JsonRpcResponse'>)\n +    where <class 'integration.tests.basic.model.model.JsonRpcResponse'> = request_models.JsonRpcResponse",
  "statusTrace" : "self = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7fc2202b38b0>\nparams = ['0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466', 'earliest']\nraises = False\n\n    @pytest.mark.parametrize(\n        \"params, raises\",\n        [([32, 1], False), ([32, \"earliest\"], False), ([16, 1], True), ([], True)],\n    )\n    def test_eth_get_transaction_by_block_hash_and_index(self, params, raises):\n        \"\"\"Verify implemented rpc calls work eth_getTransactionByBlockHashAndIndex\"\"\"\n        if params:\n            params[0] = hex(int.from_bytes(os.urandom(params[0]), \"big\"))\n>       response = self.assert_rpc_response(\n            method=\"eth_getTransactionByBlockHashAndIndex\", params=params, raises=raises\n        )\n\nintegration/tests/basic/test_rpc_calls.py:350: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7fc2202b38b0>\nmethod = 'eth_getTransactionByBlockHashAndIndex'\nparams = ['0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466', 'earliest']\nerr_message = '', raises = False\n\n    def assert_rpc_response(\n        self,\n        method: str,\n        params: tp.Optional[tp.Any] = None,\n        err_message: str = \"\",\n        raises: bool = False,\n    ) -> tp.Union[request_models.JsonRpcResponse, request_models.JsonRpcErrorResponse]:\n        \"\"\"Verify eth endpoints responses\"\"\"\n        if not isinstance(params, tp.List):\n            params = [params]\n        payloads = getattr(RpcRequestFactory(), method)(*params)\n        response = self.json_rpc_client.do_call(payloads)\n        if raises:\n            if err_message and not isinstance(err_message, str):\n                err_message = err_message.value\n            self.assert_expected_raises(response, err_message)\n        else:\n>           assert isinstance(\n                response, request_models.JsonRpcResponse\n            ), f\"rpc call is failed: {response.error.get('message')}\"\nE           AssertionError: rpc call is failed: bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466\nE           assert False\nE            +  where False = isinstance(JsonRpcErrorResponse(id=78, error={'code': -32602, 'message': 'bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466'}, jsonrpc='2.0'), <class 'integration.tests.basic.model.model.JsonRpcResponse'>)\nE            +    where <class 'integration.tests.basic.model.model.JsonRpcResponse'> = request_models.JsonRpcResponse\n\nintegration/tests/basic/test_rpc_calls.py:116: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 1,
  "retriesStatusChange" : true,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1650530967606,
      "stop" : 1650530967606,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1650530967606,
      "stop" : 1650530967608,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1650530967608,
      "stop" : 1650530968496,
      "duration" : 888
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "json_rpc_client",
    "time" : {
      "start" : 1650530968496,
      "stop" : 1650530968496,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1650530968496,
      "stop" : 1650530968496,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1650530968496,
      "stop" : 1650530968497,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650530968497,
      "stop" : 1650530976011,
      "duration" : 7514
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1650530968497,
        "stop" : 1650530968508,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x4e820B73da8b855059e8A3a51F5682bA6a495ca6",
      "time" : {
        "start" : 1650530968508,
        "stop" : 1650530969594,
        "duration" : 1086
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Operator initial balance: 0.007635205718847550400448 NEON 61092.43751272 SOL",
      "time" : {
        "start" : 1650530976011,
        "stop" : 1650530976011,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1650530968497,
      "stop" : 1650530968497,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1650530992128,
      "stop" : 1650530992128,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "prepare_env",
    "time" : {
      "start" : 1650530992129,
      "stop" : 1650530992129,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1650530992129,
      "stop" : 1650530992129,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "Verify implemented rpc calls work eth_getTransactionByBlockHashAndIndex",
    "status" : "failed",
    "statusMessage" : "AssertionError: rpc call is failed: bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466\nassert False\n +  where False = isinstance(JsonRpcErrorResponse(id=78, error={'code': -32602, 'message': 'bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466'}, jsonrpc='2.0'), <class 'integration.tests.basic.model.model.JsonRpcResponse'>)\n +    where <class 'integration.tests.basic.model.model.JsonRpcResponse'> = request_models.JsonRpcResponse",
    "statusTrace" : "self = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7fc2202b38b0>\nparams = ['0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466', 'earliest']\nraises = False\n\n    @pytest.mark.parametrize(\n        \"params, raises\",\n        [([32, 1], False), ([32, \"earliest\"], False), ([16, 1], True), ([], True)],\n    )\n    def test_eth_get_transaction_by_block_hash_and_index(self, params, raises):\n        \"\"\"Verify implemented rpc calls work eth_getTransactionByBlockHashAndIndex\"\"\"\n        if params:\n            params[0] = hex(int.from_bytes(os.urandom(params[0]), \"big\"))\n>       response = self.assert_rpc_response(\n            method=\"eth_getTransactionByBlockHashAndIndex\", params=params, raises=raises\n        )\n\nintegration/tests/basic/test_rpc_calls.py:350: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.basic.test_rpc_calls.TestRpcCalls object at 0x7fc2202b38b0>\nmethod = 'eth_getTransactionByBlockHashAndIndex'\nparams = ['0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466', 'earliest']\nerr_message = '', raises = False\n\n    def assert_rpc_response(\n        self,\n        method: str,\n        params: tp.Optional[tp.Any] = None,\n        err_message: str = \"\",\n        raises: bool = False,\n    ) -> tp.Union[request_models.JsonRpcResponse, request_models.JsonRpcErrorResponse]:\n        \"\"\"Verify eth endpoints responses\"\"\"\n        if not isinstance(params, tp.List):\n            params = [params]\n        payloads = getattr(RpcRequestFactory(), method)(*params)\n        response = self.json_rpc_client.do_call(payloads)\n        if raises:\n            if err_message and not isinstance(err_message, str):\n                err_message = err_message.value\n            self.assert_expected_raises(response, err_message)\n        else:\n>           assert isinstance(\n                response, request_models.JsonRpcResponse\n            ), f\"rpc call is failed: {response.error.get('message')}\"\nE           AssertionError: rpc call is failed: bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466\nE           assert False\nE            +  where False = isinstance(JsonRpcErrorResponse(id=78, error={'code': -32602, 'message': 'bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466'}, jsonrpc='2.0'), <class 'integration.tests.basic.model.model.JsonRpcResponse'>)\nE            +    where <class 'integration.tests.basic.model.model.JsonRpcResponse'> = request_models.JsonRpcResponse\n\nintegration/tests/basic/test_rpc_calls.py:116: AssertionError",
    "steps" : [ {
      "name" : "Request params: {'id': 78, 'method': 'eth_getTransactionByBlockHashAndIndex', 'params': ['0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466', 'earliest'], 'jsonrpc': '2.0'}",
      "time" : {
        "start" : 1650530992129,
        "stop" : 1650530992271,
        "duration" : 142
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Response data: {'jsonrpc': '2.0', 'id': 78, 'error': {'code': -32602, 'message': 'bad block hash 0xc45984c0e2304c71e4f536df9a6288e73bf272225367279d9763d7c83c6e466'}}",
        "time" : {
          "start" : 1650530992271,
          "stop" : 1650530992271,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "hasContent" : false,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1650530998514,
      "stop" : 1650531005068,
      "duration" : 6554
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.007635206531424048232128 NEON 61092.42185732 SOL",
      "time" : {
        "start" : 1650531004922,
        "stop" : 1650531004922,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Account end balance: 1000 NEON",
      "time" : {
        "start" : 1650531005068,
        "stop" : 1650531005068,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1650531186450,
      "stop" : 1650531186451,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Basic: Json-RPC call tests"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.basic"
  }, {
    "name" : "suite",
    "value" : "test_rpc_calls"
  }, {
    "name" : "subSuite",
    "value" : "TestRpcCalls"
  }, {
    "name" : "host",
    "value" : "fv-az128-724"
  }, {
    "name" : "thread",
    "value" : "1785-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.basic.test_rpc_calls"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "params",
    "value" : "[32, 'earliest']"
  }, {
    "name" : "raises",
    "value" : "False"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "7114f844105ff56e",
      "status" : "passed",
      "time" : {
        "start" : 1650529860729,
        "stop" : 1650529860898,
        "duration" : 169
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "5d90400b688fa952",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/2//#testresult/5d90400b688fa952",
        "status" : "passed",
        "time" : {
          "start" : 1650529860729,
          "stop" : 1650529860898,
          "duration" : 169
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "edab1cd3417225a5.json",
  "parameterValues" : [ "[32, 'earliest']", "False" ]
}