{
  "uid" : "daa1ff7ad53ab30b",
  "name" : "test_send_neon_to_exist_account",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_send_neon_to_exist_account",
  "historyId" : "07ec4851a3f9619fb95689b62d62e710",
  "time" : {
    "start" : 1647930744902,
    "stop" : 1647930760234,
    "duration" : 15332
  },
  "description" : "Verify how many cost neon send to use who was already initialized",
  "descriptionHtml" : "<p>Verify how many cost neon send to use who was already initialized</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nassert Decimal('0.0000') > Decimal('0.00135158739')",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f165191b160>\n\n    @pytest.mark.only_stands\n    def test_send_neon_to_exist_account(self):\n        \"\"\"Verify how many cost neon send to use who was already initialized\"\"\"\n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 1)\n    \n        assert self.web3_client.get_balance(acc2) == 1\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n        tx = self.web3_client.send_neon(self.acc, acc2, 5)\n    \n        assert self.web3_client.get_balance(acc2) == 6\n    \n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n        assert sol_balance_before > sol_balance_after, \"Operator balance after send tx doesn't changed\"\n    \n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f165191b160>\nsol_diff = 15000, neon_diff = Decimal('0.00')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nE           assert Decimal('0.0000') > Decimal('0.00135158739')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
  "flaky" : true,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647930709520,
      "stop" : 1647930709520,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1647930709520,
      "stop" : 1647930709522,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647930709522,
      "stop" : 1647930710476,
      "duration" : 954
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647930710476,
      "stop" : 1647930710477,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647930710476,
      "stop" : 1647930710476,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647930710477,
      "stop" : 1647930710477,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647930710477,
      "stop" : 1647930711258,
      "duration" : 781
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647930711258,
      "stop" : 1647930711440,
      "duration" : 182
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 90.10582600000001$",
      "time" : {
        "start" : 1647930711440,
        "stop" : 1647930711440,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647930711441,
      "stop" : 1647930719010,
      "duration" : 7569
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647930711441,
        "stop" : 1647930711449,
        "duration" : 8
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0x00E275A2BdC7FF12b80368624558751e78233026",
      "time" : {
        "start" : 1647930711449,
        "stop" : 1647930712563,
        "duration" : 1114
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.00111552181 NEON 72411.92824052 SOL",
      "time" : {
        "start" : 1647930719010,
        "stop" : 1647930719010,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647930744902,
      "stop" : 1647930744902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647930744902,
      "stop" : 1647930744902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647930744902,
      "stop" : 1647930744902,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Verify how many cost neon send to use who was already initialized",
    "status" : "failed",
    "statusMessage" : "AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nassert Decimal('0.0000') > Decimal('0.00135158739')",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f165191b160>\n\n    @pytest.mark.only_stands\n    def test_send_neon_to_exist_account(self):\n        \"\"\"Verify how many cost neon send to use who was already initialized\"\"\"\n        acc2 = self.web3_client.create_account()\n        self.web3_client.send_neon(self.acc, acc2, 1)\n    \n        assert self.web3_client.get_balance(acc2) == 1\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n        tx = self.web3_client.send_neon(self.acc, acc2, 5)\n    \n        assert self.web3_client.get_balance(acc2) == 6\n    \n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n        assert sol_balance_before > sol_balance_after, \"Operator balance after send tx doesn't changed\"\n    \n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f165191b160>\nsol_diff = 15000, neon_diff = Decimal('0.00')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nE           assert Decimal('0.0000') > Decimal('0.00135158739')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
    "steps" : [ {
      "name" : "Verify operator profit",
      "time" : {
        "start" : 1647930760233,
        "stop" : 1647930760233,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nassert Decimal('0.0000') > Decimal('0.00135158739')\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
      "steps" : [ {
        "name" : "Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% ",
        "time" : {
          "start" : 1647930760233,
          "stop" : 1647930760233,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nassert Decimal('0.0000') > Decimal('0.00135158739')\n",
        "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "sol_diff",
        "value" : "15000"
      }, {
        "name" : "neon_diff",
        "value" : "Decimal('0.00')"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "c2fa1e5227ca035b",
      "name" : "stdout",
      "source" : "c2fa1e5227ca035b.txt",
      "type" : "text/plain",
      "size" : 213
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647931256627,
      "stop" : 1647931262905,
      "duration" : 6278
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.00111651746 NEON 72409.6901544 SOL",
      "time" : {
        "start" : 1647931262637,
        "stop" : 1647931262637,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 587.966099121056 NEON",
      "time" : {
        "start" : 1647931262905,
        "stop" : 1647931262905,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647931262909,
      "stop" : 1647931262909,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "tag",
    "value" : "only_stands"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az149-70"
  }, {
    "name" : "thread",
    "value" : "1923-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 3,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "cc1208604620aaf1",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/devnet-aws/feature/test-release-stand/24//#testresult/cc1208604620aaf1",
        "status" : "failed",
        "statusDetails" : "AssertionError: Operator receive 0.000000000 NEON (0.00 $) and spend 0.000015000 SOL (0.00 $), profit - -100.000000000% \nassert Decimal('0.0000') > Decimal('0.00137790000')",
        "time" : {
          "start" : 1647927308323,
          "stop" : 1647927327808,
          "duration" : 19485
        }
      }, {
        "uid" : "4583f3560c7ddd48",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/devnet-aws/feature/test-release-stand/21//#testresult/4583f3560c7ddd48",
        "status" : "passed",
        "time" : {
          "start" : 1647891905989,
          "stop" : 1647891921349,
          "duration" : 15360
        }
      }, {
        "uid" : "f2bc1d7059ab5c01",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/devnet-aws/feature/test-release-stand/18//#testresult/f2bc1d7059ab5c01",
        "status" : "failed",
        "statusDetails" : "AssertionError: Operator receive 0.013000000 NEON (0.00 $) and spend 0.001604040 SOL (0.14 $), profit - -97.700679200% \nassert Decimal('0.00325') > Decimal('0.141346090')",
        "time" : {
          "start" : 1647888380282,
          "stop" : 1647888392638,
          "duration" : 12356
        }
      } ]
    },
    "tags" : [ "only_stands" ]
  },
  "source" : "daa1ff7ad53ab30b.json",
  "parameterValues" : [ ]
}