{
  "uid" : "e341ec58098b9ab9",
  "name" : "test_erc20_transfer",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_erc20_transfer",
  "historyId" : "30b14f3a24c429c0b7ce795058713573",
  "time" : {
    "start" : 1647927405723,
    "stop" : 1647927418299,
    "duration" : 12576
  },
  "description" : "Verify ERC20 token send",
  "descriptionHtml" : "<p>Verify ERC20 token send</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% \nassert Decimal('0.0775') > Decimal('2.79018731')",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f0808425d30>\n\n    def test_erc20_transfer(self):\n        \"\"\"Verify ERC20 token send\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"ERC20\", \"0.6.6\", constructor_args=[1000])\n    \n        assert contract.functions.balanceOf(self.acc.address).call() == 1000\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        acc2 = self.web3_client.create_account()\n    \n        transfer_tx = self.web3_client.send_erc20(\n            self.acc, acc2, 500, contract_deploy_tx[\"contractAddress\"], abi=contract.abi\n        )\n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n    \n        assert sol_balance_before > sol_balance_after\n        assert neon_balance_after > neon_balance_before\n    \n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f0808425d30>\nsol_diff = 30386680, neon_diff = Decimal('0.31')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% \nE           assert Decimal('0.0775') > Decimal('2.79018731')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647927223335,
      "stop" : 1647927223335,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "web3_client",
    "time" : {
      "start" : 1647927223335,
      "stop" : 1647927223337,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647927223337,
      "stop" : 1647927224064,
      "duration" : 727
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647927224064,
      "stop" : 1647927224064,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647927224064,
      "stop" : 1647927224065,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647927224065,
      "stop" : 1647927225432,
      "duration" : 1367
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647927224065,
      "stop" : 1647927224065,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647927225433,
      "stop" : 1647927225648,
      "duration" : 215
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 91.82271$",
      "time" : {
        "start" : 1647927225648,
        "stop" : 1647927225648,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647927225649,
      "stop" : 1647927231572,
      "duration" : 5923
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647927225649,
        "stop" : 1647927225661,
        "duration" : 12
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xBE8c54194A1EeA16Ec7a4E9Cbf7d6c63543301c9",
      "time" : {
        "start" : 1647927225661,
        "stop" : 1647927226630,
        "duration" : 969
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.00111451 NEON 72414.1780366 SOL",
      "time" : {
        "start" : 1647927231572,
        "stop" : 1647927231572,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647927405722,
      "stop" : 1647927405722,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647927405722,
      "stop" : 1647927405722,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647927405722,
      "stop" : 1647927405722,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Verify ERC20 token send",
    "status" : "failed",
    "statusMessage" : "AssertionError: Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% \nassert Decimal('0.0775') > Decimal('2.79018731')",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f0808425d30>\n\n    def test_erc20_transfer(self):\n        \"\"\"Verify ERC20 token send\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"ERC20\", \"0.6.6\", constructor_args=[1000])\n    \n        assert contract.functions.balanceOf(self.acc.address).call() == 1000\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        acc2 = self.web3_client.create_account()\n    \n        transfer_tx = self.web3_client.send_erc20(\n            self.acc, acc2, 500, contract_deploy_tx[\"contractAddress\"], abi=contract.abi\n        )\n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n    \n        assert sol_balance_before > sol_balance_after\n        assert neon_balance_after > neon_balance_before\n    \n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f0808425d30>\nsol_diff = 30386680, neon_diff = Decimal('0.31')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% \nE           assert Decimal('0.0775') > Decimal('2.79018731')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
    "steps" : [ {
      "name" : "Verify operator profit",
      "time" : {
        "start" : 1647927418298,
        "stop" : 1647927418298,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% \nassert Decimal('0.0775') > Decimal('2.79018731')\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
      "steps" : [ {
        "name" : "Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% ",
        "time" : {
          "start" : 1647927418298,
          "stop" : 1647927418298,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Operator receive 0.310000000 NEON (0.08 $) and spend 0.030386680 SOL (2.79 $), profit - -97.222408700% \nassert Decimal('0.0775') > Decimal('2.79018731')\n",
        "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "sol_diff",
        "value" : "30386680"
      }, {
        "name" : "neon_diff",
        "value" : "Decimal('0.31')"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "d27b95aa3178b6a1",
      "name" : "stdout",
      "source" : "d27b95aa3178b6a1.txt",
      "type" : "text/plain",
      "size" : 71
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647927690899,
      "stop" : 1647927695940,
      "duration" : 5041
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.00111528141 NEON 72412.47846736 SOL",
      "time" : {
        "start" : 1647927695727,
        "stop" : 1647927695727,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 583.262218070768 NEON",
      "time" : {
        "start" : 1647927695940,
        "stop" : 1647927695940,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647927695947,
      "stop" : 1647927695947,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az38-70"
  }, {
    "name" : "thread",
    "value" : "1765-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Operator economy",
      "messageRegex" : ".*Operator receive.*",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "636b420979af33d7",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/feature/test-release-stand/19//#testresult/636b420979af33d7",
        "status" : "passed",
        "time" : {
          "start" : 1647892152468,
          "stop" : 1647892168442,
          "duration" : 15974
        }
      }, {
        "uid" : "9a57c6985b825cb5",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/feature/test-release-stand/16//#testresult/9a57c6985b825cb5",
        "status" : "passed",
        "time" : {
          "start" : 1647888532266,
          "stop" : 1647888544903,
          "duration" : 12637
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e341ec58098b9ab9.json",
  "parameterValues" : [ ]
}