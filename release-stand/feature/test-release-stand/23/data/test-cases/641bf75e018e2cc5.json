{
  "uid" : "641bf75e018e2cc5",
  "name" : "test_tx_interact_more_1kb_less_gas",
  "fullName" : "integration.tests.economy.test_economics.TestEconomics#test_tx_interact_more_1kb_less_gas",
  "historyId" : "e0fcb0c271369a58dc9a77dfbc0cb31e",
  "time" : {
    "start" : 1647927675354,
    "stop" : 1647927690882,
    "duration" : 15528
  },
  "description" : "Send to contract a big text (tx more than 1 kb)",
  "descriptionHtml" : "<p>Send to contract a big text (tx more than 1 kb)</p>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL This tx unprofitable because we create accounts before check gas\n\nAssertionError: Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% \nassert Decimal('0.0800') > Decimal('2.69163955')",
  "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f4daa8330a0>\n\n    @pytest.mark.xfail(AssertionError, reason=\"This tx unprofitable because we create accounts before check gas\")\n    def test_tx_interact_more_1kb_less_gas(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb)\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"Counter\", \"0.8.10\")\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"gas\": 100,\n            }\n        )\n        receipt = self.web3_client.send_transaction(self.acc, instruction_tx, gas=100)\n    \n        assert receipt[\"status\"] == 0\n    \n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n    \n        assert sol_balance_before > sol_balance_after, \"SOL Balance changed\"\n        assert neon_balance_after > neon_balance_before, \"NEON Balance incorrect\"\n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f4daa8330a0>\nsol_diff = 29310920, neon_diff = Decimal('0.32')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% \nE           assert Decimal('0.0800') > Decimal('2.69163955')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "web3_client",
    "time" : {
      "start" : 1647927238952,
      "stop" : 1647927238954,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1647927238952,
      "stop" : 1647927238952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "allure_environment",
    "time" : {
      "start" : 1647927238954,
      "stop" : 1647927239924,
      "duration" : 970
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_client",
    "time" : {
      "start" : 1647927239924,
      "stop" : 1647927239924,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "install_solcx_versions",
    "time" : {
      "start" : 1647927239924,
      "stop" : 1647927240794,
      "duration" : 870
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "faucet",
    "time" : {
      "start" : 1647927239924,
      "stop" : 1647927239924,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "operator",
    "time" : {
      "start" : 1647927239924,
      "stop" : 1647927239924,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sol_price",
    "time" : {
      "start" : 1647927240795,
      "stop" : 1647927240969,
      "duration" : 174
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "SOL price 91.830606$",
      "time" : {
        "start" : 1647927240969,
        "stop" : 1647927240969,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647927240969,
      "stop" : 1647927248640,
      "duration" : 7671
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Create account for tests",
      "time" : {
        "start" : 1647927240969,
        "stop" : 1647927240978,
        "duration" : 9
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request 1000 NEON from faucet for 0xCB6c1513009e59FF440aa63a5bBFA070191065ff",
      "time" : {
        "start" : 1647927240978,
        "stop" : 1647927242151,
        "duration" : 1173
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Operator initial balance: 0.00111451 NEON 72414.17647256 SOL",
      "time" : {
        "start" : 1647927248640,
        "stop" : 1647927248640,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_sol_cost",
    "time" : {
      "start" : 1647927675354,
      "stop" : 1647927675354,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare_account",
    "time" : {
      "start" : 1647927675354,
      "stop" : 1647927675354,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "prepare",
    "time" : {
      "start" : 1647927675354,
      "stop" : 1647927675354,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Send to contract a big text (tx more than 1 kb)",
    "status" : "skipped",
    "statusMessage" : "XFAIL This tx unprofitable because we create accounts before check gas\n\nAssertionError: Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% \nassert Decimal('0.0800') > Decimal('2.69163955')",
    "statusTrace" : "self = <integration.tests.economy.test_economics.TestEconomics object at 0x7f4daa8330a0>\n\n    @pytest.mark.xfail(AssertionError, reason=\"This tx unprofitable because we create accounts before check gas\")\n    def test_tx_interact_more_1kb_less_gas(self):\n        \"\"\"Send to contract a big text (tx more than 1 kb)\"\"\"\n        contract, contract_deploy_tx = self.deploy_and_get_contract(\"Counter\", \"0.8.10\")\n    \n        sol_balance_before = self.operator.get_solana_balance()\n        neon_balance_before = self.operator.get_neon_balance()\n    \n        instruction_tx = contract.functions.bigString(\n            \"But I must explain to you how all this mistaken idea of denouncing pleasure and \"\n            \"praising pain was born and I will give you a complete account of the system, and \"\n            \"expound the actual teachings of the great explorer of the truth, the master-builder \"\n            \"of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it\"\n            \" is pleasure, but because those who do not know how to pursue pleasure rationally\"\n            \" encounter consequences that are extremely painful. Nor again is there anyone who\"\n            \" loves or pursues or desires to obtain pain of itself, because it is pain, but\"\n            \" because occasionally circumstances occur in which toil and pain can procure him\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n            \" find fault with a man who chooses to enjoy a pleasure that has no annoying consequences,\"\n            \" or one who avoids a pain that produces no resultant pleasure? On the other hand,\"\n            \" we denounce with righteous indigna\"\n            \" some great pleasure. To take a trivial example, which of us ever undertakes laborious\"\n            \" physical exercise, except to obtain some advantage from it? But who has any right to\"\n        ).buildTransaction(\n            {\n                \"from\": self.acc.address,\n                \"nonce\": self.web3_client.eth.get_transaction_count(self.acc.address),\n                \"gasPrice\": self.web3_client.gas_price(),\n                \"gas\": 100,\n            }\n        )\n        receipt = self.web3_client.send_transaction(self.acc, instruction_tx, gas=100)\n    \n        assert receipt[\"status\"] == 0\n    \n        sol_balance_after = self.operator.get_solana_balance()\n        neon_balance_after = self.operator.get_neon_balance()\n    \n        assert sol_balance_before > sol_balance_after, \"SOL Balance changed\"\n        assert neon_balance_after > neon_balance_before, \"NEON Balance incorrect\"\n>       self.assert_profit(sol_balance_before - sol_balance_after, neon_balance_after - neon_balance_before)\n\nintegration/tests/economy/test_economics.py:730: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <integration.tests.economy.test_economics.TestEconomics object at 0x7f4daa8330a0>\nsol_diff = 29310920, neon_diff = Decimal('0.32')\n\n    @allure.step(\"Verify operator profit\")\n    def assert_profit(self, sol_diff, neon_diff):\n        sol_amount = sol_diff / LAMPORT_PER_SOL\n        if neon_diff < 0:\n            raise AssertionError(f\"NEON has negative difference {neon_diff}\")\n        # neon_amount = self.web3_client.fromWei(neon_diff, \"ether\")\n        neon_amount = neon_diff\n        sol_cost = Decimal(sol_amount, DECIMAL_CONTEXT) * Decimal(self.sol_price, DECIMAL_CONTEXT)\n        neon_cost = Decimal(neon_amount, DECIMAL_CONTEXT) * Decimal(NEON_PRICE, DECIMAL_CONTEXT)\n        msg = \"Operator receive {:.9f} NEON ({:.2f} $) and spend {:.9f} SOL ({:.2f} $), profit - {:.9f}% \".format(\n            neon_amount, neon_cost, sol_amount, sol_cost, ((neon_cost - sol_cost) / sol_cost * 100)\n        )\n        with allure.step(msg):\n>           assert neon_cost > sol_cost, msg\nE           AssertionError: Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% \nE           assert Decimal('0.0800') > Decimal('2.69163955')\n\nintegration/tests/economy/test_economics.py:57: AssertionError",
    "steps" : [ {
      "name" : "Verify operator profit",
      "time" : {
        "start" : 1647927690881,
        "stop" : 1647927690881,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% \nassert Decimal('0.0800') > Decimal('2.69163955')\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.9.10/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
      "steps" : [ {
        "name" : "Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% ",
        "time" : {
          "start" : 1647927690881,
          "stop" : 1647927690881,
          "duration" : 0
        },
        "status" : "failed",
        "statusMessage" : "AssertionError: Operator receive 0.320000000 NEON (0.08 $) and spend 0.029310920 SOL (2.69 $), profit - -97.027833800% \nassert Decimal('0.0800') > Decimal('2.69163955')\n",
        "statusTrace" : "  File \"/home/runner/work/neon-tests/neon-tests/integration/tests/economy/test_economics.py\", line 57, in assert_profit\n    assert neon_cost > sol_cost, msg\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "sol_diff",
        "value" : "29310920"
      }, {
        "name" : "neon_diff",
        "value" : "Decimal('0.32')"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "e7ae7b48062067a8",
      "name" : "stdout",
      "source" : "e7ae7b48062067a8.txt",
      "type" : "text/plain",
      "size" : 71
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "prepare_account::0",
    "time" : {
      "start" : 1647927788846,
      "stop" : 1647927795096,
      "duration" : 6250
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Operator end balance: 0.00111543528 NEON 72412.11860676 SOL",
      "time" : {
        "start" : 1647927794827,
        "stop" : 1647927794827,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Account end balance: 583.319221838912 NEON",
      "time" : {
        "start" : 1647927795096,
        "stop" : 1647927795096,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "allure_environment::0",
    "time" : {
      "start" : 1647927795100,
      "stop" : 1647927795100,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Operator economy"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail(<class 'AssertionError'>, reason='This tx unprofitable because we create accounts before check gas')"
  }, {
    "name" : "parentSuite",
    "value" : "integration.tests.economy"
  }, {
    "name" : "suite",
    "value" : "test_economics"
  }, {
    "name" : "subSuite",
    "value" : "TestEconomics"
  }, {
    "name" : "host",
    "value" : "fv-az138-811"
  }, {
    "name" : "thread",
    "value" : "1786-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "integration.tests.economy.test_economics"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Operator economy",
      "messageRegex" : ".*Operator receive.*",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 1,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "d3c99bacf684655a",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/release-stand/feature/test-release-stand/20//#testresult/d3c99bacf684655a",
        "status" : "passed",
        "statusDetails" : "XPASS This tx unprofitable because we create accounts before check gas",
        "time" : {
          "start" : 1647892312737,
          "stop" : 1647892330397,
          "duration" : 17660
        }
      }, {
        "uid" : "459036d10c3399f4",
        "reportUrl" : "https://neonlabsorg.github.io/neon-tests/release-stand/feature/test-release-stand/17//#testresult/459036d10c3399f4",
        "status" : "passed",
        "statusDetails" : "XPASS This tx unprofitable because we create accounts before check gas",
        "time" : {
          "start" : 1647888792551,
          "stop" : 1647888808079,
          "duration" : 15528
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail(<class 'AssertionError'>, reason='This tx unprofitable because we create accounts before check gas')" ]
  },
  "source" : "641bf75e018e2cc5.json",
  "parameterValues" : [ ]
}