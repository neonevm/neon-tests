LavaPack.loadBundle([[352,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0x2745C24822f542BbfFB41c6cB20EdF766b5619f5",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"},{components:[{internalType:"uint256",name:"minTransactionGasLimit",type:"uint256"},{internalType:"uint256",name:"maxTransactionGasLimit",type:"uint256"},{internalType:"uint256",name:"maxGasPerQueuePerEpoch",type:"uint256"},{internalType:"uint256",name:"secondsPerEpoch",type:"uint256"}],internalType:"struct iOVM_ExecutionManager.GasMeterConfig",name:"_gasMeterConfig",type:"tuple"},{components:[{internalType:"uint256",name:"ovmCHAINID",type:"uint256"}],internalType:"struct iOVM_ExecutionManager.GlobalContext",name:"_globalContext",type:"tuple"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CALL_WITH_VALUE_INTRINSIC_GAS",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getMaxTransactionGasLimit",outputs:[{internalType:"uint256",name:"_maxTransactionGasLimit",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ovmADDRESS",outputs:[{internalType:"address",name:"_ADDRESS",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_contract",type:"address"}],name:"ovmBALANCE",outputs:[{internalType:"uint256",name:"_BALANCE",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasLimit",type:"uint256"},{internalType:"address",name:"_address",type:"address"},{internalType:"uint256",name:"_value",type:"uint256"},{internalType:"bytes",name:"_calldata",type:"bytes"}],name:"ovmCALL",outputs:[{internalType:"bool",name:"_success",type:"bool"},{internalType:"bytes",name:"_returndata",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasLimit",type:"uint256"},{internalType:"address",name:"_address",type:"address"},{internalType:"bytes",name:"_calldata",type:"bytes"}],name:"ovmCALL",outputs:[{internalType:"bool",name:"_success",type:"bool"},{internalType:"bytes",name:"_returndata",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"ovmCALLER",outputs:[{internalType:"address",name:"_CALLER",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ovmCALLVALUE",outputs:[{internalType:"uint256",name:"_CALLVALUE",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"ovmCHAINID",outputs:[{internalType:"uint256",name:"_CHAINID",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_bytecode",type:"bytes"}],name:"ovmCREATE",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"_bytecode",type:"bytes"},{internalType:"bytes32",name:"_salt",type:"bytes32"}],name:"ovmCREATE2",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_messageHash",type:"bytes32"},{internalType:"uint8",name:"_v",type:"uint8"},{internalType:"bytes32",name:"_r",type:"bytes32"},{internalType:"bytes32",name:"_s",type:"bytes32"}],name:"ovmCREATEEOA",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasLimit",type:"uint256"},{internalType:"address",name:"_address",type:"address"},{internalType:"bytes",name:"_calldata",type:"bytes"}],name:"ovmDELEGATECALL",outputs:[{internalType:"bool",name:"_success",type:"bool"},{internalType:"bytes",name:"_returndata",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_contract",type:"address"},{internalType:"uint256",name:"_offset",type:"uint256"},{internalType:"uint256",name:"_length",type:"uint256"}],name:"ovmEXTCODECOPY",outputs:[{internalType:"bytes",name:"_code",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_contract",type:"address"}],name:"ovmEXTCODEHASH",outputs:[{internalType:"bytes32",name:"_EXTCODEHASH",type:"bytes32"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_contract",type:"address"}],name:"ovmEXTCODESIZE",outputs:[{internalType:"uint256",name:"_EXTCODESIZE",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"ovmGASLIMIT",outputs:[{internalType:"uint256",name:"_GASLIMIT",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"ovmGETNONCE",outputs:[{internalType:"uint256",name:"_nonce",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"ovmINCREMENTNONCE",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"ovmL1QUEUEORIGIN",outputs:[{internalType:"enum Lib_OVMCodec.QueueOrigin",name:"_queueOrigin",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"ovmL1TXORIGIN",outputs:[{internalType:"address",name:"_l1TxOrigin",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ovmNUMBER",outputs:[{internalType:"uint256",name:"_NUMBER",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"ovmREVERT",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"ovmSELFBALANCE",outputs:[{internalType:"uint256",name:"_BALANCE",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_key",type:"bytes32"}],name:"ovmSLOAD",outputs:[{internalType:"bytes32",name:"_value",type:"bytes32"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_key",type:"bytes32"},{internalType:"bytes32",name:"_value",type:"bytes32"}],name:"ovmSSTORE",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasLimit",type:"uint256"},{internalType:"address",name:"_address",type:"address"},{internalType:"bytes",name:"_calldata",type:"bytes"}],name:"ovmSTATICCALL",outputs:[{internalType:"bool",name:"_success",type:"bool"},{internalType:"bytes",name:"_returndata",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"ovmTIMESTAMP",outputs:[{internalType:"uint256",name:"_TIMESTAMP",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"enum Lib_OVMCodec.QueueOrigin",name:"l1QueueOrigin",type:"uint8"},{internalType:"address",name:"l1TxOrigin",type:"address"},{internalType:"address",name:"entrypoint",type:"address"},{internalType:"uint256",name:"gasLimit",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Lib_OVMCodec.Transaction",name:"_transaction",type:"tuple"},{internalType:"address",name:"_ovmStateManager",type:"address"}],name:"run",outputs:[{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"_creationCode",type:"bytes"},{internalType:"address",name:"_address",type:"address"}],name:"safeCREATE",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"enum Lib_OVMCodec.QueueOrigin",name:"l1QueueOrigin",type:"uint8"},{internalType:"address",name:"l1TxOrigin",type:"address"},{internalType:"address",name:"entrypoint",type:"address"},{internalType:"uint256",name:"gasLimit",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Lib_OVMCodec.Transaction",name:"_transaction",type:"tuple"},{internalType:"address",name:"_from",type:"address"},{internalType:"uint256",name:"_value",type:"uint256"},{internalType:"contract iOVM_StateManager",name:"_ovmStateManager",type:"address"}],name:"simulateMessage",outputs:[{internalType:"bytes",name:"",type:"bytes"}],stateMutability:"nonpayable",type:"function"}],transactionHash:"0x294f7e2920d42cc8e21231f37e159c99c1569b22b8775f3819ada1ebe1bc08fc",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0x2745C24822f542BbfFB41c6cB20EdF766b5619f5",transactionIndex:132,gasUsed:"3122024",logsBloom:"0xblockHash:"0xf62c27762cbb4a60129940cee91357f619a1d442400c16243e5f3c3690c02b4a",transactionHash:"0x294f7e2920d42cc8e21231f37e159c99c1569b22b8775f3819ada1ebe1bc08fc",logs:[],blockNumber:12686762,cumulativeGasUsed:"11718241",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",{minTransactionGasLimit:5e4,maxTransactionGasLimit:11e6,maxGasPerQueuePerEpoch:25e7,secondsPerEpoch:0},{ovmCHAINID:10}],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"},{"components":[{"internalType":"uint256","name":"minTransactionGasLimit","type":"uint256"},{"internalType":"uint256","name":"maxTransactionGasLimit","type":"uint256"},{"internalType":"uint256","name":"maxGasPerQueuePerEpoch","type":"uint256"},{"internalType":"uint256","name":"secondsPerEpoch","type":"uint256"}],"internalType":"struct iOVM_ExecutionManager.GasMeterConfig","name":"_gasMeterConfig","type":"tuple"},{"components":[{"internalType":"uint256","name":"ovmCHAINID","type":"uint256"}],"internalType":"struct iOVM_ExecutionManager.GlobalContext","name":"_globalContext","type":"tuple"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CALL_WITH_VALUE_INTRINSIC_GAS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMaxTransactionGasLimit","outputs":[{"internalType":"uint256","name":"_maxTransactionGasLimit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ovmADDRESS","outputs":[{"internalType":"address","name":"_ADDRESS","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"ovmBALANCE","outputs":[{"internalType":"uint256","name":"_BALANCE","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"ovmCALL","outputs":[{"internalType":"bool","name":"_success","type":"bool"},{"internalType":"bytes","name":"_returndata","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"ovmCALL","outputs":[{"internalType":"bool","name":"_success","type":"bool"},{"internalType":"bytes","name":"_returndata","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ovmCALLER","outputs":[{"internalType":"address","name":"_CALLER","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ovmCALLVALUE","outputs":[{"internalType":"uint256","name":"_CALLVALUE","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ovmCHAINID","outputs":[{"internalType":"uint256","name":"_CHAINID","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_bytecode","type":"bytes"}],"name":"ovmCREATE","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_bytecode","type":"bytes"},{"internalType":"bytes32","name":"_salt","type":"bytes32"}],"name":"ovmCREATE2","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_messageHash","type":"bytes32"},{"internalType":"uint8","name":"_v","type":"uint8"},{"internalType":"bytes32","name":"_r","type":"bytes32"},{"internalType":"bytes32","name":"_s","type":"bytes32"}],"name":"ovmCREATEEOA","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"ovmDELEGATECALL","outputs":[{"internalType":"bool","name":"_success","type":"bool"},{"internalType":"bytes","name":"_returndata","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"},{"internalType":"uint256","name":"_offset","type":"uint256"},{"internalType":"uint256","name":"_length","type":"uint256"}],"name":"ovmEXTCODECOPY","outputs":[{"internalType":"bytes","name":"_code","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"ovmEXTCODEHASH","outputs":[{"internalType":"bytes32","name":"_EXTCODEHASH","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"ovmEXTCODESIZE","outputs":[{"internalType":"uint256","name":"_EXTCODESIZE","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ovmGASLIMIT","outputs":[{"internalType":"uint256","name":"_GASLIMIT","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ovmGETNONCE","outputs":[{"internalType":"uint256","name":"_nonce","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ovmINCREMENTNONCE","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ovmL1QUEUEORIGIN","outputs":[{"internalType":"enum Lib_OVMCodec.QueueOrigin","name":"_queueOrigin","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ovmL1TXORIGIN","outputs":[{"internalType":"address","name":"_l1TxOrigin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ovmNUMBER","outputs":[{"internalType":"uint256","name":"_NUMBER","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"ovmREVERT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ovmSELFBALANCE","outputs":[{"internalType":"uint256","name":"_BALANCE","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"}],"name":"ovmSLOAD","outputs":[{"internalType":"bytes32","name":"_value","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"ovmSSTORE","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes","name":"_calldata","type":"bytes"}],"name":"ovmSTATICCALL","outputs":[{"internalType":"bool","name":"_success","type":"bool"},{"internalType":"bytes","name":"_returndata","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"ovmTIMESTAMP","outputs":[{"internalType":"uint256","name":"_TIMESTAMP","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum Lib_OVMCodec.QueueOrigin","name":"l1QueueOrigin","type":"uint8"},{"internalType":"address","name":"l1TxOrigin","type":"address"},{"internalType":"address","name":"entrypoint","type":"address"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Lib_OVMCodec.Transaction","name":"_transaction","type":"tuple"},{"internalType":"address","name":"_ovmStateManager","type":"address"}],"name":"run","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_creationCode","type":"bytes"},{"internalType":"address","name":"_address","type":"address"}],"name":"safeCREATE","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum Lib_OVMCodec.QueueOrigin","name":"l1QueueOrigin","type":"uint8"},{"internalType":"address","name":"l1TxOrigin","type":"address"},{"internalType":"address","name":"entrypoint","type":"address"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Lib_OVMCodec.Transaction","name":"_transaction","type":"tuple"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"contract iOVM_StateManager","name":"_ovmStateManager","type":"address"}],"name":"simulateMessage","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"The Execution Manager (EM) is the core of our OVM implementation, and provides a sandboxed environment allowing us to execute OVM transactions deterministically on either Layer 1 or Layer 2. The EM\'s run() function is the first function called during the execution of any transaction on L2. For each context-dependent EVM operation the EM has a function which implements a corresponding OVM operation, which will read state from the State Manager contract. The EM relies on the Safety Checker to verify that code deployed to Layer 2 does not contain any context-dependent operations. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"constructor":{"params":{"_libAddressManager":"Address of the Address Manager."}},"ovmADDRESS()":{"returns":{"_ADDRESS":"Active ADDRESS within the current message context."}},"ovmBALANCE(address)":{"params":{"_contract":"Address of the contract to query the OVM_ETH balance of."},"returns":{"_BALANCE":"OVM_ETH balance of the requested contract."}},"ovmCALL(uint256,address,bytes)":{"params":{"_address":"Address of the contract to call.","_calldata":"Data to send along with the call.","_gasLimit":"Amount of gas to be passed into this call."},"returns":{"_returndata":"Data returned by the call.","_success":"Whether or not the call returned (rather than reverted)."}},"ovmCALL(uint256,address,uint256,bytes)":{"params":{"_address":"Address of the contract to call.","_calldata":"Data to send along with the call.","_gasLimit":"Amount of gas to be passed into this call.","_value":"ETH value to pass with the call."},"returns":{"_returndata":"Data returned by the call.","_success":"Whether or not the call returned (rather than reverted)."}},"ovmCALLER()":{"returns":{"_CALLER":"Address of the CALLER within the current message context."}},"ovmCALLVALUE()":{"returns":{"_CALLVALUE":"Value sent along with the call according to the current message context."}},"ovmCHAINID()":{"returns":{"_CHAINID":"Value of the chain\'s CHAINID within the global context."}},"ovmCREATE(bytes)":{"params":{"_bytecode":"Code to be used to CREATE a new contract."},"returns":{"_0":"Address of the created contract.","_1":"Revert data, if and only if the creation threw an exception."}},"ovmCREATE2(bytes,bytes32)":{"params":{"_bytecode":"Code to be used to CREATE2 a new contract.","_salt":"Value used to determine the contract\'s address."},"returns":{"_0":"Address of the created contract.","_1":"Revert data, if and only if the creation threw an exception."}},"ovmCREATEEOA(bytes32,uint8,bytes32,bytes32)":{"details":"Essentially functions like ovmCREATE or ovmCREATE2, but we can bypass a lot of checks      because the contract we\'re creating is trusted (no need to do safety checking or to      handle unexpected reverts). Doesn\'t need to return an address because the address is      assumed to be the user\'s actual address.","params":{"_messageHash":"Hash of a message signed by some user, for verification.","_r":"Signature `r` parameter.","_s":"Signature `s` parameter.","_v":"Signature `v` parameter."}},"ovmDELEGATECALL(uint256,address,bytes)":{"params":{"_address":"Address of the contract to call.","_calldata":"Data to send along with the call.","_gasLimit":"Amount of gas to be passed into this call."},"returns":{"_returndata":"Data returned by the call.","_success":"Whether or not the call returned (rather than reverted)."}},"ovmEXTCODECOPY(address,uint256,uint256)":{"params":{"_contract":"Address of the contract to copy code from.","_length":"Total number of bytes to copy from the contract\'s code.","_offset":"Offset in bytes from the start of contract code to copy beyond."},"returns":{"_code":"Bytes of code copied from the requested contract."}},"ovmEXTCODEHASH(address)":{"params":{"_contract":"Address of the contract to query the hash of."},"returns":{"_EXTCODEHASH":"Hash of the requested contract."}},"ovmEXTCODESIZE(address)":{"params":{"_contract":"Address of the contract to query the size of."},"returns":{"_EXTCODESIZE":"Size of the requested contract in bytes."}},"ovmGASLIMIT()":{"returns":{"_GASLIMIT":"Value of the block\'s GASLIMIT within the transaction context."}},"ovmGETNONCE()":{"returns":{"_nonce":"Nonce of the current contract."}},"ovmL1QUEUEORIGIN()":{"returns":{"_queueOrigin":"Enum indicating the ovmL1QUEUEORIGIN within the current message context."}},"ovmL1TXORIGIN()":{"returns":{"_l1TxOrigin":"Address of the account which sent the tx into L2 from L1."}},"ovmNUMBER()":{"returns":{"_NUMBER":"Value of the NUMBER within the transaction context."}},"ovmREVERT(bytes)":{"params":{"_data":"Bytes data to pass along with the REVERT."}},"ovmSELFBALANCE()":{"returns":{"_BALANCE":"OVM_ETH balance of the requesting contract."}},"ovmSLOAD(bytes32)":{"params":{"_key":"32 byte key of the storage slot to load."},"returns":{"_value":"32 byte value of the requested storage slot."}},"ovmSSTORE(bytes32,bytes32)":{"params":{"_key":"32 byte key of the storage slot to set.","_value":"32 byte value for the storage slot."}},"ovmSTATICCALL(uint256,address,bytes)":{"params":{"_address":"Address of the contract to call.","_calldata":"Data to send along with the call.","_gasLimit":"Amount of gas to be passed into this call."},"returns":{"_returndata":"Data returned by the call.","_success":"Whether or not the call returned (rather than reverted)."}},"ovmTIMESTAMP()":{"returns":{"_TIMESTAMP":"Value of the TIMESTAMP within the transaction context."}},"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}},"run((uint256,uint256,uint8,address,address,uint256,bytes),address)":{"params":{"_ovmStateManager":"iOVM_StateManager implementation providing account state.","_transaction":"Transaction data to be executed."}},"safeCREATE(bytes,address)":{"params":{"_address":"OVM address being deployed to.","_creationCode":"Code to pass into CREATE for deployment."}},"simulateMessage((uint256,uint256,uint8,address,address,uint256,bytes),address,uint256,address)":{"params":{"_from":"the OVM account the simulated call should be from.","_ovmStateManager":"the address of the OVM_StateManager precompile in the L2 state.","_transaction":"the message transaction to simulate.","_value":"the amount of ETH value to send."}}},"stateVariables":{"CONTAINER_CONTRACT_PREFIX":{"details":"The Execution Manager and State Manager each have this 30 byte prefix, and are uncallable."}},"title":"OVM_ExecutionManager","version":1},"userdoc":{"kind":"user","methods":{"ovmADDRESS()":{"notice":"Overrides ADDRESS."},"ovmBALANCE(address)":{"notice":"Overrides BALANCE. NOTE: In the future, this could be optimized to directly invoke EM._getContractStorage(...)."},"ovmCALL(uint256,address,bytes)":{"notice":"Legacy ovmCALL function which did not support ETH value; this maintains backwards compatibility."},"ovmCALL(uint256,address,uint256,bytes)":{"notice":"Overrides CALL."},"ovmCALLER()":{"notice":"Overrides CALLER."},"ovmCALLVALUE()":{"notice":"Overrides CALLVALUE."},"ovmCHAINID()":{"notice":"Overrides CHAINID."},"ovmCREATE(bytes)":{"notice":"Overrides CREATE."},"ovmCREATE2(bytes,bytes32)":{"notice":"Overrides CREATE2."},"ovmCREATEEOA(bytes32,uint8,bytes32,bytes32)":{"notice":"Creates a new EOA contract account, for account abstraction."},"ovmDELEGATECALL(uint256,address,bytes)":{"notice":"Overrides DELEGATECALL."},"ovmEXTCODECOPY(address,uint256,uint256)":{"notice":"Overrides EXTCODECOPY."},"ovmEXTCODEHASH(address)":{"notice":"Overrides EXTCODEHASH."},"ovmEXTCODESIZE(address)":{"notice":"Overrides EXTCODESIZE."},"ovmGASLIMIT()":{"notice":"Overrides GASLIMIT."},"ovmGETNONCE()":{"notice":"Retrieves the nonce of the current ovmADDRESS."},"ovmINCREMENTNONCE()":{"notice":"Bumps the nonce of the current ovmADDRESS by one."},"ovmL1QUEUEORIGIN()":{"notice":"Specifies from which source (Sequencer or Queue) this transaction originated from."},"ovmL1TXORIGIN()":{"notice":"Specifies which L1 account, if any, sent this transaction by calling enqueue()."},"ovmNUMBER()":{"notice":"Overrides NUMBER."},"ovmREVERT(bytes)":{"notice":"Overrides REVERT."},"ovmSELFBALANCE()":{"notice":"Overrides SELFBALANCE."},"ovmSLOAD(bytes32)":{"notice":"Overrides SLOAD."},"ovmSSTORE(bytes32,bytes32)":{"notice":"Overrides SSTORE."},"ovmSTATICCALL(uint256,address,bytes)":{"notice":"Overrides STATICCALL."},"ovmTIMESTAMP()":{"notice":"Overrides TIMESTAMP."},"resolve(string)":{"notice":"Resolves the address associated with a given name."},"run((uint256,uint256,uint8,address,address,uint256,bytes),address)":{"notice":"Starts the execution of a transaction via the OVM_ExecutionManager."},"safeCREATE(bytes,address)":{"notice":"Handles the creation-specific safety measures required for OVM contract deployment. This function sanitizes the return types for creation messages to match calls (bool, bytes), by being an external function which the EM can call, that mimics the success/fail case of the CREATE. This allows for consistent handling of both types of messages in _handleExternalMessage(). Having this step occur as a separate call frame also allows us to easily revert the contract deployment in the event that the code is unsafe."},"simulateMessage((uint256,uint256,uint8,address,address,uint256,bytes),address,uint256,address)":{"notice":"Unreachable helper function for simulating eth_calls with an OVM message context. This function will throw an exception in all cases other than when used as a custom entrypoint in L2 Geth to simulate eth_call."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol":"OVM_ExecutionManager"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n","keccak256":"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol":{"content":"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../../libraries/utils/Lib_Bytes32Utils.sol\\";\\nimport { Lib_EthUtils } from \\"../../libraries/utils/Lib_EthUtils.sol\\";\\nimport { Lib_ErrorUtils } from \\"../../libraries/utils/Lib_ErrorUtils.sol\\";\\nimport { Lib_PredeployAddresses } from \\"../../libraries/constants/Lib_PredeployAddresses.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_ExecutionManager } from \\"../../iOVM/execution/iOVM_ExecutionManager.sol\\";\\nimport { iOVM_StateManager } from \\"../../iOVM/execution/iOVM_StateManager.sol\\";\\nimport { iOVM_SafetyChecker } from \\"../../iOVM/execution/iOVM_SafetyChecker.sol\\";\\n\\n/* Contract Imports */\\nimport { OVM_DeployerWhitelist } from \\"../predeploys/OVM_DeployerWhitelist.sol\\";\\n\\n/* External Imports */\\nimport { Math } from \\"@openzeppelin/contracts/math/Math.sol\\";\\n\\n/**\\n * @title OVM_ExecutionManager\\n * @dev The Execution Manager (EM) is the core of our OVM implementation, and provides a sandboxed\\n * environment allowing us to execute OVM transactions deterministically on either Layer 1 or\\n * Layer 2.\\n * The EM\'s run() function is the first function called during the execution of any\\n * transaction on L2.\\n * For each context-dependent EVM operation the EM has a function which implements a corresponding\\n * OVM operation, which will read state from the State Manager contract.\\n * The EM relies on the Safety Checker to verify that code deployed to Layer 2 does not contain any\\n * context-dependent operations.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_ExecutionManager is iOVM_ExecutionManager, Lib_AddressResolver {\\n\\n    /********************************\\n     * External Contract References *\\n     ********************************/\\n\\n    iOVM_SafetyChecker internal ovmSafetyChecker;\\n    iOVM_StateManager internal ovmStateManager;\\n\\n\\n    /*******************************\\n     * Execution Context Variables *\\n     *******************************/\\n\\n    GasMeterConfig internal gasMeterConfig;\\n    GlobalContext internal globalContext;\\n    TransactionContext internal transactionContext;\\n    MessageContext internal messageContext;\\n    TransactionRecord internal transactionRecord;\\n    MessageRecord internal messageRecord;\\n\\n\\n    /**************************\\n     * Gas Metering Constants *\\n     **************************/\\n\\n    address constant GAS_METADATA_ADDRESS = 0x06a506A506a506A506a506a506A506A506A506A5;\\n    uint256 constant NUISANCE_GAS_SLOAD = 20000;\\n    uint256 constant NUISANCE_GAS_SSTORE = 20000;\\n    uint256 constant MIN_NUISANCE_GAS_PER_CONTRACT = 30000;\\n    uint256 constant NUISANCE_GAS_PER_CONTRACT_BYTE = 100;\\n    uint256 constant MIN_GAS_FOR_INVALID_STATE_ACCESS = 30000;\\n\\n\\n    /**************************\\n     * Native Value Constants *\\n     **************************/\\n\\n    // Public so we can access and make assertions in integration tests.\\n    uint256 public constant CALL_WITH_VALUE_INTRINSIC_GAS = 90000;\\n\\n\\n    /**************************\\n     * Default Context Values *\\n     **************************/\\n\\n    uint256 constant DEFAULT_UINT256 = 0xdefa017defa017defa017defa017defa017defa017defa017defa017defa017d;\\n    address constant DEFAULT_ADDRESS = 0xdEfa017defA017DeFA017DEfa017DeFA017DeFa0;\\n\\n\\n    /*************************************\\n     * Container Contract Address Prefix *\\n     *************************************/\\n\\n    /**\\n     * @dev The Execution Manager and State Manager each have this 30 byte prefix, and are uncallable.\\n     */\\n    address constant CONTAINER_CONTRACT_PREFIX = 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Address Manager.\\n     */\\n    constructor(\\n        address _libAddressManager,\\n        GasMeterConfig memory _gasMeterConfig,\\n        GlobalContext memory _globalContext\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {\\n        ovmSafetyChecker = iOVM_SafetyChecker(resolve(\\"OVM_SafetyChecker\\"));\\n        gasMeterConfig = _gasMeterConfig;\\n        globalContext = _globalContext;\\n        _resetContext();\\n    }\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Applies dynamically-sized refund to a transaction to account for the difference in execution\\n     * between L1 and L2, so that the overall cost of the ovmOPCODE is fixed.\\n     * @param _cost Desired gas cost for the function after the refund.\\n     */\\n    modifier netGasCost(\\n        uint256 _cost\\n    ) {\\n        uint256 gasProvided = gasleft();\\n        _;\\n        uint256 gasUsed = gasProvided - gasleft();\\n\\n        // We want to refund everything *except* the specified cost.\\n        if (_cost < gasUsed) {\\n            transactionRecord.ovmGasRefund += gasUsed - _cost;\\n        }\\n    }\\n\\n    /**\\n     * Applies a fixed-size gas refund to a transaction to account for the difference in execution\\n     * between L1 and L2, so that the overall cost of an ovmOPCODE can be lowered.\\n     * @param _discount Amount of gas cost to refund for the ovmOPCODE.\\n     */\\n    modifier fixedGasDiscount(\\n        uint256 _discount\\n    ) {\\n        uint256 gasProvided = gasleft();\\n        _;\\n        uint256 gasUsed = gasProvided - gasleft();\\n\\n        // We want to refund the specified _discount, unless this risks underflow.\\n        if (_discount < gasUsed) {\\n            transactionRecord.ovmGasRefund += _discount;\\n        } else {\\n            // refund all we can without risking underflow.\\n            transactionRecord.ovmGasRefund += gasUsed;\\n        }\\n    }\\n\\n    /**\\n     * Makes sure we\'re not inside a static context.\\n     */\\n    modifier notStatic() {\\n        if (messageContext.isStatic == true) {\\n            _revertWithFlag(RevertFlag.STATIC_VIOLATION);\\n        }\\n        _;\\n    }\\n\\n\\n    /************************************\\n     * Transaction Execution Entrypoint *\\n     ************************************/\\n\\n    /**\\n     * Starts the execution of a transaction via the OVM_ExecutionManager.\\n     * @param _transaction Transaction data to be executed.\\n     * @param _ovmStateManager iOVM_StateManager implementation providing account state.\\n     */\\n    function run(\\n        Lib_OVMCodec.Transaction memory _transaction,\\n        address _ovmStateManager\\n    )\\n        override\\n        external\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        // Make sure that run() is not re-enterable.  This condition should always be satisfied\\n        // Once run has been called once, due to the behavior of _isValidInput().\\n        if (transactionContext.ovmNUMBER != DEFAULT_UINT256) {\\n            return bytes(\\"\\");\\n        }\\n\\n        // Store our OVM_StateManager instance (significantly easier than attempting to pass the\\n        // address around in calldata).\\n        ovmStateManager = iOVM_StateManager(_ovmStateManager);\\n\\n        // Make sure this function can\'t be called by anyone except the owner of the\\n        // OVM_StateManager (expected to be an OVM_StateTransitioner). We can revert here because\\n        // this would make the `run` itself invalid.\\n        require(\\n            // This method may return false during fraud proofs, but always returns true in L2 nodes\' State Manager precompile.\\n            ovmStateManager.isAuthenticated(msg.sender),\\n            \\"Only authenticated addresses in ovmStateManager can call this function\\"\\n        );\\n\\n        // Initialize the execution context, must be initialized before we perform any gas metering\\n        // or we\'ll throw a nuisance gas error.\\n        _initContext(_transaction);\\n\\n        // TEMPORARY: Gas metering is disabled for minnet.\\n        // // Check whether we need to start a new epoch, do so if necessary.\\n        // _checkNeedsNewEpoch(_transaction.timestamp);\\n\\n        // Make sure the transaction\'s gas limit is valid. We don\'t revert here because we reserve\\n        // reverts for INVALID_STATE_ACCESS.\\n        if (_isValidInput(_transaction) == false) {\\n            _resetContext();\\n            return bytes(\\"\\");\\n        }\\n\\n        // TEMPORARY: Gas metering is disabled for minnet.\\n        // // Check gas right before the call to get total gas consumed by OVM transaction.\\n        // uint256 gasProvided = gasleft();\\n\\n        // Run the transaction, make sure to meter the gas usage.\\n        (, bytes memory returndata) = ovmCALL(\\n            _transaction.gasLimit - gasMeterConfig.minTransactionGasLimit,\\n            _transaction.entrypoint,\\n            0,\\n            _transaction.data\\n        );\\n\\n        // TEMPORARY: Gas metering is disabled for minnet.\\n        // // Update the cumulative gas based on the amount of gas used.\\n        // uint256 gasUsed = gasProvided - gasleft();\\n        // _updateCumulativeGas(gasUsed, _transaction.l1QueueOrigin);\\n\\n        // Wipe the execution context.\\n        _resetContext();\\n\\n        return returndata;\\n    }\\n\\n\\n    /******************************\\n     * Opcodes: Execution Context *\\n     ******************************/\\n\\n    /**\\n     * @notice Overrides CALLER.\\n     * @return _CALLER Address of the CALLER within the current message context.\\n     */\\n    function ovmCALLER()\\n        override\\n        external\\n        view\\n        returns (\\n            address _CALLER\\n        )\\n    {\\n        return messageContext.ovmCALLER;\\n    }\\n\\n    /**\\n     * @notice Overrides ADDRESS.\\n     * @return _ADDRESS Active ADDRESS within the current message context.\\n     */\\n    function ovmADDRESS()\\n        override\\n        public\\n        view\\n        returns (\\n            address _ADDRESS\\n        )\\n    {\\n        return messageContext.ovmADDRESS;\\n    }\\n\\n    /**\\n     * @notice Overrides CALLVALUE.\\n     * @return _CALLVALUE Value sent along with the call according to the current message context.\\n     */\\n    function ovmCALLVALUE()\\n        override\\n        public\\n        view\\n        returns (\\n            uint256 _CALLVALUE\\n        )\\n    {\\n        return messageContext.ovmCALLVALUE;\\n    }\\n\\n    /**\\n     * @notice Overrides TIMESTAMP.\\n     * @return _TIMESTAMP Value of the TIMESTAMP within the transaction context.\\n     */\\n    function ovmTIMESTAMP()\\n        override\\n        external\\n        view\\n        returns (\\n            uint256 _TIMESTAMP\\n        )\\n    {\\n        return transactionContext.ovmTIMESTAMP;\\n    }\\n\\n    /**\\n     * @notice Overrides NUMBER.\\n     * @return _NUMBER Value of the NUMBER within the transaction context.\\n     */\\n    function ovmNUMBER()\\n        override\\n        external\\n        view\\n        returns (\\n            uint256 _NUMBER\\n        )\\n    {\\n        return transactionContext.ovmNUMBER;\\n    }\\n\\n    /**\\n     * @notice Overrides GASLIMIT.\\n     * @return _GASLIMIT Value of the block\'s GASLIMIT within the transaction context.\\n     */\\n    function ovmGASLIMIT()\\n        override\\n        external\\n        view\\n        returns (\\n            uint256 _GASLIMIT\\n        )\\n    {\\n        return transactionContext.ovmGASLIMIT;\\n    }\\n\\n    /**\\n     * @notice Overrides CHAINID.\\n     * @return _CHAINID Value of the chain\'s CHAINID within the global context.\\n     */\\n    function ovmCHAINID()\\n        override\\n        external\\n        view\\n        returns (\\n            uint256 _CHAINID\\n        )\\n    {\\n        return globalContext.ovmCHAINID;\\n    }\\n\\n    /*********************************\\n     * Opcodes: L2 Execution Context *\\n     *********************************/\\n\\n    /**\\n     * @notice Specifies from which source (Sequencer or Queue) this transaction originated from.\\n     * @return _queueOrigin Enum indicating the ovmL1QUEUEORIGIN within the current message context.\\n     */\\n    function ovmL1QUEUEORIGIN()\\n        override\\n        external\\n        view\\n        returns (\\n            Lib_OVMCodec.QueueOrigin _queueOrigin\\n        )\\n    {\\n        return transactionContext.ovmL1QUEUEORIGIN;\\n    }\\n\\n    /**\\n     * @notice Specifies which L1 account, if any, sent this transaction by calling enqueue().\\n     * @return _l1TxOrigin Address of the account which sent the tx into L2 from L1.\\n     */\\n    function ovmL1TXORIGIN()\\n        override\\n        external\\n        view\\n        returns (\\n            address _l1TxOrigin\\n        )\\n    {\\n        return transactionContext.ovmL1TXORIGIN;\\n    }\\n\\n    /********************\\n     * Opcodes: Halting *\\n     ********************/\\n\\n    /**\\n     * @notice Overrides REVERT.\\n     * @param _data Bytes data to pass along with the REVERT.\\n     */\\n    function ovmREVERT(\\n        bytes memory _data\\n    )\\n        override\\n        public\\n    {\\n        _revertWithFlag(RevertFlag.INTENTIONAL_REVERT, _data);\\n    }\\n\\n\\n    /******************************\\n     * Opcodes: Contract Creation *\\n     ******************************/\\n\\n    /**\\n     * @notice Overrides CREATE.\\n     * @param _bytecode Code to be used to CREATE a new contract.\\n     * @return Address of the created contract.\\n     * @return Revert data, if and only if the creation threw an exception.\\n     */\\n    function ovmCREATE(\\n        bytes memory _bytecode\\n    )\\n        override\\n        public\\n        notStatic\\n        fixedGasDiscount(40000)\\n        returns (\\n            address,\\n            bytes memory\\n        )\\n    {\\n        // Creator is always the current ADDRESS.\\n        address creator = ovmADDRESS();\\n\\n        // Check that the deployer is whitelisted, or\\n        // that arbitrary contract deployment has been enabled.\\n        _checkDeployerAllowed(creator);\\n\\n        // Generate the correct CREATE address.\\n        address contractAddress = Lib_EthUtils.getAddressForCREATE(\\n            creator,\\n            _getAccountNonce(creator)\\n        );\\n\\n        return _createContract(\\n            contractAddress,\\n            _bytecode,\\n            MessageType.ovmCREATE\\n        );\\n    }\\n\\n    /**\\n     * @notice Overrides CREATE2.\\n     * @param _bytecode Code to be used to CREATE2 a new contract.\\n     * @param _salt Value used to determine the contract\'s address.\\n     * @return Address of the created contract.\\n     * @return Revert data, if and only if the creation threw an exception.\\n     */\\n    function ovmCREATE2(\\n        bytes memory _bytecode,\\n        bytes32 _salt\\n    )\\n        override\\n        external\\n        notStatic\\n        fixedGasDiscount(40000)\\n        returns (\\n            address,\\n            bytes memory\\n        )\\n    {\\n        // Creator is always the current ADDRESS.\\n        address creator = ovmADDRESS();\\n\\n        // Check that the deployer is whitelisted, or\\n        // that arbitrary contract deployment has been enabled.\\n        _checkDeployerAllowed(creator);\\n\\n        // Generate the correct CREATE2 address.\\n        address contractAddress = Lib_EthUtils.getAddressForCREATE2(\\n            creator,\\n            _bytecode,\\n            _salt\\n        );\\n\\n        return _createContract(\\n            contractAddress,\\n            _bytecode,\\n            MessageType.ovmCREATE2\\n        );\\n    }\\n\\n\\n    /*******************************\\n     * Account Abstraction Opcodes *\\n     ******************************/\\n\\n    /**\\n     * Retrieves the nonce of the current ovmADDRESS.\\n     * @return _nonce Nonce of the current contract.\\n     */\\n    function ovmGETNONCE()\\n        override\\n        external\\n        returns (\\n            uint256 _nonce\\n        )\\n    {\\n        return _getAccountNonce(ovmADDRESS());\\n    }\\n\\n    /**\\n     * Bumps the nonce of the current ovmADDRESS by one.\\n     */\\n    function ovmINCREMENTNONCE()\\n        override\\n        external\\n        notStatic\\n    {\\n        address account = ovmADDRESS();\\n        uint256 nonce = _getAccountNonce(account);\\n\\n        // Prevent overflow.\\n        if (nonce + 1 > nonce) {\\n            _setAccountNonce(account, nonce + 1);\\n        }\\n    }\\n\\n    /**\\n     * Creates a new EOA contract account, for account abstraction.\\n     * @dev Essentially functions like ovmCREATE or ovmCREATE2, but we can bypass a lot of checks\\n     *      because the contract we\'re creating is trusted (no need to do safety checking or to\\n     *      handle unexpected reverts). Doesn\'t need to return an address because the address is\\n     *      assumed to be the user\'s actual address.\\n     * @param _messageHash Hash of a message signed by some user, for verification.\\n     * @param _v Signature `v` parameter.\\n     * @param _r Signature `r` parameter.\\n     * @param _s Signature `s` parameter.\\n     */\\n    function ovmCREATEEOA(\\n        bytes32 _messageHash,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    )\\n        override\\n        public\\n        notStatic\\n    {\\n        // Recover the EOA address from the message hash and signature parameters. Since we do the\\n        // hashing in advance, we don\'t have handle different message hashing schemes. Even if this\\n        // function were to return the wrong address (rather than explicitly returning the zero\\n        // address), the rest of the transaction would simply fail (since there\'s no EOA account to\\n        // actually execute the transaction).\\n        address eoa = ecrecover(\\n            _messageHash,\\n            _v + 27,\\n            _r,\\n            _s\\n        );\\n\\n        // Invalid signature is a case we proactively handle with a revert. We could alternatively\\n        // have this function return a `success` boolean, but this is just easier.\\n        if (eoa == address(0)) {\\n            ovmREVERT(bytes(\\"Signature provided for EOA contract creation is invalid.\\"));\\n        }\\n\\n        // If the user already has an EOA account, then there\'s no need to perform this operation.\\n        if (_hasEmptyAccount(eoa) == false) {\\n            return;\\n        }\\n\\n        // We always need to initialize the contract with the default account values.\\n        _initPendingAccount(eoa);\\n\\n        // Temporarily set the current address so it\'s easier to access on L2.\\n        address prevADDRESS = messageContext.ovmADDRESS;\\n        messageContext.ovmADDRESS = eoa;\\n\\n        // Creates a duplicate of the OVM_ProxyEOA located at 0x42....09. Uses the following\\n        // \\"magic\\" prefix to deploy an exact copy of the code:\\n        // PUSH1 0x0D   # size of this prefix in bytes\\n        // CODESIZE\\n        // SUB          # subtract prefix size from codesize\\n        // DUP1\\n        // PUSH1 0x0D\\n        // PUSH1 0x00\\n        // CODECOPY     # copy everything after prefix into memory at pos 0\\n        // PUSH1 0x00\\n        // RETURN       # return the copied code\\n        address proxyEOA = Lib_EthUtils.createContract(abi.encodePacked(\\n            hex\\"600D380380600D6000396000f3\\",\\n            ovmEXTCODECOPY(\\n                Lib_PredeployAddresses.PROXY_EOA,\\n                0,\\n                ovmEXTCODESIZE(Lib_PredeployAddresses.PROXY_EOA)\\n            )\\n        ));\\n\\n        // Reset the address now that we\'re done deploying.\\n        messageContext.ovmADDRESS = prevADDRESS;\\n\\n        // Commit the account with its final values.\\n        _commitPendingAccount(\\n            eoa,\\n            address(proxyEOA),\\n            keccak256(Lib_EthUtils.getCode(address(proxyEOA)))\\n        );\\n\\n        _setAccountNonce(eoa, 0);\\n    }\\n\\n\\n    /*********************************\\n     * Opcodes: Contract Interaction *\\n     *********************************/\\n\\n    /**\\n     * @notice Overrides CALL.\\n     * @param _gasLimit Amount of gas to be passed into this call.\\n     * @param _address Address of the contract to call.\\n     * @param _value ETH value to pass with the call.\\n     * @param _calldata Data to send along with the call.\\n     * @return _success Whether or not the call returned (rather than reverted).\\n     * @return _returndata Data returned by the call.\\n     */\\n    function ovmCALL(\\n        uint256 _gasLimit,\\n        address _address,\\n        uint256 _value,\\n        bytes memory _calldata\\n    )\\n        override\\n        public\\n        fixedGasDiscount(100000)\\n        returns (\\n            bool _success,\\n            bytes memory _returndata\\n        )\\n    {\\n        // CALL updates the CALLER and ADDRESS.\\n        MessageContext memory nextMessageContext = messageContext;\\n        nextMessageContext.ovmCALLER = nextMessageContext.ovmADDRESS;\\n        nextMessageContext.ovmADDRESS = _address;\\n        nextMessageContext.ovmCALLVALUE = _value;\\n\\n        return _callContract(\\n            nextMessageContext,\\n            _gasLimit,\\n            _address,\\n            _calldata,\\n            MessageType.ovmCALL\\n        );\\n    }\\n\\n    /**\\n     * @notice Overrides STATICCALL.\\n     * @param _gasLimit Amount of gas to be passed into this call.\\n     * @param _address Address of the contract to call.\\n     * @param _calldata Data to send along with the call.\\n     * @return _success Whether or not the call returned (rather than reverted).\\n     * @return _returndata Data returned by the call.\\n     */\\n    function ovmSTATICCALL(\\n        uint256 _gasLimit,\\n        address _address,\\n        bytes memory _calldata\\n    )\\n        override\\n        public\\n        fixedGasDiscount(80000)\\n        returns (\\n            bool _success,\\n            bytes memory _returndata\\n        )\\n    {\\n        // STATICCALL updates the CALLER, updates the ADDRESS, and runs in a static, valueless context.\\n        MessageContext memory nextMessageContext = messageContext;\\n        nextMessageContext.ovmCALLER = nextMessageContext.ovmADDRESS;\\n        nextMessageContext.ovmADDRESS = _address;\\n        nextMessageContext.isStatic = true;\\n        nextMessageContext.ovmCALLVALUE = 0;\\n\\n        return _callContract(\\n            nextMessageContext,\\n            _gasLimit,\\n            _address,\\n            _calldata,\\n            MessageType.ovmSTATICCALL\\n        );\\n    }\\n\\n    /**\\n     * @notice Overrides DELEGATECALL.\\n     * @param _gasLimit Amount of gas to be passed into this call.\\n     * @param _address Address of the contract to call.\\n     * @param _calldata Data to send along with the call.\\n     * @return _success Whether or not the call returned (rather than reverted).\\n     * @return _returndata Data returned by the call.\\n     */\\n    function ovmDELEGATECALL(\\n        uint256 _gasLimit,\\n        address _address,\\n        bytes memory _calldata\\n    )\\n        override\\n        public\\n        fixedGasDiscount(40000)\\n        returns (\\n            bool _success,\\n            bytes memory _returndata\\n        )\\n    {\\n        // DELEGATECALL does not change anything about the message context.\\n        MessageContext memory nextMessageContext = messageContext;\\n\\n        return _callContract(\\n            nextMessageContext,\\n            _gasLimit,\\n            _address,\\n            _calldata,\\n            MessageType.ovmDELEGATECALL\\n        );\\n    }\\n\\n    /**\\n     * @notice Legacy ovmCALL function which did not support ETH value; this maintains backwards compatibility.\\n     * @param _gasLimit Amount of gas to be passed into this call.\\n     * @param _address Address of the contract to call.\\n     * @param _calldata Data to send along with the call.\\n     * @return _success Whether or not the call returned (rather than reverted).\\n     * @return _returndata Data returned by the call.\\n     */\\n    function ovmCALL(\\n        uint256 _gasLimit,\\n        address _address,\\n        bytes memory _calldata\\n    )\\n        override\\n        public\\n        returns(\\n            bool _success,\\n            bytes memory _returndata\\n        )\\n    {\\n        // Legacy ovmCALL assumed always-0 value.\\n        return ovmCALL(\\n            _gasLimit,\\n            _address,\\n            0,\\n            _calldata\\n        );\\n    }\\n\\n\\n    /************************************\\n     * Opcodes: Contract Storage Access *\\n     ************************************/\\n\\n    /**\\n     * @notice Overrides SLOAD.\\n     * @param _key 32 byte key of the storage slot to load.\\n     * @return _value 32 byte value of the requested storage slot.\\n     */\\n    function ovmSLOAD(\\n        bytes32 _key\\n    )\\n        override\\n        external\\n        netGasCost(40000)\\n        returns (\\n            bytes32 _value\\n        )\\n    {\\n        // We always SLOAD from the storage of ADDRESS.\\n        address contractAddress = ovmADDRESS();\\n\\n        return _getContractStorage(\\n            contractAddress,\\n            _key\\n        );\\n    }\\n\\n    /**\\n     * @notice Overrides SSTORE.\\n     * @param _key 32 byte key of the storage slot to set.\\n     * @param _value 32 byte value for the storage slot.\\n     */\\n    function ovmSSTORE(\\n        bytes32 _key,\\n        bytes32 _value\\n    )\\n        override\\n        external\\n        notStatic\\n        netGasCost(60000)\\n    {\\n        // We always SSTORE to the storage of ADDRESS.\\n        address contractAddress = ovmADDRESS();\\n\\n        _putContractStorage(\\n            contractAddress,\\n            _key,\\n            _value\\n        );\\n    }\\n\\n\\n    /*********************************\\n     * Opcodes: Contract Code Access *\\n     *********************************/\\n\\n    /**\\n     * @notice Overrides EXTCODECOPY.\\n     * @param _contract Address of the contract to copy code from.\\n     * @param _offset Offset in bytes from the start of contract code to copy beyond.\\n     * @param _length Total number of bytes to copy from the contract\'s code.\\n     * @return _code Bytes of code copied from the requested contract.\\n     */\\n    function ovmEXTCODECOPY(\\n        address _contract,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        override\\n        public\\n        returns (\\n            bytes memory _code\\n        )\\n    {\\n        return Lib_EthUtils.getCode(\\n            _getAccountEthAddress(_contract),\\n            _offset,\\n            _length\\n        );\\n    }\\n\\n    /**\\n     * @notice Overrides EXTCODESIZE.\\n     * @param _contract Address of the contract to query the size of.\\n     * @return _EXTCODESIZE Size of the requested contract in bytes.\\n     */\\n    function ovmEXTCODESIZE(\\n        address _contract\\n    )\\n        override\\n        public\\n        returns (\\n            uint256 _EXTCODESIZE\\n        )\\n    {\\n        return Lib_EthUtils.getCodeSize(\\n            _getAccountEthAddress(_contract)\\n        );\\n    }\\n\\n    /**\\n     * @notice Overrides EXTCODEHASH.\\n     * @param _contract Address of the contract to query the hash of.\\n     * @return _EXTCODEHASH Hash of the requested contract.\\n     */\\n    function ovmEXTCODEHASH(\\n        address _contract\\n    )\\n        override\\n        external\\n        returns (\\n            bytes32 _EXTCODEHASH\\n        )\\n    {\\n        return Lib_EthUtils.getCodeHash(\\n            _getAccountEthAddress(_contract)\\n        );\\n    }\\n\\n\\n    /***************************************\\n     * Public Functions: ETH Value Opcodes *\\n     ***************************************/\\n\\n    /**\\n     * @notice Overrides BALANCE.\\n     * NOTE: In the future, this could be optimized to directly invoke EM._getContractStorage(...).\\n     * @param _contract Address of the contract to query the OVM_ETH balance of.\\n     * @return _BALANCE OVM_ETH balance of the requested contract.\\n     */\\n    function ovmBALANCE(\\n        address _contract\\n    )\\n        override\\n        public\\n        returns (\\n            uint256 _BALANCE\\n        )\\n    {\\n        // Easiest way to get the balance is query OVM_ETH as normal.\\n        bytes memory balanceOfCalldata = abi.encodeWithSignature(\\n            \\"balanceOf(address)\\",\\n            _contract\\n        );\\n\\n        // Static call because this should be a read-only query.\\n        (bool success, bytes memory returndata) = ovmSTATICCALL(\\n            gasleft(),\\n            Lib_PredeployAddresses.OVM_ETH,\\n            balanceOfCalldata\\n        );\\n\\n        // All balanceOf queries should successfully return a uint, otherwise this must be an OOG.\\n        if (!success || returndata.length != 32) {\\n            _revertWithFlag(RevertFlag.OUT_OF_GAS);\\n        }\\n\\n        // Return the decoded balance.\\n        return abi.decode(returndata, (uint256));\\n    }\\n\\n    /**\\n     * @notice Overrides SELFBALANCE.\\n     * @return _BALANCE OVM_ETH balance of the requesting contract.\\n     */\\n    function ovmSELFBALANCE()\\n        override\\n        external\\n        returns (\\n            uint256 _BALANCE\\n        )\\n    {\\n        return ovmBALANCE(ovmADDRESS());\\n    }\\n\\n\\n    /***************************************\\n     * Public Functions: Execution Context *\\n     ***************************************/\\n\\n    function getMaxTransactionGasLimit()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _maxTransactionGasLimit\\n        )\\n    {\\n        return gasMeterConfig.maxTransactionGasLimit;\\n    }\\n\\n    /********************************************\\n     * Public Functions: Deployment Whitelisting *\\n     ********************************************/\\n\\n    /**\\n     * Checks whether the given address is on the whitelist to ovmCREATE/ovmCREATE2, and reverts if not.\\n     * @param _deployerAddress Address attempting to deploy a contract.\\n     */\\n    function _checkDeployerAllowed(\\n        address _deployerAddress\\n    )\\n        internal\\n    {\\n        // From an OVM semantics perspective, this will appear identical to\\n        // the deployer ovmCALLing the whitelist.  This is fine--in a sense, we are forcing them to.\\n        (bool success, bytes memory data) = ovmSTATICCALL(\\n            gasleft(),\\n            Lib_PredeployAddresses.DEPLOYER_WHITELIST,\\n            abi.encodeWithSelector(\\n                OVM_DeployerWhitelist.isDeployerAllowed.selector,\\n                _deployerAddress\\n            )\\n        );\\n        bool isAllowed = abi.decode(data, (bool));\\n\\n        if (!isAllowed || !success) {\\n            _revertWithFlag(RevertFlag.CREATOR_NOT_ALLOWED);\\n        }\\n    }\\n\\n    /********************************************\\n     * Internal Functions: Contract Interaction *\\n     ********************************************/\\n\\n    /**\\n     * Creates a new contract and associates it with some contract address.\\n     * @param _contractAddress Address to associate the created contract with.\\n     * @param _bytecode Bytecode to be used to create the contract.\\n     * @return Final OVM contract address.\\n     * @return Revertdata, if and only if the creation threw an exception.\\n     */\\n    function _createContract(\\n        address _contractAddress,\\n        bytes memory _bytecode,\\n        MessageType _messageType\\n    )\\n        internal\\n        returns (\\n            address,\\n            bytes memory\\n        )\\n    {\\n        // We always update the nonce of the creating account, even if the creation fails.\\n        _setAccountNonce(ovmADDRESS(), _getAccountNonce(ovmADDRESS()) + 1);\\n\\n        // We\'re stepping into a CREATE or CREATE2, so we need to update ADDRESS to point\\n        // to the contract\'s associated address and CALLER to point to the previous ADDRESS.\\n        MessageContext memory nextMessageContext = messageContext;\\n        nextMessageContext.ovmCALLER = messageContext.ovmADDRESS;\\n        nextMessageContext.ovmADDRESS = _contractAddress;\\n\\n        // Run the common logic which occurs between call-type and create-type messages,\\n        // passing in the creation bytecode and `true` to trigger create-specific logic.\\n        (bool success, bytes memory data) = _handleExternalMessage(\\n            nextMessageContext,\\n            gasleft(),\\n            _contractAddress,\\n            _bytecode,\\n            _messageType\\n        );\\n\\n        // Yellow paper requires that address returned is zero if the contract deployment fails.\\n        return (\\n            success ? _contractAddress : address(0),\\n            data\\n        );\\n    }\\n\\n    /**\\n     * Calls the deployed contract associated with a given address.\\n     * @param _nextMessageContext Message context to be used for the call.\\n     * @param _gasLimit Amount of gas to be passed into this call.\\n     * @param _contract OVM address to be called.\\n     * @param _calldata Data to send along with the call.\\n     * @return _success Whether or not the call returned (rather than reverted).\\n     * @return _returndata Data returned by the call.\\n     */\\n    function _callContract(\\n        MessageContext memory _nextMessageContext,\\n        uint256 _gasLimit,\\n        address _contract,\\n        bytes memory _calldata,\\n        MessageType _messageType\\n    )\\n        internal\\n        returns (\\n            bool _success,\\n            bytes memory _returndata\\n        )\\n    {\\n        // We reserve addresses of the form 0xdeaddeaddead...NNNN for the container contracts in L2 geth.\\n        // So, we block calls to these addresses since they are not safe to run as an OVM contract itself.\\n        if (\\n            (uint256(_contract) & uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000))\\n            == uint256(CONTAINER_CONTRACT_PREFIX)\\n        ) {\\n            // EVM does not return data in the success case, see: https://github.com/ethereum/go-ethereum/blob/aae7660410f0ef90279e14afaaf2f429fdc2a186/core/vm/instructions.go#L600-L604\\n            return (true, hex\'\');\\n        }\\n\\n        // Both 0x0000... and the EVM precompiles have the same address on L1 and L2 --\x3e no trie lookup needed.\\n        address codeContractAddress =\\n            uint(_contract) < 100\\n            ? _contract\\n            : _getAccountEthAddress(_contract);\\n\\n        return _handleExternalMessage(\\n            _nextMessageContext,\\n            _gasLimit,\\n            codeContractAddress,\\n            _calldata,\\n            _messageType\\n        );\\n    }\\n\\n    /**\\n     * Handles all interactions which involve the execution manager calling out to untrusted code (both calls and creates).\\n     * Ensures that OVM-related measures are enforced, including L2 gas refunds, nuisance gas, and flagged reversions.\\n     *\\n     * @param _nextMessageContext Message context to be used for the external message.\\n     * @param _gasLimit Amount of gas to be passed into this message. NOTE: this argument is overwritten in some cases to avoid stack-too-deep.\\n     * @param _contract OVM address being called or deployed to\\n     * @param _data Data for the message (either calldata or creation code)\\n     * @param _messageType What type of ovmOPCODE this message corresponds to.\\n     * @return Whether or not the message (either a call or deployment) succeeded.\\n     * @return Data returned by the message.\\n     */\\n    function _handleExternalMessage(\\n        MessageContext memory _nextMessageContext,\\n        // NOTE: this argument is overwritten in some cases to avoid stack-too-deep.\\n        uint256 _gasLimit,\\n        address _contract,\\n        bytes memory _data,\\n        MessageType _messageType\\n    )\\n        internal\\n        returns (\\n            bool,\\n            bytes memory\\n        )\\n    {\\n        uint256 messageValue = _nextMessageContext.ovmCALLVALUE;\\n        // If there is value in this message, we need to transfer the ETH over before switching contexts.\\n        if (\\n            messageValue > 0\\n            && _isValueType(_messageType)\\n        ) {\\n            // Handle out-of-intrinsic gas consistent with EVM behavior -- the subcall \\"appears to revert\\" if we don\'t have enough gas to transfer the ETH.\\n            // Similar to dynamic gas cost of value exceeding gas here:\\n            // https://github.com/ethereum/go-ethereum/blob/c503f98f6d5e80e079c1d8a3601d188af2a899da/core/vm/interpreter.go#L268-L273\\n            if (gasleft() < CALL_WITH_VALUE_INTRINSIC_GAS) {\\n                return (false, hex\\"\\");\\n            }\\n\\n            // If there *is* enough gas to transfer ETH, then we need to make sure this amount of gas is reserved (i.e. not\\n            // given to the _contract.call below) to guarantee that _handleExternalMessage can\'t run out of gas.\\n            // In particular, in the event that the call fails, we will need to transfer the ETH back to the sender.\\n            // Taking the lesser of _gasLimit and gasleft() - CALL_WITH_VALUE_INTRINSIC_GAS guarantees that the second\\n            // _attemptForcedEthTransfer below, if needed, always has enough gas to succeed.\\n            _gasLimit = Math.min(\\n                _gasLimit,\\n                gasleft() - CALL_WITH_VALUE_INTRINSIC_GAS // Cannot overflow due to the above check.\\n            );\\n\\n            // Now transfer the value of the call.\\n            // The target is interpreted to be the next message\'s ovmADDRESS account.\\n            bool transferredOvmEth = _attemptForcedEthTransfer(\\n                _nextMessageContext.ovmADDRESS,\\n                messageValue\\n            );\\n\\n            // If the ETH transfer fails (should only be possible in the case of insufficient balance), then treat this as a revert.\\n            // This mirrors EVM behavior, see https://github.com/ethereum/go-ethereum/blob/2dee31930c9977af2a9fcb518fb9838aa609a7cf/core/vm/evm.go#L298\\n            if (!transferredOvmEth) {\\n                return (false, hex\\"\\");\\n            }\\n        }\\n\\n        // We need to switch over to our next message context for the duration of this call.\\n        MessageContext memory prevMessageContext = messageContext;\\n        _switchMessageContext(prevMessageContext, _nextMessageContext);\\n\\n        // Nuisance gas is a system used to bound the ability for an attacker to make fraud proofs\\n        // expensive by touching a lot of different accounts or storage slots. Since most contracts\\n        // only use a few storage slots during any given transaction, this shouldn\'t be a limiting\\n        // factor.\\n        uint256 prevNuisanceGasLeft = messageRecord.nuisanceGasLeft;\\n        uint256 nuisanceGasLimit = _getNuisanceGasLimit(_gasLimit);\\n        messageRecord.nuisanceGasLeft = nuisanceGasLimit;\\n\\n        // Make the call and make sure to pass in the gas limit. Another instance of hidden\\n        // complexity. `_contract` is guaranteed to be a safe contract, meaning its return/revert\\n        // behavior can be controlled. In particular, we enforce that flags are passed through\\n        // revert data as to retrieve execution metadata that would normally be reverted out of\\n        // existence.\\n\\n        bool success;\\n        bytes memory returndata;\\n        if (_isCreateType(_messageType)) {\\n            // safeCREATE() is a function which replicates a CREATE message, but uses return values\\n            // Which match that of CALL (i.e. bool, bytes).  This allows many security checks to be\\n            // to be shared between untrusted call and create call frames.\\n            (success, returndata) = address(this).call{gas: _gasLimit}(\\n                abi.encodeWithSelector(\\n                    this.safeCREATE.selector,\\n                    _data,\\n                    _contract\\n                )\\n            );\\n        } else {\\n            (success, returndata) = _contract.call{gas: _gasLimit}(_data);\\n        }\\n\\n        // If the message threw an exception, its value should be returned back to the sender.\\n        // So, we force it back, BEFORE returning the messageContext to the previous addresses.\\n        // This operation is part of the reason we \\"reserved the intrinsic gas\\" above.\\n        if (\\n            messageValue > 0\\n            && _isValueType(_messageType)\\n            && !success\\n        ) {\\n            bool transferredOvmEth = _attemptForcedEthTransfer(\\n                prevMessageContext.ovmADDRESS,\\n                messageValue\\n            );\\n\\n            // Since we transferred it in above and the call reverted, the transfer back should always pass.\\n            // This code path should NEVER be triggered since we sent `messageValue` worth of OVM_ETH into the target\\n            // and reserved sufficient gas to execute the transfer, but in case there is some edge case which has\\n            // been missed, we revert the entire frame (and its parent) to make sure the ETH gets sent back.\\n            if (!transferredOvmEth) {\\n                _revertWithFlag(RevertFlag.OUT_OF_GAS);\\n            }\\n        }\\n\\n        // Switch back to the original message context now that we\'re out of the call and all OVM_ETH is in the right place.\\n        _switchMessageContext(_nextMessageContext, prevMessageContext);\\n\\n        // Assuming there were no reverts, the message record should be accurate here. We\'ll update\\n        // this value in the case of a revert.\\n        uint256 nuisanceGasLeft = messageRecord.nuisanceGasLeft;\\n\\n        // Reverts at this point are completely OK, but we need to make a few updates based on the\\n        // information passed through the revert.\\n        if (success == false) {\\n            (\\n                RevertFlag flag,\\n                uint256 nuisanceGasLeftPostRevert,\\n                uint256 ovmGasRefund,\\n                bytes memory returndataFromFlag\\n            ) = _decodeRevertData(returndata);\\n\\n            // INVALID_STATE_ACCESS is the only flag that triggers an immediate abort of the\\n            // parent EVM message. This behavior is necessary because INVALID_STATE_ACCESS must\\n            // halt any further transaction execution that could impact the execution result.\\n            if (flag == RevertFlag.INVALID_STATE_ACCESS) {\\n                _revertWithFlag(flag);\\n            }\\n\\n            // INTENTIONAL_REVERT, UNSAFE_BYTECODE, STATIC_VIOLATION, and CREATOR_NOT_ALLOWED aren\'t\\n            // dependent on the input state, so we can just handle them like standard reverts. Our only change here\\n            // is to record the gas refund reported by the call (enforced by safety checking).\\n            if (\\n                flag == RevertFlag.INTENTIONAL_REVERT\\n                || flag == RevertFlag.UNSAFE_BYTECODE\\n                || flag == RevertFlag.STATIC_VIOLATION\\n                || flag == RevertFlag.CREATOR_NOT_ALLOWED\\n            ) {\\n                transactionRecord.ovmGasRefund = ovmGasRefund;\\n            }\\n\\n            // INTENTIONAL_REVERT needs to pass up the user-provided return data encoded into the\\n            // flag, *not* the full encoded flag.  Additionally, we surface custom error messages\\n            // to developers in the case of unsafe creations for improved devex.\\n            // All other revert types return no data.\\n            if (\\n                flag == RevertFlag.INTENTIONAL_REVERT\\n                || flag == RevertFlag.UNSAFE_BYTECODE\\n            ) {\\n                returndata = returndataFromFlag;\\n            } else {\\n                returndata = hex\'\';\\n            }\\n\\n            // Reverts mean we need to use up whatever \\"nuisance gas\\" was used by the call.\\n            // EXCEEDS_NUISANCE_GAS explicitly reduces the remaining nuisance gas for this message\\n            // to zero. OUT_OF_GAS is a \\"pseudo\\" flag given that messages return no data when they\\n            // run out of gas, so we have to treat this like EXCEEDS_NUISANCE_GAS. All other flags\\n            // will simply pass up the remaining nuisance gas.\\n            nuisanceGasLeft = nuisanceGasLeftPostRevert;\\n        }\\n\\n        // We need to reset the nuisance gas back to its original value minus the amount used here.\\n        messageRecord.nuisanceGasLeft = prevNuisanceGasLeft - (nuisanceGasLimit - nuisanceGasLeft);\\n\\n        return (\\n            success,\\n            returndata\\n        );\\n    }\\n\\n    /**\\n     * Handles the creation-specific safety measures required for OVM contract deployment.\\n     * This function sanitizes the return types for creation messages to match calls (bool, bytes),\\n     * by being an external function which the EM can call, that mimics the success/fail case of the CREATE.\\n     * This allows for consistent handling of both types of messages in _handleExternalMessage().\\n     * Having this step occur as a separate call frame also allows us to easily revert the\\n     * contract deployment in the event that the code is unsafe.\\n     *\\n     * @param _creationCode Code to pass into CREATE for deployment.\\n     * @param _address OVM address being deployed to.\\n     */\\n    function safeCREATE(\\n        bytes memory _creationCode,\\n        address _address\\n    )\\n        external\\n    {\\n        // The only way this should callable is from within _createContract(),\\n        // and it should DEFINITELY not be callable by a non-EM code contract.\\n        if (msg.sender != address(this)) {\\n            return;\\n        }\\n        // Check that there is not already code at this address.\\n        if (_hasEmptyAccount(_address) == false) {\\n            // Note: in the EVM, this case burns all allotted gas.  For improved\\n            // developer experience, we do return the remaining gas.\\n            _revertWithFlag(\\n                RevertFlag.CREATE_COLLISION\\n            );\\n        }\\n\\n        // Check the creation bytecode against the OVM_SafetyChecker.\\n        if (ovmSafetyChecker.isBytecodeSafe(_creationCode) == false) {\\n            // Note: in the EVM, this case burns all allotted gas.  For improved\\n            // developer experience, we do return the remaining gas.\\n            _revertWithFlag(\\n                RevertFlag.UNSAFE_BYTECODE,\\n                Lib_ErrorUtils.encodeRevertString(\\"Contract creation code contains unsafe opcodes. Did you use the right compiler or pass an unsafe constructor argument?\\")\\n            );\\n        }\\n\\n        // We always need to initialize the contract with the default account values.\\n        _initPendingAccount(_address);\\n\\n        // Actually execute the EVM create message.\\n        // NOTE: The inline assembly below means we can NOT make any evm calls between here and then.\\n        address ethAddress = Lib_EthUtils.createContract(_creationCode);\\n\\n        if (ethAddress == address(0)) {\\n            // If the creation fails, the EVM lets us grab its revert data. This may contain a revert flag\\n            // to be used above in _handleExternalMessage, so we pass the revert data back up unmodified.\\n            assembly {\\n                returndatacopy(0,0,returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Again simply checking that the deployed code is safe too. Contracts can generate\\n        // arbitrary deployment code, so there\'s no easy way to analyze this beforehand.\\n        bytes memory deployedCode = Lib_EthUtils.getCode(ethAddress);\\n        if (ovmSafetyChecker.isBytecodeSafe(deployedCode) == false) {\\n            _revertWithFlag(\\n                RevertFlag.UNSAFE_BYTECODE,\\n                Lib_ErrorUtils.encodeRevertString(\\"Constructor attempted to deploy unsafe bytecode.\\")\\n            );\\n        }\\n\\n        // Contract creation didn\'t need to be reverted and the bytecode is safe. We finish up by\\n        // associating the desired address with the newly created contract\'s code hash and address.\\n        _commitPendingAccount(\\n            _address,\\n            ethAddress,\\n            Lib_EthUtils.getCodeHash(ethAddress)\\n        );\\n    }\\n\\n    /******************************************\\n     * Internal Functions: Value Manipulation *\\n     ******************************************/\\n\\n    /**\\n     * Invokes an ovmCALL to OVM_ETH.transfer on behalf of the current ovmADDRESS, allowing us to force movement of OVM_ETH in correspondence with ETH\'s native value functionality.\\n     * WARNING: this will send on behalf of whatever the messageContext.ovmADDRESS is in storage at the time of the call.\\n     * NOTE: In the future, this could be optimized to directly invoke EM._setContractStorage(...).\\n     * @param _to Amount of OVM_ETH to be sent.\\n     * @param _value Amount of OVM_ETH to send.\\n     * @return _success Whether or not the transfer worked.\\n     */\\n    function _attemptForcedEthTransfer(\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n        returns(\\n            bool _success\\n        )\\n    {\\n        bytes memory transferCalldata = abi.encodeWithSignature(\\n            \\"transfer(address,uint256)\\",\\n            _to,\\n            _value\\n        );\\n\\n        // OVM_ETH inherits from the UniswapV2ERC20 standard.  In this implementation, its return type\\n        // is a boolean.  However, the implementation always returns true if it does not revert.\\n        // Thus, success of the call frame is sufficient to infer success of the transfer itself.\\n        (bool success, ) = ovmCALL(\\n            gasleft(),\\n            Lib_PredeployAddresses.OVM_ETH,\\n            0,\\n            transferCalldata\\n        );\\n\\n        return success;\\n    }\\n\\n    /******************************************\\n     * Internal Functions: State Manipulation *\\n     ******************************************/\\n\\n    /**\\n     * Checks whether an account exists within the OVM_StateManager.\\n     * @param _address Address of the account to check.\\n     * @return _exists Whether or not the account exists.\\n     */\\n    function _hasAccount(\\n        address _address\\n    )\\n        internal\\n        returns (\\n            bool _exists\\n        )\\n    {\\n        _checkAccountLoad(_address);\\n        return ovmStateManager.hasAccount(_address);\\n    }\\n\\n    /**\\n     * Checks whether a known empty account exists within the OVM_StateManager.\\n     * @param _address Address of the account to check.\\n     * @return _exists Whether or not the account empty exists.\\n     */\\n    function _hasEmptyAccount(\\n        address _address\\n    )\\n        internal\\n        returns (\\n            bool _exists\\n        )\\n    {\\n        _checkAccountLoad(_address);\\n        return ovmStateManager.hasEmptyAccount(_address);\\n    }\\n\\n    /**\\n     * Sets the nonce of an account.\\n     * @param _address Address of the account to modify.\\n     * @param _nonce New account nonce.\\n     */\\n    function _setAccountNonce(\\n        address _address,\\n        uint256 _nonce\\n    )\\n        internal\\n    {\\n        _checkAccountChange(_address);\\n        ovmStateManager.setAccountNonce(_address, _nonce);\\n    }\\n\\n    /**\\n     * Gets the nonce of an account.\\n     * @param _address Address of the account to access.\\n     * @return _nonce Nonce of the account.\\n     */\\n    function _getAccountNonce(\\n        address _address\\n    )\\n        internal\\n        returns (\\n            uint256 _nonce\\n        )\\n    {\\n        _checkAccountLoad(_address);\\n        return ovmStateManager.getAccountNonce(_address);\\n    }\\n\\n    /**\\n     * Retrieves the Ethereum address of an account.\\n     * @param _address Address of the account to access.\\n     * @return _ethAddress Corresponding Ethereum address.\\n     */\\n    function _getAccountEthAddress(\\n        address _address\\n    )\\n        internal\\n        returns (\\n            address _ethAddress\\n        )\\n    {\\n        _checkAccountLoad(_address);\\n        return ovmStateManager.getAccountEthAddress(_address);\\n    }\\n\\n    /**\\n     * Creates the default account object for the given address.\\n     * @param _address Address of the account create.\\n     */\\n    function _initPendingAccount(\\n        address _address\\n    )\\n        internal\\n    {\\n        // Although it seems like `_checkAccountChange` would be more appropriate here, we don\'t\\n        // actually consider an account \\"changed\\" until it\'s inserted into the state (in this case\\n        // by `_commitPendingAccount`).\\n        _checkAccountLoad(_address);\\n        ovmStateManager.initPendingAccount(_address);\\n    }\\n\\n    /**\\n     * Stores additional relevant data for a new account, thereby \\"committing\\" it to the state.\\n     * This function is only called during `ovmCREATE` and `ovmCREATE2` after a successful contract\\n     * creation.\\n     * @param _address Address of the account to commit.\\n     * @param _ethAddress Address of the associated deployed contract.\\n     * @param _codeHash Hash of the code stored at the address.\\n     */\\n    function _commitPendingAccount(\\n        address _address,\\n        address _ethAddress,\\n        bytes32 _codeHash\\n    )\\n        internal\\n    {\\n        _checkAccountChange(_address);\\n        ovmStateManager.commitPendingAccount(\\n            _address,\\n            _ethAddress,\\n            _codeHash\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the value of a storage slot.\\n     * @param _contract Address of the contract to query.\\n     * @param _key 32 byte key of the storage slot.\\n     * @return _value 32 byte storage slot value.\\n     */\\n    function _getContractStorage(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        internal\\n        returns (\\n            bytes32 _value\\n        )\\n    {\\n        _checkContractStorageLoad(_contract, _key);\\n        return ovmStateManager.getContractStorage(_contract, _key);\\n    }\\n\\n    /**\\n     * Sets the value of a storage slot.\\n     * @param _contract Address of the contract to modify.\\n     * @param _key 32 byte key of the storage slot.\\n     * @param _value 32 byte storage slot value.\\n     */\\n    function _putContractStorage(\\n        address _contract,\\n        bytes32 _key,\\n        bytes32 _value\\n    )\\n        internal\\n    {\\n        // We don\'t set storage if the value didn\'t change. Although this acts as a convenient\\n        // optimization, it\'s also necessary to avoid the case in which a contract with no storage\\n        // attempts to store the value \\"0\\" at any key. Putting this value (and therefore requiring\\n        // that the value be committed into the storage trie after execution) would incorrectly\\n        // modify the storage root.\\n        if (_getContractStorage(_contract, _key) == _value) {\\n            return;\\n        }\\n\\n        _checkContractStorageChange(_contract, _key);\\n        ovmStateManager.putContractStorage(_contract, _key, _value);\\n    }\\n\\n    /**\\n     * Validation whenever a contract needs to be loaded. Checks that the account exists, charges\\n     * nuisance gas if the account hasn\'t been loaded before.\\n     * @param _address Address of the account to load.\\n     */\\n    function _checkAccountLoad(\\n        address _address\\n    )\\n        internal\\n    {\\n        // See `_checkContractStorageLoad` for more information.\\n        if (gasleft() < MIN_GAS_FOR_INVALID_STATE_ACCESS) {\\n            _revertWithFlag(RevertFlag.OUT_OF_GAS);\\n        }\\n\\n        // See `_checkContractStorageLoad` for more information.\\n        if (ovmStateManager.hasAccount(_address) == false) {\\n            _revertWithFlag(RevertFlag.INVALID_STATE_ACCESS);\\n        }\\n\\n        // Check whether the account has been loaded before and mark it as loaded if not. We need\\n        // this because \\"nuisance gas\\" only applies to the first time that an account is loaded.\\n        (\\n            bool _wasAccountAlreadyLoaded\\n        ) = ovmStateManager.testAndSetAccountLoaded(_address);\\n\\n        // If we hadn\'t already loaded the account, then we\'ll need to charge \\"nuisance gas\\" based\\n        // on the size of the contract code.\\n        if (_wasAccountAlreadyLoaded == false) {\\n            _useNuisanceGas(\\n                (Lib_EthUtils.getCodeSize(_getAccountEthAddress(_address)) * NUISANCE_GAS_PER_CONTRACT_BYTE) + MIN_NUISANCE_GAS_PER_CONTRACT\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Validation whenever a contract needs to be changed. Checks that the account exists, charges\\n     * nuisance gas if the account hasn\'t been changed before.\\n     * @param _address Address of the account to change.\\n     */\\n    function _checkAccountChange(\\n        address _address\\n    )\\n        internal\\n    {\\n        // Start by checking for a load as we only want to charge nuisance gas proportional to\\n        // contract size once.\\n        _checkAccountLoad(_address);\\n\\n        // Check whether the account has been changed before and mark it as changed if not. We need\\n        // this because \\"nuisance gas\\" only applies to the first time that an account is changed.\\n        (\\n            bool _wasAccountAlreadyChanged\\n        ) = ovmStateManager.testAndSetAccountChanged(_address);\\n\\n        // If we hadn\'t already loaded the account, then we\'ll need to charge \\"nuisance gas\\" based\\n        // on the size of the contract code.\\n        if (_wasAccountAlreadyChanged == false) {\\n            ovmStateManager.incrementTotalUncommittedAccounts();\\n            _useNuisanceGas(\\n                (Lib_EthUtils.getCodeSize(_getAccountEthAddress(_address)) * NUISANCE_GAS_PER_CONTRACT_BYTE) + MIN_NUISANCE_GAS_PER_CONTRACT\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Validation whenever a slot needs to be loaded. Checks that the account exists, charges\\n     * nuisance gas if the slot hasn\'t been loaded before.\\n     * @param _contract Address of the account to load from.\\n     * @param _key 32 byte key to load.\\n     */\\n    function _checkContractStorageLoad(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        internal\\n    {\\n        // Another case of hidden complexity. If we didn\'t enforce this requirement, then a\\n        // contract could pass in just enough gas to cause the INVALID_STATE_ACCESS check to fail\\n        // on L1 but not on L2. A contract could use this behavior to prevent the\\n        // OVM_ExecutionManager from detecting an invalid state access. Reverting with OUT_OF_GAS\\n        // allows us to also charge for the full message nuisance gas, because you deserve that for\\n        // trying to break the contract in this way.\\n        if (gasleft() < MIN_GAS_FOR_INVALID_STATE_ACCESS) {\\n            _revertWithFlag(RevertFlag.OUT_OF_GAS);\\n        }\\n\\n        // We need to make sure that the transaction isn\'t trying to access storage that hasn\'t\\n        // been provided to the OVM_StateManager. We\'ll immediately abort if this is the case.\\n        // We know that we have enough gas to do this check because of the above test.\\n        if (ovmStateManager.hasContractStorage(_contract, _key) == false) {\\n            _revertWithFlag(RevertFlag.INVALID_STATE_ACCESS);\\n        }\\n\\n        // Check whether the slot has been loaded before and mark it as loaded if not. We need\\n        // this because \\"nuisance gas\\" only applies to the first time that a slot is loaded.\\n        (\\n            bool _wasContractStorageAlreadyLoaded\\n        ) = ovmStateManager.testAndSetContractStorageLoaded(_contract, _key);\\n\\n        // If we hadn\'t already loaded the account, then we\'ll need to charge some fixed amount of\\n        // \\"nuisance gas\\".\\n        if (_wasContractStorageAlreadyLoaded == false) {\\n            _useNuisanceGas(NUISANCE_GAS_SLOAD);\\n        }\\n    }\\n\\n    /**\\n     * Validation whenever a slot needs to be changed. Checks that the account exists, charges\\n     * nuisance gas if the slot hasn\'t been changed before.\\n     * @param _contract Address of the account to change.\\n     * @param _key 32 byte key to change.\\n     */\\n    function _checkContractStorageChange(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        internal\\n    {\\n        // Start by checking for load to make sure we have the storage slot and that we charge the\\n        // \\"nuisance gas\\" necessary to prove the storage slot state.\\n        _checkContractStorageLoad(_contract, _key);\\n\\n        // Check whether the slot has been changed before and mark it as changed if not. We need\\n        // this because \\"nuisance gas\\" only applies to the first time that a slot is changed.\\n        (\\n            bool _wasContractStorageAlreadyChanged\\n        ) = ovmStateManager.testAndSetContractStorageChanged(_contract, _key);\\n\\n        // If we hadn\'t already changed the account, then we\'ll need to charge some fixed amount of\\n        // \\"nuisance gas\\".\\n        if (_wasContractStorageAlreadyChanged == false) {\\n            // Changing a storage slot means that we\'re also going to have to change the\\n            // corresponding account, so do an account change check.\\n            _checkAccountChange(_contract);\\n\\n            ovmStateManager.incrementTotalUncommittedContractStorage();\\n            _useNuisanceGas(NUISANCE_GAS_SSTORE);\\n        }\\n    }\\n\\n\\n    /************************************\\n     * Internal Functions: Revert Logic *\\n     ************************************/\\n\\n    /**\\n     * Simple encoding for revert data.\\n     * @param _flag Flag to revert with.\\n     * @param _data Additional user-provided revert data.\\n     * @return _revertdata Encoded revert data.\\n     */\\n    function _encodeRevertData(\\n        RevertFlag _flag,\\n        bytes memory _data\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes memory _revertdata\\n        )\\n    {\\n        // Out of gas and create exceptions will fundamentally return no data, so simulating it shouldn\'t either.\\n        if (\\n            _flag == RevertFlag.OUT_OF_GAS\\n        ) {\\n            return bytes(\'\');\\n        }\\n\\n        // INVALID_STATE_ACCESS doesn\'t need to return any data other than the flag.\\n        if (_flag == RevertFlag.INVALID_STATE_ACCESS) {\\n            return abi.encode(\\n                _flag,\\n                0,\\n                0,\\n                bytes(\'\')\\n            );\\n        }\\n\\n        // Just ABI encode the rest of the parameters.\\n        return abi.encode(\\n            _flag,\\n            messageRecord.nuisanceGasLeft,\\n            transactionRecord.ovmGasRefund,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * Simple decoding for revert data.\\n     * @param _revertdata Revert data to decode.\\n     * @return _flag Flag used to revert.\\n     * @return _nuisanceGasLeft Amount of nuisance gas unused by the message.\\n     * @return _ovmGasRefund Amount of gas refunded during the message.\\n     * @return _data Additional user-provided revert data.\\n     */\\n    function _decodeRevertData(\\n        bytes memory _revertdata\\n    )\\n        internal\\n        pure\\n        returns (\\n            RevertFlag _flag,\\n            uint256 _nuisanceGasLeft,\\n            uint256 _ovmGasRefund,\\n            bytes memory _data\\n        )\\n    {\\n        // A length of zero means the call ran out of gas, just return empty data.\\n        if (_revertdata.length == 0) {\\n            return (\\n                RevertFlag.OUT_OF_GAS,\\n                0,\\n                0,\\n                bytes(\'\')\\n            );\\n        }\\n\\n        // ABI decode the incoming data.\\n        return abi.decode(_revertdata, (RevertFlag, uint256, uint256, bytes));\\n    }\\n\\n    /**\\n     * Causes a message to revert or abort.\\n     * @param _flag Flag to revert with.\\n     * @param _data Additional user-provided data.\\n     */\\n    function _revertWithFlag(\\n        RevertFlag _flag,\\n        bytes memory _data\\n    )\\n        internal\\n        view\\n    {\\n        bytes memory revertdata = _encodeRevertData(\\n            _flag,\\n            _data\\n        );\\n\\n        assembly {\\n            revert(add(revertdata, 0x20), mload(revertdata))\\n        }\\n    }\\n\\n    /**\\n     * Causes a message to revert or abort.\\n     * @param _flag Flag to revert with.\\n     */\\n    function _revertWithFlag(\\n        RevertFlag _flag\\n    )\\n        internal\\n    {\\n        _revertWithFlag(_flag, bytes(\'\'));\\n    }\\n\\n\\n    /******************************************\\n     * Internal Functions: Nuisance Gas Logic *\\n     ******************************************/\\n\\n    /**\\n     * Computes the nuisance gas limit from the gas limit.\\n     * @dev This function is currently using a naive implementation whereby the nuisance gas limit\\n     *      is set to exactly equal the lesser of the gas limit or remaining gas. It\'s likely that\\n     *      this implementation is perfectly fine, but we may change this formula later.\\n     * @param _gasLimit Gas limit to compute from.\\n     * @return _nuisanceGasLimit Computed nuisance gas limit.\\n     */\\n    function _getNuisanceGasLimit(\\n        uint256 _gasLimit\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 _nuisanceGasLimit\\n        )\\n    {\\n        return _gasLimit < gasleft() ? _gasLimit : gasleft();\\n    }\\n\\n    /**\\n     * Uses a certain amount of nuisance gas.\\n     * @param _amount Amount of nuisance gas to use.\\n     */\\n    function _useNuisanceGas(\\n        uint256 _amount\\n    )\\n        internal\\n    {\\n        // Essentially the same as a standard OUT_OF_GAS, except we also retain a record of the gas\\n        // refund to be given at the end of the transaction.\\n        if (messageRecord.nuisanceGasLeft < _amount) {\\n            _revertWithFlag(RevertFlag.EXCEEDS_NUISANCE_GAS);\\n        }\\n\\n        messageRecord.nuisanceGasLeft -= _amount;\\n    }\\n\\n\\n    /************************************\\n     * Internal Functions: Gas Metering *\\n     ************************************/\\n\\n    /**\\n     * Checks whether a transaction needs to start a new epoch and does so if necessary.\\n     * @param _timestamp Transaction timestamp.\\n     */\\n    function _checkNeedsNewEpoch(\\n        uint256 _timestamp\\n    )\\n        internal\\n    {\\n        if (\\n            _timestamp >= (\\n                _getGasMetadata(GasMetadataKey.CURRENT_EPOCH_START_TIMESTAMP)\\n                + gasMeterConfig.secondsPerEpoch\\n            )\\n        ) {\\n            _putGasMetadata(\\n                GasMetadataKey.CURRENT_EPOCH_START_TIMESTAMP,\\n                _timestamp\\n            );\\n\\n            _putGasMetadata(\\n                GasMetadataKey.PREV_EPOCH_SEQUENCER_QUEUE_GAS,\\n                _getGasMetadata(\\n                    GasMetadataKey.CUMULATIVE_SEQUENCER_QUEUE_GAS\\n                )\\n            );\\n\\n            _putGasMetadata(\\n                GasMetadataKey.PREV_EPOCH_L1TOL2_QUEUE_GAS,\\n                _getGasMetadata(\\n                    GasMetadataKey.CUMULATIVE_L1TOL2_QUEUE_GAS\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Validates the input values of a transaction.\\n     * @return _valid Whether or not the transaction data is valid.\\n     */\\n    function _isValidInput(\\n        Lib_OVMCodec.Transaction memory _transaction\\n    )\\n        view\\n        internal\\n        returns (\\n            bool\\n        )\\n    {\\n        // Prevent reentrancy to run():\\n        // This check prevents calling run with the default ovmNumber.\\n        // Combined with the first check in run():\\n        //      if (transactionContext.ovmNUMBER != DEFAULT_UINT256) { return; }\\n        // It should be impossible to re-enter since run() returns before any other call frames are created.\\n        // Since this value is already being written to storage, we save much gas compared to\\n        // using the standard nonReentrant pattern.\\n        if (_transaction.blockNumber == DEFAULT_UINT256)  {\\n            return false;\\n        }\\n\\n        if (_isValidGasLimit(_transaction.gasLimit, _transaction.l1QueueOrigin) == false) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Validates the gas limit for a given transaction.\\n     * @param _gasLimit Gas limit provided by the transaction.\\n     * param _queueOrigin Queue from which the transaction originated.\\n     * @return _valid Whether or not the gas limit is valid.\\n     */\\n    function _isValidGasLimit(\\n        uint256 _gasLimit,\\n        Lib_OVMCodec.QueueOrigin // _queueOrigin\\n    )\\n        view\\n        internal\\n        returns (\\n            bool _valid\\n        )\\n    {\\n        // Always have to be below the maximum gas limit.\\n        if (_gasLimit > gasMeterConfig.maxTransactionGasLimit) {\\n            return false;\\n        }\\n\\n        // Always have to be above the minimum gas limit.\\n        if (_gasLimit < gasMeterConfig.minTransactionGasLimit) {\\n            return false;\\n        }\\n\\n        // TEMPORARY: Gas metering is disabled for minnet.\\n        return true;\\n        // GasMetadataKey cumulativeGasKey;\\n        // GasMetadataKey prevEpochGasKey;\\n        // if (_queueOrigin == Lib_OVMCodec.QueueOrigin.SEQUENCER_QUEUE) {\\n        //     cumulativeGasKey = GasMetadataKey.CUMULATIVE_SEQUENCER_QUEUE_GAS;\\n        //     prevEpochGasKey = GasMetadataKey.PREV_EPOCH_SEQUENCER_QUEUE_GAS;\\n        // } else {\\n        //     cumulativeGasKey = GasMetadataKey.CUMULATIVE_L1TOL2_QUEUE_GAS;\\n        //     prevEpochGasKey = GasMetadataKey.PREV_EPOCH_L1TOL2_QUEUE_GAS;\\n        // }\\n\\n        // return (\\n        //     (\\n        //         _getGasMetadata(cumulativeGasKey)\\n        //         - _getGasMetadata(prevEpochGasKey)\\n        //         + _gasLimit\\n        //     ) < gasMeterConfig.maxGasPerQueuePerEpoch\\n        // );\\n    }\\n\\n    /**\\n     * Updates the cumulative gas after a transaction.\\n     * @param _gasUsed Gas used by the transaction.\\n     * @param _queueOrigin Queue from which the transaction originated.\\n     */\\n    function _updateCumulativeGas(\\n        uint256 _gasUsed,\\n        Lib_OVMCodec.QueueOrigin _queueOrigin\\n    )\\n        internal\\n    {\\n        GasMetadataKey cumulativeGasKey;\\n        if (_queueOrigin == Lib_OVMCodec.QueueOrigin.SEQUENCER_QUEUE) {\\n            cumulativeGasKey = GasMetadataKey.CUMULATIVE_SEQUENCER_QUEUE_GAS;\\n        } else {\\n            cumulativeGasKey = GasMetadataKey.CUMULATIVE_L1TOL2_QUEUE_GAS;\\n        }\\n\\n        _putGasMetadata(\\n            cumulativeGasKey,\\n            (\\n                _getGasMetadata(cumulativeGasKey)\\n                + gasMeterConfig.minTransactionGasLimit\\n                + _gasUsed\\n                - transactionRecord.ovmGasRefund\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the value of a gas metadata key.\\n     * @param _key Gas metadata key to retrieve.\\n     * @return _value Value stored at the given key.\\n     */\\n    function _getGasMetadata(\\n        GasMetadataKey _key\\n    )\\n        internal\\n        returns (\\n            uint256 _value\\n        )\\n    {\\n        return uint256(_getContractStorage(\\n            GAS_METADATA_ADDRESS,\\n            bytes32(uint256(_key))\\n        ));\\n    }\\n\\n    /**\\n     * Sets the value of a gas metadata key.\\n     * @param _key Gas metadata key to set.\\n     * @param _value Value to store at the given key.\\n     */\\n    function _putGasMetadata(\\n        GasMetadataKey _key,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _putContractStorage(\\n            GAS_METADATA_ADDRESS,\\n            bytes32(uint256(_key)),\\n            bytes32(uint256(_value))\\n        );\\n    }\\n\\n\\n    /*****************************************\\n     * Internal Functions: Execution Context *\\n     *****************************************/\\n\\n    /**\\n     * Swaps over to a new message context.\\n     * @param _prevMessageContext Context we\'re switching from.\\n     * @param _nextMessageContext Context we\'re switching to.\\n     */\\n    function _switchMessageContext(\\n        MessageContext memory _prevMessageContext,\\n        MessageContext memory _nextMessageContext\\n    )\\n        internal\\n    {\\n        // These conditionals allow us to avoid unneccessary SSTOREs.  However, they do mean that the current storage\\n        // value for the messageContext MUST equal the _prevMessageContext argument, or an SSTORE might be erroneously skipped.\\n        if (_prevMessageContext.ovmCALLER != _nextMessageContext.ovmCALLER) {\\n            messageContext.ovmCALLER = _nextMessageContext.ovmCALLER;\\n        }\\n\\n        if (_prevMessageContext.ovmADDRESS != _nextMessageContext.ovmADDRESS) {\\n            messageContext.ovmADDRESS = _nextMessageContext.ovmADDRESS;\\n        }\\n\\n        if (_prevMessageContext.isStatic != _nextMessageContext.isStatic) {\\n            messageContext.isStatic = _nextMessageContext.isStatic;\\n        }\\n\\n        if (_prevMessageContext.ovmCALLVALUE != _nextMessageContext.ovmCALLVALUE) {\\n            messageContext.ovmCALLVALUE = _nextMessageContext.ovmCALLVALUE;\\n        }\\n    }\\n\\n    /**\\n     * Initializes the execution context.\\n     * @param _transaction OVM transaction being executed.\\n     */\\n    function _initContext(\\n        Lib_OVMCodec.Transaction memory _transaction\\n    )\\n        internal\\n    {\\n        transactionContext.ovmTIMESTAMP = _transaction.timestamp;\\n        transactionContext.ovmNUMBER = _transaction.blockNumber;\\n        transactionContext.ovmTXGASLIMIT = _transaction.gasLimit;\\n        transactionContext.ovmL1QUEUEORIGIN = _transaction.l1QueueOrigin;\\n        transactionContext.ovmL1TXORIGIN = _transaction.l1TxOrigin;\\n        transactionContext.ovmGASLIMIT = gasMeterConfig.maxGasPerQueuePerEpoch;\\n\\n        messageRecord.nuisanceGasLeft = _getNuisanceGasLimit(_transaction.gasLimit);\\n    }\\n\\n    /**\\n     * Resets the transaction and message context.\\n     */\\n    function _resetContext()\\n        internal\\n    {\\n        transactionContext.ovmL1TXORIGIN = DEFAULT_ADDRESS;\\n        transactionContext.ovmTIMESTAMP = DEFAULT_UINT256;\\n        transactionContext.ovmNUMBER = DEFAULT_UINT256;\\n        transactionContext.ovmGASLIMIT = DEFAULT_UINT256;\\n        transactionContext.ovmTXGASLIMIT = DEFAULT_UINT256;\\n        transactionContext.ovmL1QUEUEORIGIN = Lib_OVMCodec.QueueOrigin.SEQUENCER_QUEUE;\\n\\n        transactionRecord.ovmGasRefund = DEFAULT_UINT256;\\n\\n        messageContext.ovmCALLER = DEFAULT_ADDRESS;\\n        messageContext.ovmADDRESS = DEFAULT_ADDRESS;\\n        messageContext.isStatic = false;\\n\\n        messageRecord.nuisanceGasLeft = DEFAULT_UINT256;\\n\\n        // Reset the ovmStateManager.\\n        ovmStateManager = iOVM_StateManager(address(0));\\n    }\\n\\n\\n    /******************************************\\n     * Internal Functions: Message Typechecks *\\n     ******************************************/\\n\\n    /**\\n     * Returns whether or not the given message type is a CREATE-type.\\n     * @param _messageType the message type in question.\\n     */\\n    function _isCreateType(\\n        MessageType _messageType\\n    )\\n        internal\\n        pure\\n        returns(\\n            bool\\n        )\\n    {\\n        return (\\n            _messageType == MessageType.ovmCREATE\\n            || _messageType == MessageType.ovmCREATE2\\n        );\\n    }\\n\\n    /**\\n     * Returns whether or not the given message type (potentially) requires the transfer of ETH value along with the message.\\n     * @param _messageType the message type in question.\\n     */\\n    function _isValueType(\\n        MessageType _messageType\\n    )\\n        internal\\n        pure\\n        returns(\\n            bool\\n        )\\n    {\\n        // ovmSTATICCALL and ovmDELEGATECALL types do not accept or transfer value.\\n        return (\\n            _messageType == MessageType.ovmCALL\\n            || _messageType == MessageType.ovmCREATE\\n            || _messageType == MessageType.ovmCREATE2\\n        );\\n    }\\n\\n\\n    /*****************************\\n     * L2-only Helper Functions *\\n     *****************************/\\n\\n    /**\\n     * Unreachable helper function for simulating eth_calls with an OVM message context.\\n     * This function will throw an exception in all cases other than when used as a custom entrypoint in L2 Geth to simulate eth_call.\\n     * @param _transaction the message transaction to simulate.\\n     * @param _from the OVM account the simulated call should be from.\\n     * @param _value the amount of ETH value to send.\\n     * @param _ovmStateManager the address of the OVM_StateManager precompile in the L2 state.\\n     */\\n    function simulateMessage(\\n        Lib_OVMCodec.Transaction memory _transaction,\\n        address _from,\\n        uint256 _value,\\n        iOVM_StateManager _ovmStateManager\\n    )\\n        external\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        // Prevent this call from having any effect unless in a custom-set VM frame\\n        require(msg.sender == address(0));\\n\\n        // Initialize the EM\'s internal state, ignoring nuisance gas.\\n        ovmStateManager = _ovmStateManager;\\n        _initContext(_transaction);\\n        messageRecord.nuisanceGasLeft = uint(-1);\\n\\n        // Set the ovmADDRESS to the _from so that the subsequent call frame \\"comes from\\" them.\\n        messageContext.ovmADDRESS = _from;\\n\\n        // Execute the desired message.\\n        bool isCreate = _transaction.entrypoint == address(0);\\n        if (isCreate) {\\n            (address created, bytes memory revertData) = ovmCREATE(_transaction.data);\\n            if (created == address(0)) {\\n                return abi.encode(false, revertData);\\n            } else {\\n                // The eth_call RPC endpoint for to = undefined will return the deployed bytecode\\n                // in the success case, differing from standard create messages.\\n                return abi.encode(true, Lib_EthUtils.getCode(created));\\n            }\\n        } else {\\n            (bool success, bytes memory returndata) = ovmCALL(\\n                _transaction.gasLimit,\\n                _transaction.entrypoint,\\n                _value,\\n                _transaction.data\\n            );\\n            return abi.encode(success, returndata);\\n        }\\n    }\\n}\\n","keccak256":"0x166912c588f2871fd2825ea9288cb3d50a888d4fcafd9fe3cc4461df839acf70","license":"MIT"},"contracts/optimistic-ethereum/OVM/predeploys/OVM_DeployerWhitelist.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Interface Imports */\\nimport { iOVM_DeployerWhitelist } from \\"../../iOVM/predeploys/iOVM_DeployerWhitelist.sol\\";\\n\\n/**\\n * @title OVM_DeployerWhitelist\\n * @dev The Deployer Whitelist is a temporary predeploy used to provide additional safety during the\\n * initial phases of our mainnet roll out. It is owned by the Optimism team, and defines accounts\\n * which are allowed to deploy contracts on Layer2. The Execution Manager will only allow an\\n * ovmCREATE or ovmCREATE2 operation to proceed if the deployer\'s address whitelisted.\\n *\\n * Compiler used: optimistic-solc\\n * Runtime target: OVM\\n */\\ncontract OVM_DeployerWhitelist is iOVM_DeployerWhitelist {\\n\\n    /**********************\\n     * Contract Constants *\\n     **********************/\\n\\n    bool public initialized;\\n    bool public allowArbitraryDeployment;\\n    address override public owner;\\n    mapping (address => bool) public whitelist;\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Blocks functions to anyone except the contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner,\\n            \\"Function can only be called by the owner of this contract.\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Initializes the whitelist.\\n     * @param _owner Address of the owner for this contract.\\n     * @param _allowArbitraryDeployment Whether or not to allow arbitrary contract deployment.\\n     */\\n    function initialize(\\n        address _owner,\\n        bool _allowArbitraryDeployment\\n    )\\n        override\\n        external\\n    {\\n        if (initialized == true) {\\n            return;\\n        }\\n\\n        initialized = true;\\n        allowArbitraryDeployment = _allowArbitraryDeployment;\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * Adds or removes an address from the deployment whitelist.\\n     * @param _deployer Address to update permissions for.\\n     * @param _isWhitelisted Whether or not the address is whitelisted.\\n     */\\n    function setWhitelistedDeployer(\\n        address _deployer,\\n        bool _isWhitelisted\\n    )\\n        override\\n        external\\n        onlyOwner\\n    {\\n        whitelist[_deployer] = _isWhitelisted;\\n    }\\n\\n    /**\\n     * Updates the owner of this contract.\\n     * @param _owner Address of the new owner.\\n     */\\n    function setOwner(\\n        address _owner\\n    )\\n        override\\n        public\\n        onlyOwner\\n    {\\n        owner = _owner;\\n    }\\n\\n    /**\\n     * Updates the arbitrary deployment flag.\\n     * @param _allowArbitraryDeployment Whether or not to allow arbitrary contract deployment.\\n     */\\n    function setAllowArbitraryDeployment(\\n        bool _allowArbitraryDeployment\\n    )\\n        override\\n        public\\n        onlyOwner\\n    {\\n        allowArbitraryDeployment = _allowArbitraryDeployment;\\n    }\\n\\n    /**\\n     * Permanently enables arbitrary contract deployment and deletes the owner.\\n     */\\n    function enableArbitraryContractDeployment()\\n        override\\n        external\\n        onlyOwner\\n    {\\n        setAllowArbitraryDeployment(true);\\n        setOwner(address(0));\\n    }\\n\\n    /**\\n     * Checks whether an address is allowed to deploy contracts.\\n     * @param _deployer Address to check.\\n     * @return _allowed Whether or not the address can deploy contracts.\\n     */\\n    function isDeployerAllowed(\\n        address _deployer\\n    )\\n        override\\n        external\\n        returns (\\n            bool\\n        )\\n    {\\n        return (\\n            initialized == false\\n            || allowArbitraryDeployment == true\\n            || whitelist[_deployer]\\n        );\\n    }\\n}\\n","keccak256":"0xb96bfb8eb24503b05de41483cc9fb7a7f81107aa1ca146dc281952f8100848a0","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_ExecutionManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\ninterface iOVM_ExecutionManager {\\n    /**********\\n     * Enums *\\n     *********/\\n\\n    enum RevertFlag {\\n        OUT_OF_GAS,\\n        INTENTIONAL_REVERT,\\n        EXCEEDS_NUISANCE_GAS,\\n        INVALID_STATE_ACCESS,\\n        UNSAFE_BYTECODE,\\n        CREATE_COLLISION,\\n        STATIC_VIOLATION,\\n        CREATOR_NOT_ALLOWED\\n    }\\n\\n    enum GasMetadataKey {\\n        CURRENT_EPOCH_START_TIMESTAMP,\\n        CUMULATIVE_SEQUENCER_QUEUE_GAS,\\n        CUMULATIVE_L1TOL2_QUEUE_GAS,\\n        PREV_EPOCH_SEQUENCER_QUEUE_GAS,\\n        PREV_EPOCH_L1TOL2_QUEUE_GAS\\n    }\\n\\n    enum MessageType {\\n        ovmCALL,\\n        ovmSTATICCALL,\\n        ovmDELEGATECALL,\\n        ovmCREATE,\\n        ovmCREATE2\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct GasMeterConfig {\\n        uint256 minTransactionGasLimit;\\n        uint256 maxTransactionGasLimit;\\n        uint256 maxGasPerQueuePerEpoch;\\n        uint256 secondsPerEpoch;\\n    }\\n\\n    struct GlobalContext {\\n        uint256 ovmCHAINID;\\n    }\\n\\n    struct TransactionContext {\\n        Lib_OVMCodec.QueueOrigin ovmL1QUEUEORIGIN;\\n        uint256 ovmTIMESTAMP;\\n        uint256 ovmNUMBER;\\n        uint256 ovmGASLIMIT;\\n        uint256 ovmTXGASLIMIT;\\n        address ovmL1TXORIGIN;\\n    }\\n\\n    struct TransactionRecord {\\n        uint256 ovmGasRefund;\\n    }\\n\\n    struct MessageContext {\\n        address ovmCALLER;\\n        address ovmADDRESS;\\n        uint256 ovmCALLVALUE;\\n        bool isStatic;\\n    }\\n\\n    struct MessageRecord {\\n        uint256 nuisanceGasLeft;\\n    }\\n\\n\\n    /************************************\\n     * Transaction Execution Entrypoint *\\n     ************************************/\\n\\n    function run(\\n        Lib_OVMCodec.Transaction calldata _transaction,\\n        address _txStateManager\\n    ) external returns (bytes memory);\\n\\n\\n    /*******************\\n     * Context Opcodes *\\n     *******************/\\n\\n    function ovmCALLER() external view returns (address _caller);\\n    function ovmADDRESS() external view returns (address _address);\\n    function ovmCALLVALUE() external view returns (uint _callValue);\\n    function ovmTIMESTAMP() external view returns (uint256 _timestamp);\\n    function ovmNUMBER() external view returns (uint256 _number);\\n    function ovmGASLIMIT() external view returns (uint256 _gasLimit);\\n    function ovmCHAINID() external view returns (uint256 _chainId);\\n\\n\\n    /**********************\\n     * L2 Context Opcodes *\\n     **********************/\\n\\n    function ovmL1QUEUEORIGIN() external view returns (Lib_OVMCodec.QueueOrigin _queueOrigin);\\n    function ovmL1TXORIGIN() external view returns (address _l1TxOrigin);\\n\\n\\n    /*******************\\n     * Halting Opcodes *\\n     *******************/\\n\\n    function ovmREVERT(bytes memory _data) external;\\n\\n\\n    /*****************************\\n     * Contract Creation Opcodes *\\n     *****************************/\\n\\n    function ovmCREATE(bytes memory _bytecode) external returns (address _contract, bytes memory _revertdata);\\n    function ovmCREATE2(bytes memory _bytecode, bytes32 _salt) external returns (address _contract, bytes memory _revertdata);\\n\\n\\n    /*******************************\\n     * Account Abstraction Opcodes *\\n     ******************************/\\n\\n    function ovmGETNONCE() external returns (uint256 _nonce);\\n    function ovmINCREMENTNONCE() external;\\n    function ovmCREATEEOA(bytes32 _messageHash, uint8 _v, bytes32 _r, bytes32 _s) external;\\n\\n\\n    /****************************\\n     * Contract Calling Opcodes *\\n     ****************************/\\n\\n    // Valueless ovmCALL for maintaining backwards compatibility with legacy OVM bytecode.\\n    function ovmCALL(uint256 _gasLimit, address _address, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n    function ovmCALL(uint256 _gasLimit, address _address, uint256 _value, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n    function ovmSTATICCALL(uint256 _gasLimit, address _address, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n    function ovmDELEGATECALL(uint256 _gasLimit, address _address, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n\\n\\n    /****************************\\n     * Contract Storage Opcodes *\\n     ****************************/\\n\\n    function ovmSLOAD(bytes32 _key) external returns (bytes32 _value);\\n    function ovmSSTORE(bytes32 _key, bytes32 _value) external;\\n\\n\\n    /*************************\\n     * Contract Code Opcodes *\\n     *************************/\\n\\n    function ovmEXTCODECOPY(address _contract, uint256 _offset, uint256 _length) external returns (bytes memory _code);\\n    function ovmEXTCODESIZE(address _contract) external returns (uint256 _size);\\n    function ovmEXTCODEHASH(address _contract) external returns (bytes32 _hash);\\n\\n\\n    /*********************\\n     * ETH Value Opcodes *\\n     *********************/\\n\\n    function ovmBALANCE(address _contract) external returns (uint256 _balance);\\n    function ovmSELFBALANCE() external returns (uint256 _balance);\\n\\n\\n    /***************************************\\n     * Public Functions: Execution Context *\\n     ***************************************/\\n\\n    function getMaxTransactionGasLimit() external view returns (uint _maxTransactionGasLimit);\\n}\\n","keccak256":"0x87a056425696719488dbd06adbbf89280d86651e75e1f77d9e96b0632c8634cc","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_SafetyChecker.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_SafetyChecker\\n */\\ninterface iOVM_SafetyChecker {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function isBytecodeSafe(bytes calldata _bytecode) external pure returns (bool);\\n}\\n","keccak256":"0xde6639676d4ec4f77297652d5ede2429bc93e74e11fefd9e9de4bc92dd784878","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_StateManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateManager\\n */\\ninterface iOVM_StateManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum ItemState {\\n        ITEM_UNTOUCHED,\\n        ITEM_LOADED,\\n        ITEM_CHANGED,\\n        ITEM_COMMITTED\\n    }\\n\\n    /***************************\\n     * Public Functions: Misc *\\n     ***************************/\\n\\n    function isAuthenticated(address _address) external view returns (bool);\\n\\n    /***************************\\n     * Public Functions: Setup *\\n     ***************************/\\n\\n    function owner() external view returns (address _owner);\\n    function ovmExecutionManager() external view returns (address _ovmExecutionManager);\\n    function setExecutionManager(address _ovmExecutionManager) external;\\n\\n\\n    /************************************\\n     * Public Functions: Account Access *\\n     ************************************/\\n\\n    function putAccount(address _address, Lib_OVMCodec.Account memory _account) external;\\n    function putEmptyAccount(address _address) external;\\n    function getAccount(address _address) external view returns (Lib_OVMCodec.Account memory _account);\\n    function hasAccount(address _address) external view returns (bool _exists);\\n    function hasEmptyAccount(address _address) external view returns (bool _exists);\\n    function setAccountNonce(address _address, uint256 _nonce) external;\\n    function getAccountNonce(address _address) external view returns (uint256 _nonce);\\n    function getAccountEthAddress(address _address) external view returns (address _ethAddress);\\n    function getAccountStorageRoot(address _address) external view returns (bytes32 _storageRoot);\\n    function initPendingAccount(address _address) external;\\n    function commitPendingAccount(address _address, address _ethAddress, bytes32 _codeHash) external;\\n    function testAndSetAccountLoaded(address _address) external returns (bool _wasAccountAlreadyLoaded);\\n    function testAndSetAccountChanged(address _address) external returns (bool _wasAccountAlreadyChanged);\\n    function commitAccount(address _address) external returns (bool _wasAccountCommitted);\\n    function incrementTotalUncommittedAccounts() external;\\n    function getTotalUncommittedAccounts() external view returns (uint256 _total);\\n    function wasAccountChanged(address _address) external view returns (bool);\\n    function wasAccountCommitted(address _address) external view returns (bool);\\n\\n\\n    /************************************\\n     * Public Functions: Storage Access *\\n     ************************************/\\n\\n    function putContractStorage(address _contract, bytes32 _key, bytes32 _value) external;\\n    function getContractStorage(address _contract, bytes32 _key) external view returns (bytes32 _value);\\n    function hasContractStorage(address _contract, bytes32 _key) external view returns (bool _exists);\\n    function testAndSetContractStorageLoaded(address _contract, bytes32 _key) external returns (bool _wasContractStorageAlreadyLoaded);\\n    function testAndSetContractStorageChanged(address _contract, bytes32 _key) external returns (bool _wasContractStorageAlreadyChanged);\\n    function commitContractStorage(address _contract, bytes32 _key) external returns (bool _wasContractStorageCommitted);\\n    function incrementTotalUncommittedContractStorage() external;\\n    function getTotalUncommittedContractStorage() external view returns (uint256 _total);\\n    function wasContractStorageChanged(address _contract, bytes32 _key) external view returns (bool);\\n    function wasContractStorageCommitted(address _contract, bytes32 _key) external view returns (bool);\\n}\\n","keccak256":"0x7a11dbd1f61593ba34debe07e39eef59967307f7f372ba9855bee0953585d08d","license":"MIT"},"contracts/optimistic-ethereum/iOVM/predeploys/iOVM_DeployerWhitelist.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_DeployerWhitelist\\n */\\ninterface iOVM_DeployerWhitelist {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function initialize(address _owner, bool _allowArbitraryDeployment) external;\\n    function owner() external returns (address _owner);\\n    function setWhitelistedDeployer(address _deployer, bool _isWhitelisted) external;\\n    function setOwner(address _newOwner) external;\\n    function setAllowArbitraryDeployment(bool _allowArbitraryDeployment) external;\\n    function enableArbitraryContractDeployment() external;\\n    function isDeployerAllowed(address _deployer) external returns (bool _allowed);\\n}\\n","keccak256":"0xdf1f27faf0d26d416bf6d408d146a16de32b4e1772a292c65d39eb7ec2b53ceb","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/constants/Lib_PredeployAddresses.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_PredeployAddresses\\n */\\nlibrary Lib_PredeployAddresses {\\n    address internal constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;\\n    address internal constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;\\n    address internal constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;\\n    address internal constant ECDSA_CONTRACT_ACCOUNT = 0x4200000000000000000000000000000000000003;\\n    address internal constant SEQUENCER_ENTRYPOINT = 0x4200000000000000000000000000000000000005;\\n    address payable internal constant OVM_ETH = 0x4200000000000000000000000000000000000006;\\n    address internal constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;\\n    address internal constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;\\n    address internal constant PROXY_EOA = 0x4200000000000000000000000000000000000009;\\n    address internal constant EXECUTION_MANAGER_WRAPPER = 0x420000000000000000000000000000000000000B;\\n    address internal constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;\\n    address internal constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    address internal constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;\\n}\\n","keccak256":"0x798dd3fe47c172880978c8e4d35573b25d5135be29a77584e9fac45845748695","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_ErrorUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_ErrorUtils\\n */\\nlibrary Lib_ErrorUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes an error string into raw solidity-style revert data.\\n     * (i.e. ascii bytes, prefixed with bytes4(keccak(\\"Error(string))\\"))\\n     * Ref: https://docs.soliditylang.org/en/v0.8.2/control-structures.html?highlight=Error(string)#panic-via-assert-and-error-via-require\\n     * @param _reason Reason for the reversion.\\n     * @return Standard solidity revert data for the given reason.\\n     */\\n    function encodeRevertString(\\n        string memory _reason\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodeWithSignature(\\n            \\"Error(string)\\",\\n            _reason\\n        );\\n    }\\n}\\n","keccak256":"0xfc64ec4a81fb50865b502a0004ed154e8598e1a313db77303fc95e41f536e6b7","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_EthUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_Bytes32Utils } from \\"./Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_EthUtils\\n */\\nlibrary Lib_EthUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Gets the code for a given address.\\n     * @param _address Address to get code for.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Code read from the contract.\\n     */\\n    function getCode(\\n        address _address,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory code;\\n        assembly {\\n            code := mload(0x40)\\n            mstore(0x40, add(code, add(_length, 0x20)))\\n            mstore(code, _length)\\n            extcodecopy(_address, add(code, 0x20), _offset, _length)\\n        }\\n\\n        return code;\\n    }\\n\\n    /**\\n     * Gets the full code for a given address.\\n     * @param _address Address to get code for.\\n     * @return Full code of the contract.\\n     */\\n    function getCode(\\n        address _address\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return getCode(\\n            _address,\\n            0,\\n            getCodeSize(_address)\\n        );\\n    }\\n\\n    /**\\n     * Gets the size of a contract\'s code in bytes.\\n     * @param _address Address to get code size for.\\n     * @return Size of the contract\'s code in bytes.\\n     */\\n    function getCodeSize(\\n        address _address\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256\\n        )\\n    {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(_address)\\n        }\\n\\n        return codeSize;\\n    }\\n\\n    /**\\n     * Gets the hash of a contract\'s code.\\n     * @param _address Address to get a code hash for.\\n     * @return Hash of the contract\'s code.\\n     */\\n    function getCodeHash(\\n        address _address\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_address)\\n        }\\n\\n        return codeHash;\\n    }\\n\\n    /**\\n     * Creates a contract with some given initialization code.\\n     * @param _code Contract initialization code.\\n     * @return Address of the created contract.\\n     */\\n    function createContract(\\n        bytes memory _code\\n    )\\n        internal\\n        returns (\\n            address\\n        )\\n    {\\n        address created;\\n        assembly {\\n            created := create(\\n                0,\\n                add(_code, 0x20),\\n                mload(_code)\\n            )\\n        }\\n\\n        return created;\\n    }\\n\\n    /**\\n     * Computes the address that would be generated by CREATE.\\n     * @param _creator Address creating the contract.\\n     * @param _nonce Creator\'s nonce.\\n     * @return Address to be generated by CREATE.\\n     */\\n    function getAddressForCREATE(\\n        address _creator,\\n        uint256 _nonce\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        bytes[] memory encoded = new bytes[](2);\\n        encoded[0] = Lib_RLPWriter.writeAddress(_creator);\\n        encoded[1] = Lib_RLPWriter.writeUint(_nonce);\\n\\n        bytes memory encodedList = Lib_RLPWriter.writeList(encoded);\\n        return Lib_Bytes32Utils.toAddress(keccak256(encodedList));\\n    }\\n\\n    /**\\n     * Computes the address that would be generated by CREATE2.\\n     * @param _creator Address creating the contract.\\n     * @param _bytecode Bytecode of the contract to be created.\\n     * @param _salt 32 byte salt value mixed into the hash.\\n     * @return Address to be generated by CREATE2.\\n     */\\n    function getAddressForCREATE2(\\n        address _creator,\\n        bytes memory _bytecode,\\n        bytes32 _salt\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        bytes32 hashedData = keccak256(abi.encodePacked(\\n            byte(0xff),\\n            _creator,\\n            _salt,\\n            keccak256(_bytecode)\\n        ));\\n\\n        return Lib_Bytes32Utils.toAddress(hashedData);\\n    }\\n}\\n","keccak256":"0xf29a67d78e61cb472d524b779b32cfcb39a587f4096500d5419e6425ed367d49","license":"MIT"}},"version":1}',bytecode:"0x60806040523480156200001157600080fd5b50604051620034a0380380620034a0833981016040819052620000349162000297565b600080546001600160a01b0319166001600160a01b03851617905560408051808201909152601181527027ab26afa9b0b332ba3ca1b432b1b5b2b960791b60208201526200008290620000d7565b600180546001600160a01b0319166001600160a01b039290921691909117905581516003556020820151600455604082015160055560608201516006558051600755620000ce620001b9565b5050506200033c565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b83811015620001395781810151838201526020016200011f565b50505050905090810190601f168015620001675780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156200018557600080fd5b505afa1580156200019a573d6000803e3d6000fd5b505050506040513d6020811015620001b157600080fd5b505192915050565b600d805473defa017defa017defa017defa017defa017defa06001600160a01b031991821681179092557fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d6009819055600a819055600b819055600c8190556008805460ff199081169091556012829055600e8054841685179055600f8054841690941790935560118054909316909255601391909155600280549091169055565b6000602082840312156200026d578081fd5b604051602081016001600160401b03811182821017156200028a57fe5b6040529151825250919050565b600080600083850360c0811215620002ad578384fd5b84516001600160a01b0381168114620002c4578485fd5b93506080601f1982011215620002d8578283fd5b50604051608081016001600160401b0381118282101715620002f657fe5b80604052506020850151815260408501516020820152606085015160408201526080850151606082015280925050620003338560a086016200025b565b90509250925092565b613154806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063741a33eb1161011a578063996d79a5116100ad578063a8c4c5ec1161007c578063a8c4c5ec146103eb578063bdbf8c36146103f3578063c1fb2ea2146103fb578063f573102114610403578063ffe7391414610416576101fb565b8063996d79a5146103b557806399ccd98b146103bd5780639be3ad67146103d05780639dc9dc93146103e3576101fb565b80638435035b116100e95780638435035b146103745780638540661f1461038757806385979f761461039a57806390580256146103ad576101fb565b8063741a33eb14610326578063746c32f11461033957806376427cac146103595780637cebbe941461036c576101fb565b806322bd64c011610192578063461a447811610161578063461a4478146102e25780635a98c361146102f55780635b99d1c5146102fd578063735090641461031e576101fb565b806322bd64c01461029257806324749d5c146102a7578063299ca478146102ba5780632a2a7adb146102cf576101fb565b806314aa2ff7116101ce57806314aa2ff7146102595780631c4712a71461027a5780631f64338b1461028257806320160f3a1461028a576101fb565b806303daa9591461020057806308bf7dbf146102295780630a5635ae14610231578063101185a414610244575b600080fd5b61021361020e366004612924565b610429565b6040516102209190612dbe565b60405180910390f35b61021361046e565b61021361023f366004612898565b610480565b61024c610516565b6040516102209190612ed3565b61026c6102673660046129b6565b61051f565b604051610220929190612e39565b6102136105b1565b6102136105b7565b6102136105be565b6102a56102a0366004612954565b6105c4565b005b6102136102b5366004612898565b61061f565b6102c2610638565b6040516102209190612dc7565b6102a56102dd3660046129b6565b610647565b6102c26102f0366004612b16565b610655565b610213610731565b61031061030b366004612c4d565b610737565b604051610220929190612e5d565b6102c26107bd565b6102a5610334366004612975565b6107cc565b61034c6103473660046128d0565b610931565b6040516102209190612e96565b61034c610367366004612b8e565b61094e565b6102a5610a50565b610213610382366004612898565b610a9f565b610310610395366004612bf7565b610ab2565b6103106103a8366004612bf7565b610b39565b610213610b56565b6102c2610b5c565b61026c6103cb366004612a37565b610b6b565b61034c6103de366004612b5b565b610bf8565b6102c2610d5a565b610213610d69565b610213610d6f565b610213610d75565b6102a56104113660046129e8565b610d87565b610310610424366004612bf7565b610f50565b6000619c4060005a9050600061043d610b5c565b90506104498186610fa5565b93505060005a820390508083101561046657601280548483030190555b505050919050565b600061047b61023f610b5c565b905090565b600080826040516024016104949190612dc7565b60408051601f198184030181529190526020810180516001600160e01b03166370a0823160e01b17905290506000806104d55a6006602160991b0185610ab2565b915091508115806104e857508051602014155b156104f7576104f76000611033565b8080602001905181019061050b919061293c565b93505050505b919050565b60085460ff1690565b60115460009060609060ff1615156001141561053f5761053f6006611033565b619c4060005a90506000610551610b5c565b905061055c8161104c565b60006105708261056b846110e1565b61116c565b905061057e81886003611206565b95509550505060005a82039050808310156105a05760128054840190556105a9565b60128054820190555b505050915091565b60045490565b62015f9081565b600b5490565b60115460ff161515600114156105de576105de6006611033565b61ea6060005a905060006105f0610b5c565b90506105fd818686611290565b5060005a820390508083101561061857601280548483030190555b5050505050565b600061063261062d83611317565b6113a2565b92915050565b6000546001600160a01b031681565b6106526001826113a6565b50565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b838110156106b557818101518382015260200161069d565b50505050905090810190601f1680156106e25780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d602081101561072957600080fd5b505192915050565b600a5490565b60006060620186a060005a60408051608081018252600f5460115460ff16151560608301526001600160a01b0390811682528a166020820152908101889052909150610787818a8a8960006113bc565b945094505060005a82039050808310156107a85760128054840190556107b1565b60128054820190555b50505094509492505050565b600e546001600160a01b031690565b60115460ff161515600114156107e6576107e66006611033565b600060018585601b0185856040516000815260200160405260405161080e9493929190612e78565b6020604051602081039080840390855afa158015610830573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661086c5761086c60405180606001604052806038815260200161304160389139610647565b6108758161144d565b61087f575061092b565b610888816114d8565b600f80546001600160a01b038381166001600160a01b03198316179092551660006108e56108c16009602160991b018361034782610a9f565b6040516020016108d19190612d88565b60405160208183030381529060405261153f565b600f80546001600160a01b0319166001600160a01b038516179055905061091c838261091081611552565b80519060200120611568565b6109278360006115a5565b5050505b50505050565b606061094661093f85611317565b8484611616565b949350505050565b6060331561095b57600080fd5b600280546001600160a01b0319166001600160a01b03841617905561097f8561163a565b600019601355600f80546001600160a01b0319166001600160a01b0386811691909117909155608086015116158015610a1e576000806109c28860c0015161051f565b90925090506001600160a01b038216610a02576000816040516020016109e9929190612e5d565b6040516020818303038152906040529350505050610946565b6001610a0d83611552565b6040516020016109e9929190612e5d565b600080610a398860a001518960800151888b60c00151610737565b9150915081816040516020016109e9929190612e5d565b60115460ff16151560011415610a6a57610a6a6006611033565b6000610a74610b5c565b90506000610a81826110e1565b905080816001011115610a9b57610a9b82826001016115a5565b5050565b6000610632610aad83611317565b6116ac565b600060606201388060005a60408051608081018252600f546001600160a01b03908116825289166020820152600160608201819052600092820192909252919250610b049082908a908a908a906113bc565b945094505060005a8203905080831015610b25576012805484019055610b2e565b60128054820190555b505050935093915050565b60006060610b4a8585600086610737565b91509150935093915050565b60075490565b600f546001600160a01b031690565b60115460009060609060ff16151560011415610b8b57610b8b6006611033565b619c4060005a90506000610b9d610b5c565b9050610ba88161104c565b6000610bb58289896116b0565b9050610bc381896004611206565b95509550505060005a8203905080831015610be5576012805484019055610bee565b60128054820190555b5050509250929050565b600a546060907fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d14610c395750604080516020810190915260008152610632565b600280546001600160a01b0319166001600160a01b038481169190911791829055604051630d15d41560e41b815291169063d15d415090610c7e903390600401612dc7565b60206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190612904565b610cf35760405162461bcd60e51b8152600401610cea90612f4f565b60405180910390fd5b610cfc8361163a565b610d05836116f6565b610d2657610d11611752565b50604080516020810190915260008152610632565b6000610d486003600001548560a0015103856080015160008760c00151610737565b915050610d53611752565b9392505050565b600d546001600160a01b031690565b60105490565b60095490565b600061047b610d82610b5c565b6110e1565b333014610d9357610a9b565b610d9c8161144d565b610daa57610daa6005611033565b6001546040516352275acd60e11b81526001600160a01b039091169063a44eb59a90610dda908590600401612e96565b60206040518083038186803b158015610df257600080fd5b505afa158015610e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2a9190612904565b610e5957610e596004610e546040518060a0016040528060768152602001613079607691396117f4565b6113a6565b610e62816114d8565b6000610e6d8361153f565b90506001600160a01b038116610e87573d6000803e3d6000fd5b6000610e9282611552565b6001546040516352275acd60e11b81529192506001600160a01b03169063a44eb59a90610ec3908490600401612e96565b60206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f139190612904565b610f3d57610f3d6004610e546040518060600160405280603081526020016130ef603091396117f4565b61092b8383610f4b856113a2565b611568565b60006060619c4060005a60408051608081018252600e546001600160a01b039081168252600f541660208201526010549181019190915260115460ff1615156060820152909150610b048189898960026113bc565b6000610fb18383611837565b600254604051631aaf392f60e01b81526001600160a01b0390911690631aaf392f90610fe39086908690600401612dff565b60206040518083038186803b158015610ffb57600080fd5b505afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d53919061293c565b61065281604051806020016040528060008152506113a6565b6000806110ab5a6002602160991b0163b1540a0160e01b866040516024016110749190612dc7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ab2565b915091506000818060200190518101906110c59190612904565b90508015806110d2575082155b1561092b5761092b6007611033565b60006110ec82611972565b60025460405163d126199f60e01b81526001600160a01b039091169063d126199f9061111c908590600401612dc7565b60206040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610632919061293c565b60408051600280825260608201909252600091829190816020015b60608152602001906001900390816111875790505090506111a784611ab9565b816000815181106111b457fe5b60200260200101819052506111c883611ae3565b816001815181106111d557fe5b602002602001018190525060006111eb82611af6565b90506111fd8180519060200120611b3a565b95945050505050565b60006060611228611215610b5c565b611220610d82610b5c565b6001016115a5565b60408051608081018252600f546010549282019290925260115460ff16151560608201526001600160a01b0391821681529086166020820152600080611271835a8a8a8a611b3d565b9150915081611281576000611283565b875b9890975095505050505050565b8061129b8484610fa5565b14156112a657611312565b6112b08383611e9a565b600254604051635c17d62960e01b81526001600160a01b0390911690635c17d629906112e490869086908690600401612e18565b600060405180830381600087803b1580156112fe57600080fd5b505af1158015610927573d6000803e3d6000fd5b505050565b600061132282611972565b600254604051637c8ee70360e01b81526001600160a01b0390911690637c8ee70390611352908590600401612dc7565b60206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063291906128b4565b3f90565b60006113b28383611fac565b9050805160208201fd5b6000606073ffffffffffffffffffffffffffffffffffff0000851673deaddeaddeaddeaddeaddeaddeaddeaddead0000141561140b575050604080516020810190915260008152600190611443565b60006064866001600160a01b03161061142c5761142786611317565b61142e565b855b905061143d8888838888611b3d565b92509250505b9550959350505050565b600061145882611972565b6002546040516307a1294560e01b81526001600160a01b03909116906307a1294590611488908590600401612dc7565b60206040518083038186803b1580156114a057600080fd5b505afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190612904565b6114e181611972565b600254604051637e78a4d160e11b81526001600160a01b039091169063fcf149a290611511908490600401612dc7565b600060405180830381600087803b15801561152b57600080fd5b505af1158015610618573d6000803e3d6000fd5b6000808251602084016000f09392505050565b6060610632826000611563856116ac565b611616565b61157183612055565b6002546040516368510af960e11b81526001600160a01b039091169063d0a215f2906112e490869086908690600401612ddb565b6115ae82612055565b6002546040516374855dc360e11b81526001600160a01b039091169063e90abb86906115e09085908590600401612dff565b600060405180830381600087803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b505050505050565b6060806040519050602083018101604052828152828460208301873c949350505050565b80516009556020810151600a5560a0810151600c5560408101516008805460ff19166001838181111561166957fe5b02179055506060810151600d80546001600160a01b0319166001600160a01b03909216919091179055600554600b5560a08101516116a690612164565b60135550565b3b90565b60008060ff60f81b858486805190602001206040516020016116d59493929190612d04565b6040516020818303038152906040528051906020012090506111fd81611b3a565b60007fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d8260200151141561172c57506000610511565b61173e8260a001518360400151612177565b61174a57506000610511565b506001919050565b600d805473defa017defa017defa017defa017defa017defa06001600160a01b031991821681179092557fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d6009819055600a819055600b819055600c8190556008805460ff199081169091556012829055600e8054841685179055600f8054841690941790935560118054909316909255601391909155600280549091169055565b6060816040516024016118079190612e96565b60408051601f198184030181529190526020810180516001600160e01b031662461bcd60e51b1790529050919050565b6175305a101561184b5761184b6000611033565b600254604051630ad2267960e01b81526001600160a01b0390911690630ad226799061187d9085908590600401612dff565b60206040518083038186803b15801561189557600080fd5b505afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612904565b6118db576118db6003611033565b600254604051632bcdee1960e21b81526000916001600160a01b03169063af37b8649061190e9086908690600401612dff565b602060405180830381600087803b15801561192857600080fd5b505af115801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190612904565b90508061131257611312614e206121a7565b6175305a1015611986576119866000611033565b60025460405163c8e40fbf60e01b81526001600160a01b039091169063c8e40fbf906119b6908490600401612dc7565b60206040518083038186803b1580156119ce57600080fd5b505afa1580156119e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a069190612904565b611a1457611a146003611033565b600254604051633ecdecc760e21b81526000916001600160a01b03169063fb37b31c90611a45908590600401612dc7565b602060405180830381600087803b158015611a5f57600080fd5b505af1158015611a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a979190612904565b905080610a9b57610a9b6175306064611ab2610aad86611317565b02016121a7565b606061063282604051602001611acf9190612ce7565b6040516020818303038152906040526121c7565b6060610632611af183612219565b6121c7565b60606000611b038361231d565b9050611b11815160c061241d565b81604051602001611b23929190612d59565b604051602081830303815290604052915050919050565b90565b60408501516000906060908015801590611b5b5750611b5b8461256d565b15611bcb5762015f905a1015611b84575050604080516020810190915260008082529150611443565b611b938762015f905a036125af565b96506000611ba58960200151836125c5565b905080611bc957600060405180602001604052806000815250935093505050611443565b505b60408051608081018252600e546001600160a01b039081168252600f541660208201526010549181019190915260115460ff1615156060820152611c0f818a612627565b6013546000611c1d8a612164565b6013819055905060006060611c31896126e8565b15611ce857306001600160a01b03168c63f573102160e01b8c8e604051602401611c5c929190612ea9565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611c9a9190612d3d565b60006040518083038160008787f1925050503d8060008114611cd8576040519150601f19603f3d011682016040523d82523d6000602084013e611cdd565b606091505b509092509050611d4b565b8a6001600160a01b03168c8b604051611d019190612d3d565b60006040518083038160008787f1925050503d8060008114611d3f576040519150601f19603f3d011682016040523d82523d6000602084013e611d44565b606091505b5090925090505b600086118015611d5f5750611d5f8961256d565b8015611d69575081155b15611d91576000611d7e8660200151886125c5565b905080611d8f57611d8f6000611033565b505b611d9b8d86612627565b60135482611e8157600080600080611db2866126f1565b929650909450925090506003846007811115611dca57fe5b1415611dd957611dd984611033565b6001846007811115611de757fe5b1480611dfe57506004846007811115611dfc57fe5b145b80611e1457506006846007811115611e1257fe5b145b80611e2a57506007846007811115611e2857fe5b145b15611e355760128290555b6001846007811115611e4357fe5b1480611e5a57506004846007811115611e5857fe5b145b15611e6757809550611e7a565b6040518060200160405280600081525095505b5090925050505b909203909203601355909a909950975050505050505050565b611ea48282611837565b60025460405163af3dc01160e01b81526000916001600160a01b03169063af3dc01190611ed79086908690600401612dff565b602060405180830381600087803b158015611ef157600080fd5b505af1158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190612904565b90508061131257611f3983612055565b600260009054906101000a90046001600160a01b03166001600160a01b031663c3fd9b256040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611f8957600080fd5b505af1158015611f9d573d6000803e3d6000fd5b50505050611312614e206121a7565b60606000836007811115611fbc57fe5b1415611fd75750604080516020810190915260008152610632565b6003836007811115611fe557fe5b14156120235760408051602080820183526000808352925161200d9387939092839201612ee7565b6040516020818303038152906040529050610632565b60135460125460405161203e92869290918690602001612f23565b604051602081830303815290604052905092915050565b61205e81611972565b60025460405163011b1f7960e41b81526000916001600160a01b0316906311b1f7909061208f908590600401612dc7565b602060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e19190612904565b905080610a9b57600260009054906101000a90046001600160a01b03166001600160a01b03166333f943056040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561213857600080fd5b505af115801561214c573d6000803e3d6000fd5b50505050610a9b6175306064611ab2610aad86611317565b60005a8210612173575a610632565b5090565b60045460009083111561218c57506000610632565b60035483101561219e57506000610632565b50600192915050565b6013548111156121bb576121bb6002611033565b60138054919091039055565b606080825160011480156121ef57506080836000815181106121e557fe5b016020015160f81c105b156121fb575081610632565b6122078351608061241d565b8360405160200161203e929190612d59565b606060008260405160200161222e9190612dbe565b604051602081830303815290604052905060005b60208110156122785781818151811061225757fe5b01602001516001600160f81b0319161561227057612278565b600101612242565b6000816020036001600160401b038111801561229357600080fd5b506040519080825280601f01601f1916602001820160405280156122be576020820181803683370190505b50905060005b81518110156123145783516001840193859181106122de57fe5b602001015160f81c60f81b8282815181106122f557fe5b60200101906001600160f81b031916908160001a9053506001016122c4565b50949350505050565b606081516000141561233e5750604080516000815260208101909152610511565b6000805b83518110156123715783818151811061235757fe5b602002602001015151820191508080600101915050612342565b6000826001600160401b038111801561238957600080fd5b506040519080825280601f01601f1916602001820160405280156123b4576020820181803683370190505b50600092509050602081015b85518310156123145760008684815181106123d757fe5b6020026020010151905060006020820190506123f583828451612744565b87858151811061240157fe5b60200260200101515183019250505082806001019350506123c0565b6060806038841015612477576040805160018082528183019092529060208201818036833701905050905082840160f81b8160008151811061245b57fe5b60200101906001600160f81b031916908160001a905350610d53565b600060015b80868161248557fe5b041561249a576001909101906101000261247c565b816001016001600160401b03811180156124b357600080fd5b506040519080825280601f01601f1916602001820160405280156124de576020820181803683370190505b50925084820160370160f81b836000815181106124f757fe5b60200101906001600160f81b031916908160001a905350600190505b818111612563576101008183036101000a878161252c57fe5b048161253457fe5b0660f81b83828151811061254457fe5b60200101906001600160f81b031916908160001a905350600101612513565b5050905092915050565b60008082600481111561257c57fe5b1480612594575060035b82600481111561259257fe5b145b80610632575060048260048111156125a857fe5b1492915050565b60008183106125be5781610d53565b5090919050565b60008083836040516024016125db929190612dff565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790529050600061261d5a6006602160991b01600085610737565b5095945050505050565b805182516001600160a01b0390811691161461265f578051600e80546001600160a01b0319166001600160a01b039092169190911790555b80602001516001600160a01b031682602001516001600160a01b0316146126a5576020810151600f80546001600160a01b0319166001600160a01b039092169190911790555b8060600151151582606001511515146126cf5760608101516011805460ff19169115159190911790555b8060400151826040015114610a9b576040015160105550565b60006003612586565b60008060006060845160001415612720575050604080516020810190915260008082529250829150819061273d565b848060200190518101906127349190612a79565b93509350935093505b9193509193565b8282825b60208110612767578151835260209283019290910190601f1901612748565b905182516020929092036101000a6000190180199091169116179052505050565b600061279b61279684612fde565b612fbb565b90508281528383830111156127af57600080fd5b828260208301376000602084830101529392505050565b80356105118161302b565b600082601f8301126127e1578081fd5b610d5383833560208501612788565b80356002811061051157600080fd5b600060e08284031215612810578081fd5b61281a60e0612fbb565b90508135815260208201356020820152612836604083016127f0565b6040820152612847606083016127c6565b6060820152612858608083016127c6565b608082015260a082013560a082015260c08201356001600160401b0381111561288057600080fd5b61288c848285016127d1565b60c08301525092915050565b6000602082840312156128a9578081fd5b8135610d538161302b565b6000602082840312156128c5578081fd5b8151610d538161302b565b6000806000606084860312156128e4578182fd5b83356128ef8161302b565b95602085013595506040909401359392505050565b600060208284031215612915578081fd5b81518015158114610d53578182fd5b600060208284031215612935578081fd5b5035919050565b60006020828403121561294d578081fd5b5051919050565b60008060408385031215612966578182fd5b50508035926020909101359150565b6000806000806080858703121561298a578081fd5b84359350602085013560ff811681146129a1578182fd5b93969395505050506040820135916060013590565b6000602082840312156129c7578081fd5b81356001600160401b038111156129dc578182fd5b610946848285016127d1565b600080604083850312156129fa578182fd5b82356001600160401b03811115612a0f578283fd5b612a1b858286016127d1565b9250506020830135612a2c8161302b565b809150509250929050565b60008060408385031215612a49578182fd5b82356001600160401b03811115612a5e578283fd5b612a6a858286016127d1565b95602094909401359450505050565b60008060008060808587031215612a8e578182fd5b845160088110612a9c578283fd5b80945050602085015192506040850151915060608501516001600160401b03811115612ac6578182fd5b8501601f81018713612ad6578182fd5b8051612ae461279682612fde565b818152886020838501011115612af8578384fd5b612b09826020830160208601612fff565b9598949750929550505050565b600060208284031215612b27578081fd5b81356001600160401b03811115612b3c578182fd5b8201601f81018413612b4c578182fd5b61094684823560208401612788565b60008060408385031215612b6d578182fd5b82356001600160401b03811115612b82578283fd5b612a1b858286016127ff565b60008060008060808587031215612ba3578182fd5b84356001600160401b03811115612bb8578283fd5b612bc4878288016127ff565b9450506020850135612bd58161302b565b9250604085013591506060850135612bec8161302b565b939692955090935050565b600080600060608486031215612c0b578081fd5b833592506020840135612c1d8161302b565b915060408401356001600160401b03811115612c37578182fd5b612c43868287016127d1565b9150509250925092565b60008060008060808587031215612c62578182fd5b843593506020850135612c748161302b565b92506040850135915060608501356001600160401b03811115612c95578182fd5b612ca1878288016127d1565b91505092959194509250565b60008151808452612cc5816020860160208601612fff565b601f01601f19169290920160200192915050565b60088110612ce357fe5b9052565b60609190911b6bffffffffffffffffffffffff1916815260140190565b6001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60008251612d4f818460208701612fff565b9190910192915050565b60008351612d6b818460208801612fff565b835190830190612d7f818360208801612fff565b01949350505050565b6c600d380380600d6000396000f360981b81528151600090612db181600d850160208701612fff565b91909101600d0192915050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b038316815260406020820181905260009061094690830184612cad565b60008315158252604060208301526109466040830184612cad565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d536020830184612cad565b600060408252612ebc6040830185612cad565b905060018060a01b03831660208301529392505050565b6020810160028310612ee157fe5b91905290565b6000612ef38287612cd9565b60ff8516602083015260ff8416604083015260806060830152612f196080830184612cad565b9695505050505050565b6000612f2f8287612cd9565b84602083015283604083015260806060830152612f196080830184612cad565b60208082526046908201527f4f6e6c792061757468656e746963617465642061646472657373657320696e2060408201527f6f766d53746174654d616e616765722063616e2063616c6c20746869732066756060820152653731ba34b7b760d11b608082015260a00190565b6040518181016001600160401b0381118282101715612fd657fe5b604052919050565b60006001600160401b03821115612ff157fe5b50601f01601f191660200190565b60005b8381101561301a578181015183820152602001613002565b8381111561092b5750506000910152565b6001600160a01b038116811461065257600080fdfe5369676e61747572652070726f766964656420666f7220454f4120636f6e7472616374206372656174696f6e20697320696e76616c69642e436f6e7472616374206372656174696f6e20636f646520636f6e7461696e7320756e73616665206f70636f6465732e2044696420796f75207573652074686520726967687420636f6d70696c6572206f72207061737320616e20756e7361666520636f6e7374727563746f7220617267756d656e743f436f6e7374727563746f7220617474656d7074656420746f206465706c6f7920756e736166652062797465636f64652ea2646970667358221220fe0b47506ec2f40df111ba865323ee43ffbd7ef91f30eae2dfc209de19a78c0a64736f6c63430007060033",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c8063741a33eb1161011a578063996d79a5116100ad578063a8c4c5ec1161007c578063a8c4c5ec146103eb578063bdbf8c36146103f3578063c1fb2ea2146103fb578063f573102114610403578063ffe7391414610416576101fb565b8063996d79a5146103b557806399ccd98b146103bd5780639be3ad67146103d05780639dc9dc93146103e3576101fb565b80638435035b116100e95780638435035b146103745780638540661f1461038757806385979f761461039a57806390580256146103ad576101fb565b8063741a33eb14610326578063746c32f11461033957806376427cac146103595780637cebbe941461036c576101fb565b806322bd64c011610192578063461a447811610161578063461a4478146102e25780635a98c361146102f55780635b99d1c5146102fd578063735090641461031e576101fb565b806322bd64c01461029257806324749d5c146102a7578063299ca478146102ba5780632a2a7adb146102cf576101fb565b806314aa2ff7116101ce57806314aa2ff7146102595780631c4712a71461027a5780631f64338b1461028257806320160f3a1461028a576101fb565b806303daa9591461020057806308bf7dbf146102295780630a5635ae14610231578063101185a414610244575b600080fd5b61021361020e366004612924565b610429565b6040516102209190612dbe565b60405180910390f35b61021361046e565b61021361023f366004612898565b610480565b61024c610516565b6040516102209190612ed3565b61026c6102673660046129b6565b61051f565b604051610220929190612e39565b6102136105b1565b6102136105b7565b6102136105be565b6102a56102a0366004612954565b6105c4565b005b6102136102b5366004612898565b61061f565b6102c2610638565b6040516102209190612dc7565b6102a56102dd3660046129b6565b610647565b6102c26102f0366004612b16565b610655565b610213610731565b61031061030b366004612c4d565b610737565b604051610220929190612e5d565b6102c26107bd565b6102a5610334366004612975565b6107cc565b61034c6103473660046128d0565b610931565b6040516102209190612e96565b61034c610367366004612b8e565b61094e565b6102a5610a50565b610213610382366004612898565b610a9f565b610310610395366004612bf7565b610ab2565b6103106103a8366004612bf7565b610b39565b610213610b56565b6102c2610b5c565b61026c6103cb366004612a37565b610b6b565b61034c6103de366004612b5b565b610bf8565b6102c2610d5a565b610213610d69565b610213610d6f565b610213610d75565b6102a56104113660046129e8565b610d87565b610310610424366004612bf7565b610f50565b6000619c4060005a9050600061043d610b5c565b90506104498186610fa5565b93505060005a820390508083101561046657601280548483030190555b505050919050565b600061047b61023f610b5c565b905090565b600080826040516024016104949190612dc7565b60408051601f198184030181529190526020810180516001600160e01b03166370a0823160e01b17905290506000806104d55a6006602160991b0185610ab2565b915091508115806104e857508051602014155b156104f7576104f76000611033565b8080602001905181019061050b919061293c565b93505050505b919050565b60085460ff1690565b60115460009060609060ff1615156001141561053f5761053f6006611033565b619c4060005a90506000610551610b5c565b905061055c8161104c565b60006105708261056b846110e1565b61116c565b905061057e81886003611206565b95509550505060005a82039050808310156105a05760128054840190556105a9565b60128054820190555b505050915091565b60045490565b62015f9081565b600b5490565b60115460ff161515600114156105de576105de6006611033565b61ea6060005a905060006105f0610b5c565b90506105fd818686611290565b5060005a820390508083101561061857601280548483030190555b5050505050565b600061063261062d83611317565b6113a2565b92915050565b6000546001600160a01b031681565b6106526001826113a6565b50565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b838110156106b557818101518382015260200161069d565b50505050905090810190601f1680156106e25780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d602081101561072957600080fd5b505192915050565b600a5490565b60006060620186a060005a60408051608081018252600f5460115460ff16151560608301526001600160a01b0390811682528a166020820152908101889052909150610787818a8a8960006113bc565b945094505060005a82039050808310156107a85760128054840190556107b1565b60128054820190555b50505094509492505050565b600e546001600160a01b031690565b60115460ff161515600114156107e6576107e66006611033565b600060018585601b0185856040516000815260200160405260405161080e9493929190612e78565b6020604051602081039080840390855afa158015610830573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661086c5761086c60405180606001604052806038815260200161304160389139610647565b6108758161144d565b61087f575061092b565b610888816114d8565b600f80546001600160a01b038381166001600160a01b03198316179092551660006108e56108c16009602160991b018361034782610a9f565b6040516020016108d19190612d88565b60405160208183030381529060405261153f565b600f80546001600160a01b0319166001600160a01b038516179055905061091c838261091081611552565b80519060200120611568565b6109278360006115a5565b5050505b50505050565b606061094661093f85611317565b8484611616565b949350505050565b6060331561095b57600080fd5b600280546001600160a01b0319166001600160a01b03841617905561097f8561163a565b600019601355600f80546001600160a01b0319166001600160a01b0386811691909117909155608086015116158015610a1e576000806109c28860c0015161051f565b90925090506001600160a01b038216610a02576000816040516020016109e9929190612e5d565b6040516020818303038152906040529350505050610946565b6001610a0d83611552565b6040516020016109e9929190612e5d565b600080610a398860a001518960800151888b60c00151610737565b9150915081816040516020016109e9929190612e5d565b60115460ff16151560011415610a6a57610a6a6006611033565b6000610a74610b5c565b90506000610a81826110e1565b905080816001011115610a9b57610a9b82826001016115a5565b5050565b6000610632610aad83611317565b6116ac565b600060606201388060005a60408051608081018252600f546001600160a01b03908116825289166020820152600160608201819052600092820192909252919250610b049082908a908a908a906113bc565b945094505060005a8203905080831015610b25576012805484019055610b2e565b60128054820190555b505050935093915050565b60006060610b4a8585600086610737565b91509150935093915050565b60075490565b600f546001600160a01b031690565b60115460009060609060ff16151560011415610b8b57610b8b6006611033565b619c4060005a90506000610b9d610b5c565b9050610ba88161104c565b6000610bb58289896116b0565b9050610bc381896004611206565b95509550505060005a8203905080831015610be5576012805484019055610bee565b60128054820190555b5050509250929050565b600a546060907fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d14610c395750604080516020810190915260008152610632565b600280546001600160a01b0319166001600160a01b038481169190911791829055604051630d15d41560e41b815291169063d15d415090610c7e903390600401612dc7565b60206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190612904565b610cf35760405162461bcd60e51b8152600401610cea90612f4f565b60405180910390fd5b610cfc8361163a565b610d05836116f6565b610d2657610d11611752565b50604080516020810190915260008152610632565b6000610d486003600001548560a0015103856080015160008760c00151610737565b915050610d53611752565b9392505050565b600d546001600160a01b031690565b60105490565b60095490565b600061047b610d82610b5c565b6110e1565b333014610d9357610a9b565b610d9c8161144d565b610daa57610daa6005611033565b6001546040516352275acd60e11b81526001600160a01b039091169063a44eb59a90610dda908590600401612e96565b60206040518083038186803b158015610df257600080fd5b505afa158015610e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2a9190612904565b610e5957610e596004610e546040518060a0016040528060768152602001613079607691396117f4565b6113a6565b610e62816114d8565b6000610e6d8361153f565b90506001600160a01b038116610e87573d6000803e3d6000fd5b6000610e9282611552565b6001546040516352275acd60e11b81529192506001600160a01b03169063a44eb59a90610ec3908490600401612e96565b60206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f139190612904565b610f3d57610f3d6004610e546040518060600160405280603081526020016130ef603091396117f4565b61092b8383610f4b856113a2565b611568565b60006060619c4060005a60408051608081018252600e546001600160a01b039081168252600f541660208201526010549181019190915260115460ff1615156060820152909150610b048189898960026113bc565b6000610fb18383611837565b600254604051631aaf392f60e01b81526001600160a01b0390911690631aaf392f90610fe39086908690600401612dff565b60206040518083038186803b158015610ffb57600080fd5b505afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d53919061293c565b61065281604051806020016040528060008152506113a6565b6000806110ab5a6002602160991b0163b1540a0160e01b866040516024016110749190612dc7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ab2565b915091506000818060200190518101906110c59190612904565b90508015806110d2575082155b1561092b5761092b6007611033565b60006110ec82611972565b60025460405163d126199f60e01b81526001600160a01b039091169063d126199f9061111c908590600401612dc7565b60206040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610632919061293c565b60408051600280825260608201909252600091829190816020015b60608152602001906001900390816111875790505090506111a784611ab9565b816000815181106111b457fe5b60200260200101819052506111c883611ae3565b816001815181106111d557fe5b602002602001018190525060006111eb82611af6565b90506111fd8180519060200120611b3a565b95945050505050565b60006060611228611215610b5c565b611220610d82610b5c565b6001016115a5565b60408051608081018252600f546010549282019290925260115460ff16151560608201526001600160a01b0391821681529086166020820152600080611271835a8a8a8a611b3d565b9150915081611281576000611283565b875b9890975095505050505050565b8061129b8484610fa5565b14156112a657611312565b6112b08383611e9a565b600254604051635c17d62960e01b81526001600160a01b0390911690635c17d629906112e490869086908690600401612e18565b600060405180830381600087803b1580156112fe57600080fd5b505af1158015610927573d6000803e3d6000fd5b505050565b600061132282611972565b600254604051637c8ee70360e01b81526001600160a01b0390911690637c8ee70390611352908590600401612dc7565b60206040518083038186803b15801561136a57600080fd5b505afa15801561137e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063291906128b4565b3f90565b60006113b28383611fac565b9050805160208201fd5b6000606073ffffffffffffffffffffffffffffffffffff0000851673deaddeaddeaddeaddeaddeaddeaddeaddead0000141561140b575050604080516020810190915260008152600190611443565b60006064866001600160a01b03161061142c5761142786611317565b61142e565b855b905061143d8888838888611b3d565b92509250505b9550959350505050565b600061145882611972565b6002546040516307a1294560e01b81526001600160a01b03909116906307a1294590611488908590600401612dc7565b60206040518083038186803b1580156114a057600080fd5b505afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190612904565b6114e181611972565b600254604051637e78a4d160e11b81526001600160a01b039091169063fcf149a290611511908490600401612dc7565b600060405180830381600087803b15801561152b57600080fd5b505af1158015610618573d6000803e3d6000fd5b6000808251602084016000f09392505050565b6060610632826000611563856116ac565b611616565b61157183612055565b6002546040516368510af960e11b81526001600160a01b039091169063d0a215f2906112e490869086908690600401612ddb565b6115ae82612055565b6002546040516374855dc360e11b81526001600160a01b039091169063e90abb86906115e09085908590600401612dff565b600060405180830381600087803b1580156115fa57600080fd5b505af115801561160e573d6000803e3d6000fd5b505050505050565b6060806040519050602083018101604052828152828460208301873c949350505050565b80516009556020810151600a5560a0810151600c5560408101516008805460ff19166001838181111561166957fe5b02179055506060810151600d80546001600160a01b0319166001600160a01b03909216919091179055600554600b5560a08101516116a690612164565b60135550565b3b90565b60008060ff60f81b858486805190602001206040516020016116d59493929190612d04565b6040516020818303038152906040528051906020012090506111fd81611b3a565b60007fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d8260200151141561172c57506000610511565b61173e8260a001518360400151612177565b61174a57506000610511565b506001919050565b600d805473defa017defa017defa017defa017defa017defa06001600160a01b031991821681179092557fdefa017defa017defa017defa017defa017defa017defa017defa017defa017d6009819055600a819055600b819055600c8190556008805460ff199081169091556012829055600e8054841685179055600f8054841690941790935560118054909316909255601391909155600280549091169055565b6060816040516024016118079190612e96565b60408051601f198184030181529190526020810180516001600160e01b031662461bcd60e51b1790529050919050565b6175305a101561184b5761184b6000611033565b600254604051630ad2267960e01b81526001600160a01b0390911690630ad226799061187d9085908590600401612dff565b60206040518083038186803b15801561189557600080fd5b505afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612904565b6118db576118db6003611033565b600254604051632bcdee1960e21b81526000916001600160a01b03169063af37b8649061190e9086908690600401612dff565b602060405180830381600087803b15801561192857600080fd5b505af115801561193c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119609190612904565b90508061131257611312614e206121a7565b6175305a1015611986576119866000611033565b60025460405163c8e40fbf60e01b81526001600160a01b039091169063c8e40fbf906119b6908490600401612dc7565b60206040518083038186803b1580156119ce57600080fd5b505afa1580156119e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a069190612904565b611a1457611a146003611033565b600254604051633ecdecc760e21b81526000916001600160a01b03169063fb37b31c90611a45908590600401612dc7565b602060405180830381600087803b158015611a5f57600080fd5b505af1158015611a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a979190612904565b905080610a9b57610a9b6175306064611ab2610aad86611317565b02016121a7565b606061063282604051602001611acf9190612ce7565b6040516020818303038152906040526121c7565b6060610632611af183612219565b6121c7565b60606000611b038361231d565b9050611b11815160c061241d565b81604051602001611b23929190612d59565b604051602081830303815290604052915050919050565b90565b60408501516000906060908015801590611b5b5750611b5b8461256d565b15611bcb5762015f905a1015611b84575050604080516020810190915260008082529150611443565b611b938762015f905a036125af565b96506000611ba58960200151836125c5565b905080611bc957600060405180602001604052806000815250935093505050611443565b505b60408051608081018252600e546001600160a01b039081168252600f541660208201526010549181019190915260115460ff1615156060820152611c0f818a612627565b6013546000611c1d8a612164565b6013819055905060006060611c31896126e8565b15611ce857306001600160a01b03168c63f573102160e01b8c8e604051602401611c5c929190612ea9565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611c9a9190612d3d565b60006040518083038160008787f1925050503d8060008114611cd8576040519150601f19603f3d011682016040523d82523d6000602084013e611cdd565b606091505b509092509050611d4b565b8a6001600160a01b03168c8b604051611d019190612d3d565b60006040518083038160008787f1925050503d8060008114611d3f576040519150601f19603f3d011682016040523d82523d6000602084013e611d44565b606091505b5090925090505b600086118015611d5f5750611d5f8961256d565b8015611d69575081155b15611d91576000611d7e8660200151886125c5565b905080611d8f57611d8f6000611033565b505b611d9b8d86612627565b60135482611e8157600080600080611db2866126f1565b929650909450925090506003846007811115611dca57fe5b1415611dd957611dd984611033565b6001846007811115611de757fe5b1480611dfe57506004846007811115611dfc57fe5b145b80611e1457506006846007811115611e1257fe5b145b80611e2a57506007846007811115611e2857fe5b145b15611e355760128290555b6001846007811115611e4357fe5b1480611e5a57506004846007811115611e5857fe5b145b15611e6757809550611e7a565b6040518060200160405280600081525095505b5090925050505b909203909203601355909a909950975050505050505050565b611ea48282611837565b60025460405163af3dc01160e01b81526000916001600160a01b03169063af3dc01190611ed79086908690600401612dff565b602060405180830381600087803b158015611ef157600080fd5b505af1158015611f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f299190612904565b90508061131257611f3983612055565b600260009054906101000a90046001600160a01b03166001600160a01b031663c3fd9b256040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611f8957600080fd5b505af1158015611f9d573d6000803e3d6000fd5b50505050611312614e206121a7565b60606000836007811115611fbc57fe5b1415611fd75750604080516020810190915260008152610632565b6003836007811115611fe557fe5b14156120235760408051602080820183526000808352925161200d9387939092839201612ee7565b6040516020818303038152906040529050610632565b60135460125460405161203e92869290918690602001612f23565b604051602081830303815290604052905092915050565b61205e81611972565b60025460405163011b1f7960e41b81526000916001600160a01b0316906311b1f7909061208f908590600401612dc7565b602060405180830381600087803b1580156120a957600080fd5b505af11580156120bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e19190612904565b905080610a9b57600260009054906101000a90046001600160a01b03166001600160a01b03166333f943056040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561213857600080fd5b505af115801561214c573d6000803e3d6000fd5b50505050610a9b6175306064611ab2610aad86611317565b60005a8210612173575a610632565b5090565b60045460009083111561218c57506000610632565b60035483101561219e57506000610632565b50600192915050565b6013548111156121bb576121bb6002611033565b60138054919091039055565b606080825160011480156121ef57506080836000815181106121e557fe5b016020015160f81c105b156121fb575081610632565b6122078351608061241d565b8360405160200161203e929190612d59565b606060008260405160200161222e9190612dbe565b604051602081830303815290604052905060005b60208110156122785781818151811061225757fe5b01602001516001600160f81b0319161561227057612278565b600101612242565b6000816020036001600160401b038111801561229357600080fd5b506040519080825280601f01601f1916602001820160405280156122be576020820181803683370190505b50905060005b81518110156123145783516001840193859181106122de57fe5b602001015160f81c60f81b8282815181106122f557fe5b60200101906001600160f81b031916908160001a9053506001016122c4565b50949350505050565b606081516000141561233e5750604080516000815260208101909152610511565b6000805b83518110156123715783818151811061235757fe5b602002602001015151820191508080600101915050612342565b6000826001600160401b038111801561238957600080fd5b506040519080825280601f01601f1916602001820160405280156123b4576020820181803683370190505b50600092509050602081015b85518310156123145760008684815181106123d757fe5b6020026020010151905060006020820190506123f583828451612744565b87858151811061240157fe5b60200260200101515183019250505082806001019350506123c0565b6060806038841015612477576040805160018082528183019092529060208201818036833701905050905082840160f81b8160008151811061245b57fe5b60200101906001600160f81b031916908160001a905350610d53565b600060015b80868161248557fe5b041561249a576001909101906101000261247c565b816001016001600160401b03811180156124b357600080fd5b506040519080825280601f01601f1916602001820160405280156124de576020820181803683370190505b50925084820160370160f81b836000815181106124f757fe5b60200101906001600160f81b031916908160001a905350600190505b818111612563576101008183036101000a878161252c57fe5b048161253457fe5b0660f81b83828151811061254457fe5b60200101906001600160f81b031916908160001a905350600101612513565b5050905092915050565b60008082600481111561257c57fe5b1480612594575060035b82600481111561259257fe5b145b80610632575060048260048111156125a857fe5b1492915050565b60008183106125be5781610d53565b5090919050565b60008083836040516024016125db929190612dff565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790529050600061261d5a6006602160991b01600085610737565b5095945050505050565b805182516001600160a01b0390811691161461265f578051600e80546001600160a01b0319166001600160a01b039092169190911790555b80602001516001600160a01b031682602001516001600160a01b0316146126a5576020810151600f80546001600160a01b0319166001600160a01b039092169190911790555b8060600151151582606001511515146126cf5760608101516011805460ff19169115159190911790555b8060400151826040015114610a9b576040015160105550565b60006003612586565b60008060006060845160001415612720575050604080516020810190915260008082529250829150819061273d565b848060200190518101906127349190612a79565b93509350935093505b9193509193565b8282825b60208110612767578151835260209283019290910190601f1901612748565b905182516020929092036101000a6000190180199091169116179052505050565b600061279b61279684612fde565b612fbb565b90508281528383830111156127af57600080fd5b828260208301376000602084830101529392505050565b80356105118161302b565b600082601f8301126127e1578081fd5b610d5383833560208501612788565b80356002811061051157600080fd5b600060e08284031215612810578081fd5b61281a60e0612fbb565b90508135815260208201356020820152612836604083016127f0565b6040820152612847606083016127c6565b6060820152612858608083016127c6565b608082015260a082013560a082015260c08201356001600160401b0381111561288057600080fd5b61288c848285016127d1565b60c08301525092915050565b6000602082840312156128a9578081fd5b8135610d538161302b565b6000602082840312156128c5578081fd5b8151610d538161302b565b6000806000606084860312156128e4578182fd5b83356128ef8161302b565b95602085013595506040909401359392505050565b600060208284031215612915578081fd5b81518015158114610d53578182fd5b600060208284031215612935578081fd5b5035919050565b60006020828403121561294d578081fd5b5051919050565b60008060408385031215612966578182fd5b50508035926020909101359150565b6000806000806080858703121561298a578081fd5b84359350602085013560ff811681146129a1578182fd5b93969395505050506040820135916060013590565b6000602082840312156129c7578081fd5b81356001600160401b038111156129dc578182fd5b610946848285016127d1565b600080604083850312156129fa578182fd5b82356001600160401b03811115612a0f578283fd5b612a1b858286016127d1565b9250506020830135612a2c8161302b565b809150509250929050565b60008060408385031215612a49578182fd5b82356001600160401b03811115612a5e578283fd5b612a6a858286016127d1565b95602094909401359450505050565b60008060008060808587031215612a8e578182fd5b845160088110612a9c578283fd5b80945050602085015192506040850151915060608501516001600160401b03811115612ac6578182fd5b8501601f81018713612ad6578182fd5b8051612ae461279682612fde565b818152886020838501011115612af8578384fd5b612b09826020830160208601612fff565b9598949750929550505050565b600060208284031215612b27578081fd5b81356001600160401b03811115612b3c578182fd5b8201601f81018413612b4c578182fd5b61094684823560208401612788565b60008060408385031215612b6d578182fd5b82356001600160401b03811115612b82578283fd5b612a1b858286016127ff565b60008060008060808587031215612ba3578182fd5b84356001600160401b03811115612bb8578283fd5b612bc4878288016127ff565b9450506020850135612bd58161302b565b9250604085013591506060850135612bec8161302b565b939692955090935050565b600080600060608486031215612c0b578081fd5b833592506020840135612c1d8161302b565b915060408401356001600160401b03811115612c37578182fd5b612c43868287016127d1565b9150509250925092565b60008060008060808587031215612c62578182fd5b843593506020850135612c748161302b565b92506040850135915060608501356001600160401b03811115612c95578182fd5b612ca1878288016127d1565b91505092959194509250565b60008151808452612cc5816020860160208601612fff565b601f01601f19169290920160200192915050565b60088110612ce357fe5b9052565b60609190911b6bffffffffffffffffffffffff1916815260140190565b6001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60008251612d4f818460208701612fff565b9190910192915050565b60008351612d6b818460208801612fff565b835190830190612d7f818360208801612fff565b01949350505050565b6c600d380380600d6000396000f360981b81528151600090612db181600d850160208701612fff565b91909101600d0192915050565b90815260200190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b038316815260406020820181905260009061094690830184612cad565b60008315158252604060208301526109466040830184612cad565b93845260ff9290921660208401526040830152606082015260800190565b600060208252610d536020830184612cad565b600060408252612ebc6040830185612cad565b905060018060a01b03831660208301529392505050565b6020810160028310612ee157fe5b91905290565b6000612ef38287612cd9565b60ff8516602083015260ff8416604083015260806060830152612f196080830184612cad565b9695505050505050565b6000612f2f8287612cd9565b84602083015283604083015260806060830152612f196080830184612cad565b60208082526046908201527f4f6e6c792061757468656e746963617465642061646472657373657320696e2060408201527f6f766d53746174654d616e616765722063616e2063616c6c20746869732066756060820152653731ba34b7b760d11b608082015260a00190565b6040518181016001600160401b0381118282101715612fd657fe5b604052919050565b60006001600160401b03821115612ff157fe5b50601f01601f191660200190565b60005b8381101561301a578181015183820152602001613002565b8381111561092b5750506000910152565b6001600160a01b038116811461065257600080fdfe5369676e61747572652070726f766964656420666f7220454f4120636f6e7472616374206372656174696f6e20697320696e76616c69642e436f6e7472616374206372656174696f6e20636f646520636f6e7461696e7320756e73616665206f70636f6465732e2044696420796f75207573652074686520726967687420636f6d70696c6572206f72207061737320616e20756e7361666520636f6e7374727563746f7220617267756d656e743f436f6e7374727563746f7220617474656d7074656420746f206465706c6f7920756e736166652062797465636f64652ea2646970667358221220fe0b47506ec2f40df111ba865323ee43ffbd7ef91f30eae2dfc209de19a78c0a64736f6c63430007060033",devdoc:{details:"The Execution Manager (EM) is the core of our OVM implementation, and provides a sandboxed environment allowing us to execute OVM transactions deterministically on either Layer 1 or Layer 2. The EM's run() function is the first function called during the execution of any transaction on L2. For each context-dependent EVM operation the EM has a function which implements a corresponding OVM operation, which will read state from the State Manager contract. The EM relies on the Safety Checker to verify that code deployed to Layer 2 does not contain any context-dependent operations. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{constructor:{params:{_libAddressManager:"Address of the Address Manager."}},"ovmADDRESS()":{returns:{_ADDRESS:"Active ADDRESS within the current message context."}},"ovmBALANCE(address)":{params:{_contract:"Address of the contract to query the OVM_ETH balance of."},returns:{_BALANCE:"OVM_ETH balance of the requested contract."}},"ovmCALL(uint256,address,bytes)":{params:{_address:"Address of the contract to call.",_calldata:"Data to send along with the call.",_gasLimit:"Amount of gas to be passed into this call."},returns:{_returndata:"Data returned by the call.",_success:"Whether or not the call returned (rather than reverted)."}},"ovmCALL(uint256,address,uint256,bytes)":{params:{_address:"Address of the contract to call.",_calldata:"Data to send along with the call.",_gasLimit:"Amount of gas to be passed into this call.",_value:"ETH value to pass with the call."},returns:{_returndata:"Data returned by the call.",_success:"Whether or not the call returned (rather than reverted)."}},"ovmCALLER()":{returns:{_CALLER:"Address of the CALLER within the current message context."}},"ovmCALLVALUE()":{returns:{_CALLVALUE:"Value sent along with the call according to the current message context."}},"ovmCHAINID()":{returns:{_CHAINID:"Value of the chain's CHAINID within the global context."}},"ovmCREATE(bytes)":{params:{_bytecode:"Code to be used to CREATE a new contract."},returns:{_0:"Address of the created contract.",_1:"Revert data, if and only if the creation threw an exception."}},"ovmCREATE2(bytes,bytes32)":{params:{_bytecode:"Code to be used to CREATE2 a new contract.",_salt:"Value used to determine the contract's address."},returns:{_0:"Address of the created contract.",_1:"Revert data, if and only if the creation threw an exception."}},"ovmCREATEEOA(bytes32,uint8,bytes32,bytes32)":{details:"Essentially functions like ovmCREATE or ovmCREATE2, but we can bypass a lot of checks      because the contract we're creating is trusted (no need to do safety checking or to      handle unexpected reverts). Doesn't need to return an address because the address is      assumed to be the user's actual address.",params:{_messageHash:"Hash of a message signed by some user, for verification.",_r:"Signature `r` parameter.",_s:"Signature `s` parameter.",_v:"Signature `v` parameter."}},"ovmDELEGATECALL(uint256,address,bytes)":{params:{_address:"Address of the contract to call.",_calldata:"Data to send along with the call.",_gasLimit:"Amount of gas to be passed into this call."},returns:{_returndata:"Data returned by the call.",_success:"Whether or not the call returned (rather than reverted)."}},"ovmEXTCODECOPY(address,uint256,uint256)":{params:{_contract:"Address of the contract to copy code from.",_length:"Total number of bytes to copy from the contract's code.",_offset:"Offset in bytes from the start of contract code to copy beyond."},returns:{_code:"Bytes of code copied from the requested contract."}},"ovmEXTCODEHASH(address)":{params:{_contract:"Address of the contract to query the hash of."},returns:{_EXTCODEHASH:"Hash of the requested contract."}},"ovmEXTCODESIZE(address)":{params:{_contract:"Address of the contract to query the size of."},returns:{_EXTCODESIZE:"Size of the requested contract in bytes."}},"ovmGASLIMIT()":{returns:{_GASLIMIT:"Value of the block's GASLIMIT within the transaction context."}},"ovmGETNONCE()":{returns:{_nonce:"Nonce of the current contract."}},"ovmL1QUEUEORIGIN()":{returns:{_queueOrigin:"Enum indicating the ovmL1QUEUEORIGIN within the current message context."}},"ovmL1TXORIGIN()":{returns:{_l1TxOrigin:"Address of the account which sent the tx into L2 from L1."}},"ovmNUMBER()":{returns:{_NUMBER:"Value of the NUMBER within the transaction context."}},"ovmREVERT(bytes)":{params:{_data:"Bytes data to pass along with the REVERT."}},"ovmSELFBALANCE()":{returns:{_BALANCE:"OVM_ETH balance of the requesting contract."}},"ovmSLOAD(bytes32)":{params:{_key:"32 byte key of the storage slot to load."},returns:{_value:"32 byte value of the requested storage slot."}},"ovmSSTORE(bytes32,bytes32)":{params:{_key:"32 byte key of the storage slot to set.",_value:"32 byte value for the storage slot."}},"ovmSTATICCALL(uint256,address,bytes)":{params:{_address:"Address of the contract to call.",_calldata:"Data to send along with the call.",_gasLimit:"Amount of gas to be passed into this call."},returns:{_returndata:"Data returned by the call.",_success:"Whether or not the call returned (rather than reverted)."}},"ovmTIMESTAMP()":{returns:{_TIMESTAMP:"Value of the TIMESTAMP within the transaction context."}},"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}},"run((uint256,uint256,uint8,address,address,uint256,bytes),address)":{params:{_ovmStateManager:"iOVM_StateManager implementation providing account state.",_transaction:"Transaction data to be executed."}},"safeCREATE(bytes,address)":{params:{_address:"OVM address being deployed to.",_creationCode:"Code to pass into CREATE for deployment."}},"simulateMessage((uint256,uint256,uint8,address,address,uint256,bytes),address,uint256,address)":{params:{_from:"the OVM account the simulated call should be from.",_ovmStateManager:"the address of the OVM_StateManager precompile in the L2 state.",_transaction:"the message transaction to simulate.",_value:"the amount of ETH value to send."}}},stateVariables:{CONTAINER_CONTRACT_PREFIX:{details:"The Execution Manager and State Manager each have this 30 byte prefix, and are uncallable."}},title:"OVM_ExecutionManager",version:1},userdoc:{kind:"user",methods:{"ovmADDRESS()":{notice:"Overrides ADDRESS."},"ovmBALANCE(address)":{notice:"Overrides BALANCE. NOTE: In the future, this could be optimized to directly invoke EM._getContractStorage(...)."},"ovmCALL(uint256,address,bytes)":{notice:"Legacy ovmCALL function which did not support ETH value; this maintains backwards compatibility."},"ovmCALL(uint256,address,uint256,bytes)":{notice:"Overrides CALL."},"ovmCALLER()":{notice:"Overrides CALLER."},"ovmCALLVALUE()":{notice:"Overrides CALLVALUE."},"ovmCHAINID()":{notice:"Overrides CHAINID."},"ovmCREATE(bytes)":{notice:"Overrides CREATE."},"ovmCREATE2(bytes,bytes32)":{notice:"Overrides CREATE2."},"ovmCREATEEOA(bytes32,uint8,bytes32,bytes32)":{notice:"Creates a new EOA contract account, for account abstraction."},"ovmDELEGATECALL(uint256,address,bytes)":{notice:"Overrides DELEGATECALL."},"ovmEXTCODECOPY(address,uint256,uint256)":{notice:"Overrides EXTCODECOPY."},"ovmEXTCODEHASH(address)":{notice:"Overrides EXTCODEHASH."},"ovmEXTCODESIZE(address)":{notice:"Overrides EXTCODESIZE."},"ovmGASLIMIT()":{notice:"Overrides GASLIMIT."},"ovmGETNONCE()":{notice:"Retrieves the nonce of the current ovmADDRESS."},"ovmINCREMENTNONCE()":{notice:"Bumps the nonce of the current ovmADDRESS by one."},"ovmL1QUEUEORIGIN()":{notice:"Specifies from which source (Sequencer or Queue) this transaction originated from."},"ovmL1TXORIGIN()":{notice:"Specifies which L1 account, if any, sent this transaction by calling enqueue()."},"ovmNUMBER()":{notice:"Overrides NUMBER."},"ovmREVERT(bytes)":{notice:"Overrides REVERT."},"ovmSELFBALANCE()":{notice:"Overrides SELFBALANCE."},"ovmSLOAD(bytes32)":{notice:"Overrides SLOAD."},"ovmSSTORE(bytes32,bytes32)":{notice:"Overrides SSTORE."},"ovmSTATICCALL(uint256,address,bytes)":{notice:"Overrides STATICCALL."},"ovmTIMESTAMP()":{notice:"Overrides TIMESTAMP."},"resolve(string)":{notice:"Resolves the address associated with a given name."},"run((uint256,uint256,uint8,address,address,uint256,bytes),address)":{notice:"Starts the execution of a transaction via the OVM_ExecutionManager."},"safeCREATE(bytes,address)":{notice:"Handles the creation-specific safety measures required for OVM contract deployment. This function sanitizes the return types for creation messages to match calls (bool, bytes), by being an external function which the EM can call, that mimics the success/fail case of the CREATE. This allows for consistent handling of both types of messages in _handleExternalMessage(). Having this step occur as a separate call frame also allows us to easily revert the contract deployment in the event that the code is unsafe."},"simulateMessage((uint256,uint256,uint8,address,address,uint256,bytes),address,uint256,address)":{notice:"Unreachable helper function for simulating eth_calls with an OVM message context. This function will throw an exception in all cases other than when used as a custom entrypoint in L2 Geth to simulate eth_call."}},version:1},storageLayout:{storage:[{astId:15303,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15296"},{astId:6671,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmSafetyChecker",offset:0,slot:"1",type:"t_contract(iOVM_SafetyChecker)13768"},{astId:6673,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmStateManager",offset:0,slot:"2",type:"t_contract(iOVM_StateManager)14000"},{astId:6675,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"gasMeterConfig",offset:0,slot:"3",type:"t_struct(GasMeterConfig)13517_storage"},{astId:6677,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"globalContext",offset:0,slot:"7",type:"t_struct(GlobalContext)13520_storage"},{astId:6679,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"transactionContext",offset:0,slot:"8",type:"t_struct(TransactionContext)13533_storage"},{astId:6681,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"messageContext",offset:0,slot:"14",type:"t_struct(MessageContext)13545_storage"},{astId:6683,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"transactionRecord",offset:0,slot:"18",type:"t_struct(TransactionRecord)13536_storage"},{astId:6685,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"messageRecord",offset:0,slot:"19",type:"t_struct(MessageRecord)13548_storage"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},t_bool:{encoding:"inplace",label:"bool",numberOfBytes:"1"},"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"},"t_contract(iOVM_SafetyChecker)13768":{encoding:"inplace",label:"contract iOVM_SafetyChecker",numberOfBytes:"20"},"t_contract(iOVM_StateManager)14000":{encoding:"inplace",label:"contract iOVM_StateManager",numberOfBytes:"20"},"t_enum(QueueOrigin)14880":{encoding:"inplace",label:"enum Lib_OVMCodec.QueueOrigin",numberOfBytes:"1"},"t_struct(GasMeterConfig)13517_storage":{encoding:"inplace",label:"struct iOVM_ExecutionManager.GasMeterConfig",members:[{astId:13510,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"minTransactionGasLimit",offset:0,slot:"0",type:"t_uint256"},{astId:13512,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"maxTransactionGasLimit",offset:0,slot:"1",type:"t_uint256"},{astId:13514,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"maxGasPerQueuePerEpoch",offset:0,slot:"2",type:"t_uint256"},{astId:13516,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"secondsPerEpoch",offset:0,slot:"3",type:"t_uint256"}],numberOfBytes:"128"},"t_struct(GlobalContext)13520_storage":{encoding:"inplace",label:"struct iOVM_ExecutionManager.GlobalContext",members:[{astId:13519,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmCHAINID",offset:0,slot:"0",type:"t_uint256"}],numberOfBytes:"32"},"t_struct(MessageContext)13545_storage":{encoding:"inplace",label:"struct iOVM_ExecutionManager.MessageContext",members:[{astId:13538,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmCALLER",offset:0,slot:"0",type:"t_address"},{astId:13540,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmADDRESS",offset:0,slot:"1",type:"t_address"},{astId:13542,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmCALLVALUE",offset:0,slot:"2",type:"t_uint256"},{astId:13544,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"isStatic",offset:0,slot:"3",type:"t_bool"}],numberOfBytes:"128"},"t_struct(MessageRecord)13548_storage":{encoding:"inplace",label:"struct iOVM_ExecutionManager.MessageRecord",members:[{astId:13547,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"nuisanceGasLeft",offset:0,slot:"0",type:"t_uint256"}],numberOfBytes:"32"},"t_struct(TransactionContext)13533_storage":{encoding:"inplace",label:"struct iOVM_ExecutionManager.TransactionContext",members:[{astId:13522,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmL1QUEUEORIGIN",offset:0,slot:"0",type:"t_enum(QueueOrigin)14880"},{astId:13524,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmTIMESTAMP",offset:0,slot:"1",type:"t_uint256"},{astId:13526,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmNUMBER",offset:0,slot:"2",type:"t_uint256"},{astId:13528,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmGASLIMIT",offset:0,slot:"3",type:"t_uint256"},{astId:13530,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmTXGASLIMIT",offset:0,slot:"4",type:"t_uint256"},{astId:13532,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmL1TXORIGIN",offset:0,slot:"5",type:"t_address"}],numberOfBytes:"192"},"t_struct(TransactionRecord)13536_storage":{encoding:"inplace",label:"struct iOVM_ExecutionManager.TransactionRecord",members:[{astId:13535,contract:"contracts/optimistic-ethereum/OVM/execution/OVM_ExecutionManager.sol:OVM_ExecutionManager",label:"ovmGasRefund",offset:0,slot:"0",type:"t_uint256"}],numberOfBytes:"32"},t_uint256:{encoding:"inplace",label:"uint256",numberOfBytes:"32"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_ExecutionManager.json"}],[353,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0x042065416C5c665dc196076745326Af3Cd840D15",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"_preStateRootIndex",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"_transactionHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"_who",type:"address"}],name:"FraudProofFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"_preStateRootIndex",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"_transactionHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"_who",type:"address"}],name:"FraudProofInitialized",type:"event"},{inputs:[{internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_preStateRootBatchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"_preStateRootProof",type:"tuple"},{internalType:"bytes32",name:"_txHash",type:"bytes32"},{internalType:"bytes32",name:"_postStateRoot",type:"bytes32"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_postStateRootBatchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"_postStateRootProof",type:"tuple"}],name:"finalizeFraudVerification",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{internalType:"bytes32",name:"_txHash",type:"bytes32"}],name:"getStateTransitioner",outputs:[{internalType:"contract iOVM_StateTransitioner",name:"_transitioner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_preStateRootBatchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"_preStateRootProof",type:"tuple"},{components:[{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"enum Lib_OVMCodec.QueueOrigin",name:"l1QueueOrigin",type:"uint8"},{internalType:"address",name:"l1TxOrigin",type:"address"},{internalType:"address",name:"entrypoint",type:"address"},{internalType:"uint256",name:"gasLimit",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Lib_OVMCodec.Transaction",name:"_transaction",type:"tuple"},{components:[{internalType:"bool",name:"isSequenced",type:"bool"},{internalType:"uint256",name:"queueIndex",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes",name:"txData",type:"bytes"}],internalType:"struct Lib_OVMCodec.TransactionChainElement",name:"_txChainElement",type:"tuple"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_transactionBatchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"_transactionProof",type:"tuple"}],name:"initializeFraudVerification",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],transactionHash:"0xb342bc1baf22f8ff0264dc6b9bc6425d76d8798e9f811ce1dbd4830cbc1c1329",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0x042065416C5c665dc196076745326Af3Cd840D15",transactionIndex:134,gasUsed:"1386998",logsBloom:"0xblockHash:"0x81588e4753038f4b6f1ef49a19f520d45e6d294c0d12420ba3b06e358ec25578",transactionHash:"0xb342bc1baf22f8ff0264dc6b9bc6425d76d8798e9f811ce1dbd4830cbc1c1329",logs:[],blockNumber:12686765,cumulativeGasUsed:"12675150",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F"],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"_preStateRootIndex","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_transactionHash","type":"bytes32"},{"indexed":false,"internalType":"address","name":"_who","type":"address"}],"name":"FraudProofFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"_preStateRootIndex","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_transactionHash","type":"bytes32"},{"indexed":false,"internalType":"address","name":"_who","type":"address"}],"name":"FraudProofInitialized","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_preStateRootBatchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"_preStateRootProof","type":"tuple"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"bytes32","name":"_postStateRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_postStateRootBatchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"_postStateRootProof","type":"tuple"}],"name":"finalizeFraudVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"}],"name":"getStateTransitioner","outputs":[{"internalType":"contract iOVM_StateTransitioner","name":"_transitioner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_preStateRootBatchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"_preStateRootProof","type":"tuple"},{"components":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"enum Lib_OVMCodec.QueueOrigin","name":"l1QueueOrigin","type":"uint8"},{"internalType":"address","name":"l1TxOrigin","type":"address"},{"internalType":"address","name":"entrypoint","type":"address"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Lib_OVMCodec.Transaction","name":"_transaction","type":"tuple"},{"components":[{"internalType":"bool","name":"isSequenced","type":"bool"},{"internalType":"uint256","name":"queueIndex","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes","name":"txData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.TransactionChainElement","name":"_txChainElement","type":"tuple"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_transactionBatchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"_transactionProof","type":"tuple"}],"name":"initializeFraudVerification","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The Fraud Verifier contract coordinates the entire fraud proof verification process. If the fraud proof was successful it prunes any state batches from State Commitment Chain which were published after the fraudulent state root. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"constructor":{"params":{"_libAddressManager":"Address of the Address Manager."}},"finalizeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes32,bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{"params":{"_postStateRoot":"State root after the fraudulent transaction.","_postStateRootBatchHeader":"Batch header for the provided post-state root.","_postStateRootProof":"Inclusion proof for the provided post-state root.","_preStateRoot":"State root before the fraudulent transaction.","_preStateRootBatchHeader":"Batch header for the provided pre-state root.","_preStateRootProof":"Inclusion proof for the provided pre-state root.","_txHash":"The transaction for the state root"}},"getStateTransitioner(bytes32,bytes32)":{"params":{"_preStateRoot":"State root to query a transitioner for."},"returns":{"_transitioner":"Corresponding state transitioner contract."}},"initializeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),(uint256,uint256,uint8,address,address,uint256,bytes),(bool,uint256,uint256,uint256,bytes),(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{"params":{"_preStateRoot":"State root before the fraudulent transaction.","_preStateRootBatchHeader":"Batch header for the provided pre-state root.","_preStateRootProof":"Inclusion proof for the provided pre-state root.","_transaction":"OVM transaction claimed to be fraudulent.","_transactionBatchHeader":"Batch header for the provided transaction.","_transactionProof":"Inclusion proof for the provided transaction.","_txChainElement":"OVM transaction chain element."}},"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}}},"title":"OVM_FraudVerifier","version":1},"userdoc":{"kind":"user","methods":{"finalizeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes32,bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{"notice":"Finalizes the fraud verification process."},"getStateTransitioner(bytes32,bytes32)":{"notice":"Retrieves the state transitioner for a given root."},"initializeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),(uint256,uint256,uint8,address,address,uint256,bytes),(bool,uint256,uint256,uint256,bytes),(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{"notice":"Begins the fraud verification process."},"resolve(string)":{"notice":"Resolves the address associated with a given name."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/verification/OVM_FraudVerifier.sol":"OVM_FraudVerifier"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/OVM/verification/Abs_FraudContributor.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\nimport { iOVM_BondManager } from \\"../../iOVM/verification/iOVM_BondManager.sol\\";\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\n\\n/// Minimal contract to be inherited by contracts consumed by users that provide\\n/// data for fraud proofs\\nabstract contract Abs_FraudContributor is Lib_AddressResolver {\\n    /// Decorate your functions with this modifier to store how much total gas was\\n    /// consumed by the sender, to reward users fairly\\n    modifier contributesToFraudProof(bytes32 preStateRoot, bytes32 txHash) {\\n        uint256 startGas = gasleft();\\n        _;\\n        uint256 gasSpent = startGas - gasleft();\\n        iOVM_BondManager(resolve(\'OVM_BondManager\')).recordGasSpent(preStateRoot, txHash, msg.sender, gasSpent);\\n    }\\n}\\n","keccak256":"0x6c27d089a297103cb93b30f7649ab68691cc6b948c315f1037e5de1fe9bf5903","license":"MIT"},"contracts/optimistic-ethereum/OVM/verification/OVM_FraudVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_FraudVerifier } from \\"../../iOVM/verification/iOVM_FraudVerifier.sol\\";\\nimport { iOVM_StateTransitioner } from \\"../../iOVM/verification/iOVM_StateTransitioner.sol\\";\\nimport { iOVM_StateTransitionerFactory } from \\"../../iOVM/verification/iOVM_StateTransitionerFactory.sol\\";\\nimport { iOVM_BondManager } from \\"../../iOVM/verification/iOVM_BondManager.sol\\";\\nimport { iOVM_StateCommitmentChain } from \\"../../iOVM/chain/iOVM_StateCommitmentChain.sol\\";\\nimport { iOVM_CanonicalTransactionChain } from \\"../../iOVM/chain/iOVM_CanonicalTransactionChain.sol\\";\\n\\n/* Contract Imports */\\nimport { Abs_FraudContributor } from \\"./Abs_FraudContributor.sol\\";\\n\\n\\n\\n/**\\n * @title OVM_FraudVerifier\\n * @dev The Fraud Verifier contract coordinates the entire fraud proof verification process.\\n * If the fraud proof was successful it prunes any state batches from State Commitment Chain\\n * which were published after the fraudulent state root.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_FraudVerifier is Lib_AddressResolver, Abs_FraudContributor, iOVM_FraudVerifier {\\n\\n    /*******************************************\\n     * Contract Variables: Internal Accounting *\\n     *******************************************/\\n\\n    mapping (bytes32 => iOVM_StateTransitioner) internal transitioners;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Address Manager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {}\\n\\n\\n    /***************************************\\n     * Public Functions: Transition Status *\\n     ***************************************/\\n\\n    /**\\n     * Retrieves the state transitioner for a given root.\\n     * @param _preStateRoot State root to query a transitioner for.\\n     * @return _transitioner Corresponding state transitioner contract.\\n     */\\n    function getStateTransitioner(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            iOVM_StateTransitioner _transitioner\\n        )\\n    {\\n        return transitioners[keccak256(abi.encodePacked(_preStateRoot, _txHash))];\\n    }\\n\\n\\n    /****************************************\\n     * Public Functions: Fraud Verification *\\n     ****************************************/\\n\\n    /**\\n     * Begins the fraud verification process.\\n     * @param _preStateRoot State root before the fraudulent transaction.\\n     * @param _preStateRootBatchHeader Batch header for the provided pre-state root.\\n     * @param _preStateRootProof Inclusion proof for the provided pre-state root.\\n     * @param _transaction OVM transaction claimed to be fraudulent.\\n     * @param _txChainElement OVM transaction chain element.\\n     * @param _transactionBatchHeader Batch header for the provided transaction.\\n     * @param _transactionProof Inclusion proof for the provided transaction.\\n     */\\n    function initializeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader memory _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _preStateRootProof,\\n        Lib_OVMCodec.Transaction memory _transaction,\\n        Lib_OVMCodec.TransactionChainElement memory _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader memory _transactionBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _transactionProof\\n    )\\n        override\\n        public\\n        contributesToFraudProof(_preStateRoot, Lib_OVMCodec.hashTransaction(_transaction))\\n    {\\n        bytes32 _txHash = Lib_OVMCodec.hashTransaction(_transaction);\\n\\n        if (_hasStateTransitioner(_preStateRoot, _txHash)) {\\n            return;\\n        }\\n\\n        iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(resolve(\\"OVM_StateCommitmentChain\\"));\\n        iOVM_CanonicalTransactionChain ovmCanonicalTransactionChain = iOVM_CanonicalTransactionChain(resolve(\\"OVM_CanonicalTransactionChain\\"));\\n\\n        require(\\n            ovmStateCommitmentChain.verifyStateCommitment(\\n                _preStateRoot,\\n                _preStateRootBatchHeader,\\n                _preStateRootProof\\n            ),\\n            \\"Invalid pre-state root inclusion proof.\\"\\n        );\\n\\n        require(\\n            ovmCanonicalTransactionChain.verifyTransaction(\\n                _transaction,\\n                _txChainElement,\\n                _transactionBatchHeader,\\n                _transactionProof\\n            ),\\n            \\"Invalid transaction inclusion proof.\\"\\n        );\\n\\n        require (\\n            _preStateRootBatchHeader.prevTotalElements + _preStateRootProof.index + 1 == _transactionBatchHeader.prevTotalElements + _transactionProof.index,\\n            \\"Pre-state root global index must equal to the transaction root global index.\\"\\n        );\\n\\n        _deployTransitioner(_preStateRoot, _txHash, _preStateRootProof.index);\\n\\n        emit FraudProofInitialized(\\n            _preStateRoot,\\n            _preStateRootProof.index,\\n            _txHash,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * Finalizes the fraud verification process.\\n     * @param _preStateRoot State root before the fraudulent transaction.\\n     * @param _preStateRootBatchHeader Batch header for the provided pre-state root.\\n     * @param _preStateRootProof Inclusion proof for the provided pre-state root.\\n     * @param _txHash The transaction for the state root\\n     * @param _postStateRoot State root after the fraudulent transaction.\\n     * @param _postStateRootBatchHeader Batch header for the provided post-state root.\\n     * @param _postStateRootProof Inclusion proof for the provided post-state root.\\n     */\\n    function finalizeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader memory _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _preStateRootProof,\\n        bytes32 _txHash,\\n        bytes32 _postStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader memory _postStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _postStateRootProof\\n    )\\n        override\\n        public\\n        contributesToFraudProof(_preStateRoot, _txHash)\\n    {\\n        iOVM_StateTransitioner transitioner = getStateTransitioner(_preStateRoot, _txHash);\\n        iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(resolve(\\"OVM_StateCommitmentChain\\"));\\n\\n        require(\\n            transitioner.isComplete() == true,\\n            \\"State transition process must be completed prior to finalization.\\"\\n        );\\n\\n        require (\\n            _postStateRootBatchHeader.prevTotalElements + _postStateRootProof.index == _preStateRootBatchHeader.prevTotalElements + _preStateRootProof.index + 1,\\n            \\"Post-state root global index must equal to the pre state root global index plus one.\\"\\n        );\\n\\n        require(\\n            ovmStateCommitmentChain.verifyStateCommitment(\\n                _preStateRoot,\\n                _preStateRootBatchHeader,\\n                _preStateRootProof\\n            ),\\n            \\"Invalid pre-state root inclusion proof.\\"\\n        );\\n\\n        require(\\n            ovmStateCommitmentChain.verifyStateCommitment(\\n                _postStateRoot,\\n                _postStateRootBatchHeader,\\n                _postStateRootProof\\n            ),\\n            \\"Invalid post-state root inclusion proof.\\"\\n        );\\n\\n        // If the post state root did not match, then there was fraud and we should delete the batch\\n        require(\\n            _postStateRoot != transitioner.getPostStateRoot(),\\n            \\"State transition has not been proven fraudulent.\\"\\n        );\\n\\n        _cancelStateTransition(_postStateRootBatchHeader, _preStateRoot);\\n\\n        // TEMPORARY: Remove the transitioner; for minnet.\\n        transitioners[keccak256(abi.encodePacked(_preStateRoot, _txHash))] = iOVM_StateTransitioner(0x0000000000000000000000000000000000000000);\\n\\n        emit FraudProofFinalized(\\n            _preStateRoot,\\n            _preStateRootProof.index,\\n            _txHash,\\n            msg.sender\\n        );\\n    }\\n\\n\\n    /************************************\\n     * Internal Functions: Verification *\\n     ************************************/\\n\\n    /**\\n     * Checks whether a transitioner already exists for a given pre-state root.\\n     * @param _preStateRoot Pre-state root to check.\\n     * @return _exists Whether or not we already have a transitioner for the root.\\n     */\\n    function _hasStateTransitioner(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash\\n    )\\n        internal\\n        view\\n        returns (\\n            bool _exists\\n        )\\n    {\\n        return address(getStateTransitioner(_preStateRoot, _txHash)) != address(0);\\n    }\\n\\n    /**\\n     * Deploys a new state transitioner.\\n     * @param _preStateRoot Pre-state root to initialize the transitioner with.\\n     * @param _txHash Hash of the transaction this transitioner will execute.\\n     * @param _stateTransitionIndex Index of the transaction in the chain.\\n     */\\n    function _deployTransitioner(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash,\\n        uint256 _stateTransitionIndex\\n    )\\n        internal\\n    {\\n        transitioners[keccak256(abi.encodePacked(_preStateRoot, _txHash))] = iOVM_StateTransitionerFactory(\\n            resolve(\\"OVM_StateTransitionerFactory\\")\\n        ).create(\\n            address(libAddressManager),\\n            _stateTransitionIndex,\\n            _preStateRoot,\\n            _txHash\\n        );\\n    }\\n\\n    /**\\n     * Removes a state transition from the state commitment chain.\\n     * @param _postStateRootBatchHeader Header for the post-state root.\\n     * @param _preStateRoot Pre-state root hash.\\n     */\\n    function _cancelStateTransition(\\n        Lib_OVMCodec.ChainBatchHeader memory _postStateRootBatchHeader,\\n        bytes32 _preStateRoot\\n    )\\n        internal\\n    {\\n        iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(resolve(\\"OVM_StateCommitmentChain\\"));\\n        iOVM_BondManager ovmBondManager = iOVM_BondManager(resolve(\\"OVM_BondManager\\"));\\n\\n        // Delete the state batch.\\n        ovmStateCommitmentChain.deleteStateBatch(\\n            _postStateRootBatchHeader\\n        );\\n\\n        // Get the timestamp and publisher for that block.\\n        (uint256 timestamp, address publisher) = abi.decode(_postStateRootBatchHeader.extraData, (uint256, address));\\n\\n        // Slash the bonds at the bond manager.\\n        ovmBondManager.finalize(\\n            _preStateRoot,\\n            publisher,\\n            timestamp\\n        );\\n    }\\n}\\n","keccak256":"0x879cef57019254ad958a75db64f0b58eb0a6fcf74f386ed958f75384b860dd35","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_CanonicalTransactionChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_ChainStorageContainer } from \\"./iOVM_ChainStorageContainer.sol\\";\\n\\n/**\\n * @title iOVM_CanonicalTransactionChain\\n */\\ninterface iOVM_CanonicalTransactionChain {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event TransactionEnqueued(\\n        address _l1TxOrigin,\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes _data,\\n        uint256 _queueIndex,\\n        uint256 _timestamp\\n    );\\n\\n    event QueueBatchAppended(\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event SequencerBatchAppended(\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event TransactionBatchAppended(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct BatchContext {\\n        uint256 numSequencedTransactions;\\n        uint256 numSubsequentQueueTransactions;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n\\n    /**\\n     * Accesses the batch storage container.\\n     * @return Reference to the batch storage container.\\n     */\\n    function batches()\\n        external\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        );\\n\\n    /**\\n     * Accesses the queue storage container.\\n     * @return Reference to the queue storage container.\\n     */\\n    function queue()\\n        external\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        );\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements()\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches()\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Returns the index of the next element to be enqueued.\\n     * @return Index for the next queue element.\\n     */\\n    function getNextQueueIndex()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Gets the queue element at a particular index.\\n     * @param _index Index of the queue element to access.\\n     * @return _element Queue element at the given index.\\n     */\\n    function getQueueElement(\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            Lib_OVMCodec.QueueElement memory _element\\n        );\\n\\n    /**\\n     * Returns the timestamp of the last transaction.\\n     * @return Timestamp for the last transaction.\\n     */\\n    function getLastTimestamp()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Returns the blocknumber of the last transaction.\\n     * @return Blocknumber for the last transaction.\\n     */\\n    function getLastBlockNumber()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Get the number of queue elements which have not yet been included.\\n     * @return Number of pending queue elements.\\n     */\\n    function getNumPendingQueueElements()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Retrieves the length of the queue, including\\n     * both pending and canonical transactions.\\n     * @return Length of the queue.\\n     */\\n    function getQueueLength()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n\\n    /**\\n     * Adds a transaction to the queue.\\n     * @param _target Target contract to send the transaction to.\\n     * @param _gasLimit Gas limit for the given transaction.\\n     * @param _data Transaction data.\\n     */\\n    function enqueue(\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    )\\n        external;\\n\\n    /**\\n     * Appends a given number of queued transactions as a single batch.\\n     * @param _numQueuedTransactions Number of transactions to append.\\n     */\\n    function appendQueueBatch(\\n        uint256 _numQueuedTransactions\\n    )\\n        external;\\n\\n    /**\\n     * Allows the sequencer to append a batch of transactions.\\n     * @dev This function uses a custom encoding scheme for efficiency reasons.\\n     * .param _shouldStartAtElement Specific batch we expect to start appending to.\\n     * .param _totalElementsToAppend Total number of batch elements we expect to append.\\n     * .param _contexts Array of batch contexts.\\n     * .param _transactionDataFields Array of raw transaction data.\\n     */\\n    function appendSequencerBatch(\\n        // uint40 _shouldStartAtElement,\\n        // uint24 _totalElementsToAppend,\\n        // BatchContext[] _contexts,\\n        // bytes[] _transactionDataFields\\n    )\\n        external;\\n\\n    /**\\n     * Verifies whether a transaction is included in the chain.\\n     * @param _transaction Transaction to verify.\\n     * @param _txChainElement Transaction chain element corresponding to the transaction.\\n     * @param _batchHeader Header of the batch the transaction was included in.\\n     * @param _inclusionProof Inclusion proof for the provided transaction chain element.\\n     * @return True if the transaction exists in the CTC, false if not.\\n     */\\n    function verifyTransaction(\\n        Lib_OVMCodec.Transaction memory _transaction,\\n        Lib_OVMCodec.TransactionChainElement memory _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _inclusionProof\\n    )\\n        external\\n        view\\n        returns (\\n            bool\\n        );\\n}\\n","keccak256":"0xb5e55488a1982841c07cdf5ff475da4789596f111dd48f01b1918ee4c775cf3a","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_ChainStorageContainer.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_ChainStorageContainer\\n */\\ninterface iOVM_ChainStorageContainer {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the container\'s global metadata field. We\'re using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadata(\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves the container\'s global metadata field.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadata()\\n        external\\n        view\\n        returns (\\n            bytes27\\n        );\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @return Number of objects in the container.\\n     */\\n    function length()\\n        external\\n        view\\n        returns (\\n            uint256\\n        );\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function push(\\n        bytes32 _object\\n    )\\n        external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we\'ll need to touch the \\"length\\" storage slot anyway, which also contains the global\\n     * metadata (it\'s an optimization).\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function push(\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves an object from the container.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function get(\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32\\n        );\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusive(\\n        uint256 _index\\n    )\\n        external;\\n\\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusive(\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n}\\n","keccak256":"0x180b9c347e20f1a6efa553b0f2b9a59aebceda92a7484ae6fca4da2bf1d960c3","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_StateCommitmentChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateCommitmentChain\\n */\\ninterface iOVM_StateCommitmentChain {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event StateBatchAppended(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n    event StateBatchDeleted(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements()\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches()\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Retrieves the timestamp of the last batch submitted by the sequencer.\\n     * @return _lastSequencerTimestamp Last sequencer batch timestamp.\\n     */\\n    function getLastSequencerTimestamp()\\n        external\\n        view\\n        returns (\\n            uint256 _lastSequencerTimestamp\\n        );\\n\\n    /**\\n     * Appends a batch of state roots to the chain.\\n     * @param _batch Batch of state roots.\\n     * @param _shouldStartAtElement Index of the element at which this batch should start.\\n     */\\n    function appendStateBatch(\\n        bytes32[] calldata _batch,\\n        uint256 _shouldStartAtElement\\n    )\\n        external;\\n\\n    /**\\n     * Deletes all state roots after (and including) a given batch.\\n     * @param _batchHeader Header of the batch to start deleting from.\\n     */\\n    function deleteStateBatch(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external;\\n\\n    /**\\n     * Verifies a batch inclusion proof.\\n     * @param _element Hash of the element to verify a proof for.\\n     * @param _batchHeader Header of the batch in which the element was included.\\n     * @param _proof Merkle inclusion proof for the element.\\n     */\\n    function verifyStateCommitment(\\n        bytes32 _element,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _proof\\n    )\\n        external\\n        view\\n        returns (\\n            bool _verified\\n        );\\n\\n    /**\\n     * Checks whether a given batch is still inside its fraud proof window.\\n     * @param _batchHeader Header of the batch to check.\\n     * @return _inside Whether or not the batch is inside the fraud proof window.\\n     */\\n    function insideFraudProofWindow(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external\\n        view\\n        returns (\\n            bool _inside\\n        );\\n}\\n","keccak256":"0x6646d6ff392b81aab52a7a277e91540819464751de0af5afd1962094b2e92448","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_BondManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\ninterface ERC20 {\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n}\\n\\n/// All the errors which may be encountered on the bond manager\\nlibrary Errors {\\n    string constant ERC20_ERR = \\"BondManager: Could not post bond\\";\\n    string constant ALREADY_FINALIZED = \\"BondManager: Fraud proof for this pre-state root has already been finalized\\";\\n    string constant SLASHED = \\"BondManager: Cannot finalize withdrawal, you probably got slashed\\";\\n    string constant WRONG_STATE = \\"BondManager: Wrong bond state for proposer\\";\\n    string constant CANNOT_CLAIM = \\"BondManager: Cannot claim yet. Dispute must be finalized first\\";\\n\\n    string constant WITHDRAWAL_PENDING = \\"BondManager: Withdrawal already pending\\";\\n    string constant TOO_EARLY = \\"BondManager: Too early to finalize your withdrawal\\";\\n\\n    string constant ONLY_TRANSITIONER = \\"BondManager: Only the transitioner for this pre-state root may call this function\\";\\n    string constant ONLY_FRAUD_VERIFIER = \\"BondManager: Only the fraud verifier may call this function\\";\\n    string constant ONLY_STATE_COMMITMENT_CHAIN = \\"BondManager: Only the state commitment chain may call this function\\";\\n    string constant WAIT_FOR_DISPUTES = \\"BondManager: Wait for other potential disputes\\";\\n}\\n\\n/**\\n * @title iOVM_BondManager\\n */\\ninterface iOVM_BondManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    /// The lifecycle of a proposer\'s bond\\n    enum State {\\n        // Before depositing or after getting slashed, a user is uncollateralized\\n        NOT_COLLATERALIZED,\\n        // After depositing, a user is collateralized\\n        COLLATERALIZED,\\n        // After a user has initiated a withdrawal\\n        WITHDRAWING\\n    }\\n\\n    /// A bond posted by a proposer\\n    struct Bond {\\n        // The user\'s state\\n        State state;\\n        // The timestamp at which a proposer issued their withdrawal request\\n        uint32 withdrawalTimestamp;\\n        // The time when the first disputed was initiated for this bond\\n        uint256 firstDisputeAt;\\n        // The earliest observed state root for this bond which has had fraud\\n        bytes32 earliestDisputedStateRoot;\\n        // The state root\'s timestamp\\n        uint256 earliestTimestamp;\\n    }\\n\\n    // Per pre-state root, store the number of state provisions that were made\\n    // and how many of these calls were made by each user. Payouts will then be\\n    // claimed by users proportionally for that dispute.\\n    struct Rewards {\\n        // Flag to check if rewards for a fraud proof are claimable\\n        bool canClaim;\\n        // Total number of `recordGasSpent` calls made\\n        uint256 total;\\n        // The gas spent by each user to provide witness data. The sum of all\\n        // values inside this map MUST be equal to the value of `total`\\n        mapping(address => uint256) gasSpent;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function recordGasSpent(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash,\\n        address _who,\\n        uint256 _gasSpent\\n    ) external;\\n\\n    function finalize(\\n        bytes32 _preStateRoot,\\n        address _publisher,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function deposit() external;\\n\\n    function startWithdrawal() external;\\n\\n    function finalizeWithdrawal() external;\\n\\n    function claim(\\n        address _who\\n    ) external;\\n\\n    function isCollateralized(\\n        address _who\\n    ) external view returns (bool);\\n\\n    function getGasSpent(\\n        bytes32 _preStateRoot,\\n        address _who\\n    ) external view returns (uint256);\\n}\\n","keccak256":"0x3c2a8a399487857158649db1896749d86e39cba545a8aeb2e2bb0f3bdfa7a5b1","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_FraudVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_StateTransitioner } from \\"./iOVM_StateTransitioner.sol\\";\\n\\n/**\\n * @title iOVM_FraudVerifier\\n */\\ninterface iOVM_FraudVerifier {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event FraudProofInitialized(\\n        bytes32 _preStateRoot,\\n        uint256 _preStateRootIndex,\\n        bytes32 _transactionHash,\\n        address _who\\n    );\\n\\n    event FraudProofFinalized(\\n        bytes32 _preStateRoot,\\n        uint256 _preStateRootIndex,\\n        bytes32 _transactionHash,\\n        address _who\\n    );\\n\\n\\n    /***************************************\\n     * Public Functions: Transition Status *\\n     ***************************************/\\n\\n    function getStateTransitioner(bytes32 _preStateRoot, bytes32 _txHash) external view returns (iOVM_StateTransitioner _transitioner);\\n\\n\\n    /****************************************\\n     * Public Functions: Fraud Verification *\\n     ****************************************/\\n\\n    function initializeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof,\\n        Lib_OVMCodec.Transaction calldata _transaction,\\n        Lib_OVMCodec.TransactionChainElement calldata _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader calldata _transactionBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _transactionProof\\n    ) external;\\n\\n    function finalizeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof,\\n        bytes32 _txHash,\\n        bytes32 _postStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _postStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _postStateRootProof\\n    ) external;\\n}\\n","keccak256":"0x5efd7bb18164bbd3e9d58379e8203fbf2a7ee802b1a48dff3ceaaec1523b1751","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_StateTransitioner.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateTransitioner\\n */\\ninterface iOVM_StateTransitioner {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AccountCommitted(\\n        address _address\\n    );\\n\\n    event ContractStorageCommitted(\\n        address _address,\\n        bytes32 _key\\n    );\\n\\n\\n    /**********************************\\n     * Public Functions: State Access *\\n     **********************************/\\n\\n    function getPreStateRoot() external view returns (bytes32 _preStateRoot);\\n    function getPostStateRoot() external view returns (bytes32 _postStateRoot);\\n    function isComplete() external view returns (bool _complete);\\n\\n\\n    /***********************************\\n     * Public Functions: Pre-Execution *\\n     ***********************************/\\n\\n    function proveContractState(\\n        address _ovmContractAddress,\\n        address _ethContractAddress,\\n        bytes calldata _stateTrieWitness\\n    ) external;\\n\\n    function proveStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes calldata _storageTrieWitness\\n    ) external;\\n\\n\\n    /*******************************\\n     * Public Functions: Execution *\\n     *******************************/\\n\\n    function applyTransaction(\\n        Lib_OVMCodec.Transaction calldata _transaction\\n    ) external;\\n\\n\\n    /************************************\\n     * Public Functions: Post-Execution *\\n     ************************************/\\n\\n    function commitContractState(\\n        address _ovmContractAddress,\\n        bytes calldata _stateTrieWitness\\n    ) external;\\n\\n    function commitStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes calldata _storageTrieWitness\\n    ) external;\\n\\n\\n    /**********************************\\n     * Public Functions: Finalization *\\n     **********************************/\\n\\n    function completeTransition() external;\\n}\\n","keccak256":"0x3d044ac0a3bb6ad3d529f904b3191117511f9c379678ca03010e1ebdfcb5c34b","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_StateTransitionerFactory.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Contract Imports */\\nimport { iOVM_StateTransitioner } from \\"./iOVM_StateTransitioner.sol\\";\\n\\n/**\\n * @title iOVM_StateTransitionerFactory\\n */\\ninterface iOVM_StateTransitionerFactory {\\n\\n    /***************************************\\n     * Public Functions: Contract Creation *\\n     ***************************************/\\n\\n    function create(\\n        address _proxyManager,\\n        uint256 _stateTransitionIndex,\\n        bytes32 _preStateRoot,\\n        bytes32 _transactionHash\\n    )\\n        external\\n        returns (\\n            iOVM_StateTransitioner _ovmStateTransitioner\\n        );\\n}\\n","keccak256":"0x60a0f0c104e4c0c7863268a93005762e8146d393f9cfddfdd6a2d6585c5911fc","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b5060405161184138038061184183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6117b0806100916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063299ca4781461005c578063461a44781461007a57806398d8867d1461008d578063a286ba1c146100a2578063b48ec820146100b5575b600080fd5b6100646100c8565b6040516100719190611306565b60405180910390f35b610064610088366004611101565b6100d7565b6100a061009b366004611029565b6101b5565b005b6100a06100b0366004610f64565b6104f4565b6100646100c3366004610f43565b6108bb565b6000546001600160a01b031681565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b8381101561013757818101518382015260200161011f565b50505050905090810190601f1680156101645780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561018157600080fd5b505afa158015610195573d6000803e3d6000fd5b505050506040513d60208110156101ab57600080fd5b505190505b919050565b866101bf8561090a565b60005a905060006101cf8861090a565b90506101db8b82610923565b156101e65750610432565b60006102216040518060400160405280601881526020017727ab26afa9ba30ba32a1b7b6b6b4ba36b2b73a21b430b4b760411b8152506100d7565b905060006102636040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e0000008152506100d7565b9050816001600160a01b0316634d69ee578e8e8e6040518463ffffffff1660e01b81526004016102959392919061135f565b60206040518083038186803b1580156102ad57600080fd5b505afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190610f0f565b61030a5760405162461bcd60e51b8152600401610301906115e7565b60405180910390fd5b6040516326f2b4e760e11b81526001600160a01b03821690634de569ce9061033c908d908d908d908d90600401611641565b60206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190610f0f565b6103a85760405162461bcd60e51b815260040161030190611499565b86600001518860600151018b600001518d6060015101600101146103de5760405162461bcd60e51b815260040161030190611525565b6103ed8d848d60000151610942565b7f41a48bde2468fac6f670f39b66d7b91f311053e1f28eab9d75056546e6eaac958d8c6000015185336040516104269493929190611394565b60405180910390a15050505b60005a820390506104696040518060400160405280600f81526020016e27ab26afa137b73226b0b730b3b2b960891b8152506100d7565b6001600160a01b0316631e16e92f858533856040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b03168152602001828152602001945050505050600060405180830381600087803b1580156104cf57600080fd5b505af11580156104e3573d6000803e3d6000fd5b505050505050505050505050505050565b868460005a905060006105078b896108bb565b905060006105446040518060400160405280601881526020017727ab26afa9ba30ba32a1b7b6b6b4ba36b2b73a21b430b4b760411b8152506100d7565b9050816001600160a01b031663b2fa1c9e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b79190610f0f565b15156001146105d85760405162461bcd60e51b8152600401610301906113b8565b89600001518b606001510160010186600001518860600151011461060e5760405162461bcd60e51b81526004016103019061141f565b604051634d69ee5760e01b81526001600160a01b03821690634d69ee579061063e908f908f908f9060040161135f565b60206040518083038186803b15801561065657600080fd5b505afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610f0f565b6106aa5760405162461bcd60e51b8152600401610301906115e7565b604051634d69ee5760e01b81526001600160a01b03821690634d69ee57906106da908b908b908b9060040161135f565b60206040518083038186803b1580156106f257600080fd5b505afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190610f0f565b6107465760405162461bcd60e51b8152600401610301906114dd565b816001600160a01b031663c1c618b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190610f2b565b8814156107d65760405162461bcd60e51b815260040161030190611597565b6107e0878d610a6d565b6000600160008e8c6040516020016107f9929190611289565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f1e5fff3c23daf51ea67aaa3bbc738bcedaa98be5a5503f0e63a336a004b075b18c8b600001518b3360405161087a9493929190611394565b60405180910390a1505060005a820390506104696040518060400160405280600f81526020016e27ab26afa137b73226b0b730b3b2b960891b8152506100d7565b60006001600084846040516020016108d4929190611289565b60408051808303601f19018152918152815160209283012083529082019290925201600020546001600160a01b03169392505050565b600061091582610bc7565b805190602001209050919050565b60008061093084846108bb565b6001600160a01b031614159392505050565b6109806040518060400160405280601c81526020017f4f564d5f53746174655472616e736974696f6e6572466163746f7279000000008152506100d7565b600054604051631168a38160e11b81526001600160a01b03928316926322d14702926109b79291169085908890889060040161131a565b602060405180830381600087803b1580156109d157600080fd5b505af11580156109e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0991906110e5565b600160008585604051602001610a20929190611289565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b6000610aa86040518060400160405280601881526020017727ab26afa9ba30ba32a1b7b6b6b4ba36b2b73a21b430b4b760411b8152506100d7565b90506000610adc6040518060400160405280600f81526020016e27ab26afa137b73226b0b730b3b2b960891b8152506100d7565b604051632e38626b60e21b81529091506001600160a01b0383169063b8e189ac90610b0b90879060040161162e565b600060405180830381600087803b158015610b2557600080fd5b505af1158015610b39573d6000803e3d6000fd5b505050506000808560800151806020019051810190610b58919061114f565b60405163abfbbe1360e01b815291935091506001600160a01b0384169063abfbbe1390610b8d90889085908790600401611340565b600060405180830381600087803b158015610ba757600080fd5b505af1158015610bbb573d6000803e3d6000fd5b50505050505050505050565b6060816000015182602001518360400151846060015185608001518660a001518760c00151604051602001610c029796959493929190611297565b6040516020818303038152906040529050919050565b600067ffffffffffffffff831115610c2c57fe5b610c3f601f8401601f1916602001611700565b9050828152838383011115610c5357600080fd5b828260208301376000602084830101529392505050565b80356101b081611754565b600082601f830112610c85578081fd5b610c9483833560208501610c18565b9392505050565b8035600281106101b057600080fd5b600060a08284031215610cbb578081fd5b60405160a0810167ffffffffffffffff8282108183111715610cd957fe5b81604052829350843583526020850135602084015260408501356040840152606085013560608401526080850135915080821115610d1657600080fd5b50610d2385828601610c75565b6080830152505092915050565b600060408284031215610d41578081fd5b6040516040810167ffffffffffffffff8282108183111715610d5f57fe5b8160405282935084358352602091508185013581811115610d7f57600080fd5b8501601f81018713610d9057600080fd5b803582811115610d9c57fe5b8381029250610dac848401611700565b8181528481019083860185850187018b1015610dc757600080fd5b600095505b83861015610dea578035835260019590950194918601918601610dcc565b5080868801525050505050505092915050565b600060a08284031215610e0e578081fd5b60405160a0810167ffffffffffffffff8282108183111715610e2c57fe5b8160405282935084359150610e408261176c565b8183526020850135602084015260408501356040840152606085013560608401526080850135915080821115610d1657600080fd5b600060e08284031215610e86578081fd5b610e9060e0611700565b90508135815260208201356020820152610eac60408301610c9b565b6040820152610ebd60608301610c6a565b6060820152610ece60808301610c6a565b608082015260a082013560a082015260c082013567ffffffffffffffff811115610ef757600080fd5b610f0384828501610c75565b60c08301525092915050565b600060208284031215610f20578081fd5b8151610c948161176c565b600060208284031215610f3c578081fd5b5051919050565b60008060408385031215610f55578081fd5b50508035926020909101359150565b600080600080600080600060e0888a031215610f7e578283fd5b87359650602088013567ffffffffffffffff80821115610f9c578485fd5b610fa88b838c01610caa565b975060408a0135915080821115610fbd578485fd5b610fc98b838c01610d30565b965060608a0135955060808a0135945060a08a0135915080821115610fec578384fd5b610ff88b838c01610caa565b935060c08a013591508082111561100d578283fd5b5061101a8a828b01610d30565b91505092959891949750929550565b600080600080600080600060e0888a031215611043578081fd5b87359650602088013567ffffffffffffffff80821115611061578283fd5b61106d8b838c01610caa565b975060408a0135915080821115611082578283fd5b61108e8b838c01610d30565b965060608a01359150808211156110a3578283fd5b6110af8b838c01610e75565b955060808a01359150808211156110c4578283fd5b6110d08b838c01610dfd565b945060a08a0135915080821115610fec578283fd5b6000602082840312156110f6578081fd5b8151610c9481611754565b600060208284031215611112578081fd5b813567ffffffffffffffff811115611128578182fd5b8201601f81018413611138578182fd5b61114784823560208401610c18565b949350505050565b60008060408385031215611161578182fd5b82519150602083015161117381611754565b809150509250929050565b6001600160a01b03169052565b600081518084526111a3816020860160208601611724565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261114760a085018261118b565b6000604083018251845260208084015160408287015282815180855260608801915083830194508592505b8083101561123f578451825293830193600192909201919083019061121f565b509695505050505050565b6000815115158352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261114760a085018261118b565b918252602082015260400190565b6000888252876020830152600287106112ac57fe5b8660f81b60408301526bffffffffffffffffffffffff19808760601b166041840152808660601b1660558401525083606983015282516112f3816089850160208701611724565b9190910160890198975050505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b9283526001600160a01b03919091166020830152604082015260600190565b60008482526060602083015261137860608301856111b7565b828103604084015261138a81856111f4565b9695505050505050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b60208082526041908201527f5374617465207472616e736974696f6e2070726f63657373206d75737420626560408201527f20636f6d706c65746564207072696f7220746f2066696e616c697a6174696f6e6060820152601760f91b608082015260a00190565b60208082526054908201527f506f73742d737461746520726f6f7420676c6f62616c20696e646578206d757360408201527f7420657175616c20746f207468652070726520737461746520726f6f7420676c60608201527337b130b61034b73232bc1038363ab99037b7329760611b608082015260a00190565b60208082526024908201527f496e76616c6964207472616e73616374696f6e20696e636c7573696f6e20707260408201526337b7b31760e11b606082015260800190565b60208082526028908201527f496e76616c696420706f73742d737461746520726f6f7420696e636c7573696f6040820152673710383937b7b31760c11b606082015260800190565b6020808252604c908201527f5072652d737461746520726f6f7420676c6f62616c20696e646578206d75737460408201527f20657175616c20746f20746865207472616e73616374696f6e20726f6f74206760608201526b3637b130b61034b73232bc1760a11b608082015260a00190565b60208082526030908201527f5374617465207472616e736974696f6e20686173206e6f74206265656e20707260408201526f37bb32b710333930bab23ab632b73a1760811b606082015260800190565b60208082526027908201527f496e76616c6964207072652d737461746520726f6f7420696e636c7573696f6e60408201526610383937b7b31760c91b606082015260800190565b600060208252610c9460208301846111b7565b60006080825285516080830152602086015160a083015260408601516002811061166757fe5b60c083015260608601516001600160a01b031660e0830152608086015161169261010084018261117e565b5060a086015161012083015260c086015160e06101408401526116b961016084018261118b565b905082810360208401526116cd818761124a565b905082810360408401526116e181866111b7565b905082810360608401526116f581856111f4565b979650505050505050565b60405181810167ffffffffffffffff8111828210171561171c57fe5b604052919050565b60005b8381101561173f578181015183820152602001611727565b8381111561174e576000848401525b50505050565b6001600160a01b038116811461176957600080fd5b50565b801515811461176957600080fdfea264697066735822122090fa94f972b734dd4c794ce3c199f593acb07d65d0fea3b0025bd8132b68bc7a64736f6c63430007060033",deployedBytecode:"",devdoc:{details:"The Fraud Verifier contract coordinates the entire fraud proof verification process. If the fraud proof was successful it prunes any state batches from State Commitment Chain which were published after the fraudulent state root. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{constructor:{params:{_libAddressManager:"Address of the Address Manager."}},"finalizeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes32,bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{params:{_postStateRoot:"State root after the fraudulent transaction.",_postStateRootBatchHeader:"Batch header for the provided post-state root.",_postStateRootProof:"Inclusion proof for the provided post-state root.",_preStateRoot:"State root before the fraudulent transaction.",_preStateRootBatchHeader:"Batch header for the provided pre-state root.",_preStateRootProof:"Inclusion proof for the provided pre-state root.",_txHash:"The transaction for the state root"}},"getStateTransitioner(bytes32,bytes32)":{params:{_preStateRoot:"State root to query a transitioner for."},returns:{_transitioner:"Corresponding state transitioner contract."}},"initializeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),(uint256,uint256,uint8,address,address,uint256,bytes),(bool,uint256,uint256,uint256,bytes),(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{params:{_preStateRoot:"State root before the fraudulent transaction.",_preStateRootBatchHeader:"Batch header for the provided pre-state root.",_preStateRootProof:"Inclusion proof for the provided pre-state root.",_transaction:"OVM transaction claimed to be fraudulent.",_transactionBatchHeader:"Batch header for the provided transaction.",_transactionProof:"Inclusion proof for the provided transaction.",_txChainElement:"OVM transaction chain element."}},"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}}},title:"OVM_FraudVerifier",version:1},userdoc:{kind:"user",methods:{"finalizeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes32,bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{notice:"Finalizes the fraud verification process."},"getStateTransitioner(bytes32,bytes32)":{notice:"Retrieves the state transitioner for a given root."},"initializeFraudVerification(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),(uint256,uint256,uint8,address,address,uint256,bytes),(bool,uint256,uint256,uint256,bytes),(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{notice:"Begins the fraud verification process."},"resolve(string)":{notice:"Resolves the address associated with a given name."}},version:1},storageLayout:{storage:[{astId:15303,contract:"contracts/optimistic-ethereum/OVM/verification/OVM_FraudVerifier.sol:OVM_FraudVerifier",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15296"},{astId:11750,contract:"contracts/optimistic-ethereum/OVM/verification/OVM_FraudVerifier.sol:OVM_FraudVerifier",label:"transitioners",offset:0,slot:"1",type:"t_mapping(t_bytes32,t_contract(iOVM_StateTransitioner)14378)"}],types:{t_bytes32:{encoding:"inplace",label:"bytes32",numberOfBytes:"32"},"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"},"t_contract(iOVM_StateTransitioner)14378":{encoding:"inplace",label:"contract iOVM_StateTransitioner",numberOfBytes:"20"},"t_mapping(t_bytes32,t_contract(iOVM_StateTransitioner)14378)":{encoding:"mapping",key:"t_bytes32",label:"mapping(bytes32 => contract iOVM_StateTransitioner)",numberOfBytes:"32",value:"t_contract(iOVM_StateTransitioner)14378"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_FraudVerifier.json"}],[354,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0xbfba066b5cA610Fe70AdCE45FcB622F945891bb0",abi:[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"msgHash",type:"bytes32"}],name:"FailedRelayedMessage",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"_xDomainCalldataHash",type:"bytes32"}],name:"MessageAllowed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"_xDomainCalldataHash",type:"bytes32"}],name:"MessageBlocked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"msgHash",type:"bytes32"}],name:"RelayedMessage",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes",name:"message",type:"bytes"}],name:"SentMessage",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[{internalType:"bytes32",name:"_xDomainCalldataHash",type:"bytes32"}],name:"allowMessage",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_xDomainCalldataHash",type:"bytes32"}],name:"blockMessage",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"blockedMessages",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_target",type:"address"},{internalType:"address",name:"_sender",type:"address"},{internalType:"bytes",name:"_message",type:"bytes"},{internalType:"uint256",name:"_messageNonce",type:"uint256"},{components:[{internalType:"bytes32",name:"stateRoot",type:"bytes32"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"stateRootBatchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"stateRootProof",type:"tuple"},{internalType:"bytes",name:"stateTrieWitness",type:"bytes"},{internalType:"bytes",name:"storageTrieWitness",type:"bytes"}],internalType:"struct iOVM_L1CrossDomainMessenger.L2MessageInclusionProof",name:"_proof",type:"tuple"}],name:"relayMessage",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"relayedMessages",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_target",type:"address"},{internalType:"address",name:"_sender",type:"address"},{internalType:"bytes",name:"_message",type:"bytes"},{internalType:"uint256",name:"_queueIndex",type:"uint256"},{internalType:"uint32",name:"_gasLimit",type:"uint32"}],name:"replayMessage",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_target",type:"address"},{internalType:"bytes",name:"_message",type:"bytes"},{internalType:"uint32",name:"_gasLimit",type:"uint32"}],name:"sendMessage",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"successfulMessages",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"xDomainMessageSender",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],transactionHash:"0x84fc9be2cd16a0b415aa2adfb9b1b4b787ff35855c09585c31c92f30c260faf2",receipt:{to:null,from:"0x32585BE48b9f45D107A933F992225a8606F6967a",contractAddress:"0xbfba066b5cA610Fe70AdCE45FcB622F945891bb0",transactionIndex:14,gasUsed:"2942659",logsBloom:"0xblockHash:"0x5d3cd377933c87b830233de40ce47d9eb941d8405959674bc5af4064802ebcce",transactionHash:"0x84fc9be2cd16a0b415aa2adfb9b1b4b787ff35855c09585c31c92f30c260faf2",logs:[],blockNumber:12705648,cumulativeGasUsed:"5355631",status:1,byzantium:!0},args:[],solcInputHash:"4532a57dbcb505a79ddf510df0371b5f",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"FailedRelayedMessage","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"_xDomainCalldataHash","type":"bytes32"}],"name":"MessageAllowed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"_xDomainCalldataHash","type":"bytes32"}],"name":"MessageBlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"msgHash","type":"bytes32"}],"name":"RelayedMessage","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"message","type":"bytes"}],"name":"SentMessage","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_xDomainCalldataHash","type":"bytes32"}],"name":"allowMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_xDomainCalldataHash","type":"bytes32"}],"name":"blockMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"blockedMessages","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_target","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"uint256","name":"_messageNonce","type":"uint256"},{"components":[{"internalType":"bytes32","name":"stateRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"stateRootBatchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"stateRootProof","type":"tuple"},{"internalType":"bytes","name":"stateTrieWitness","type":"bytes"},{"internalType":"bytes","name":"storageTrieWitness","type":"bytes"}],"internalType":"struct iOVM_L1CrossDomainMessenger.L2MessageInclusionProof","name":"_proof","type":"tuple"}],"name":"relayMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"relayedMessages","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_target","type":"address"},{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"uint256","name":"_queueIndex","type":"uint256"},{"internalType":"uint32","name":"_gasLimit","type":"uint32"}],"name":"replayMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_target","type":"address"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"uint32","name":"_gasLimit","type":"uint32"}],"name":"sendMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"successfulMessages","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"xDomainMessageSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The L1 Cross Domain Messenger contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract\'s replay function. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"allowMessage(bytes32)":{"params":{"_xDomainCalldataHash":"Hash of the message to block."}},"blockMessage(bytes32)":{"params":{"_xDomainCalldataHash":"Hash of the message to block."}},"initialize(address)":{"params":{"_libAddressManager":"Address of the Address Manager."}},"owner()":{"details":"Returns the address of the current owner."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"relayMessage(address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))":{"params":{"_message":"Message to send to the target.","_messageNonce":"Nonce for the provided message.","_proof":"Inclusion proof for the given message.","_sender":"Message sender address.","_target":"Target contract address."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"replayMessage(address,address,bytes,uint256,uint32)":{"params":{"_gasLimit":"Gas limit for the provided message.","_message":"Message to send to the target.","_queueIndex":"CTC Queue index for the message to replay.","_sender":"Original sender address.","_target":"Target contract address."}},"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}},"sendMessage(address,bytes,uint32)":{"params":{"_gasLimit":"Gas limit for the provided message.","_message":"Message to send to the target.","_target":"Target contract address."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"OVM_L1CrossDomainMessenger","version":1},"userdoc":{"kind":"user","methods":{"allowMessage(bytes32)":{"notice":"Allow a message."},"blockMessage(bytes32)":{"notice":"Block a message."},"constructor":{"notice":"This contract is intended to be behind a delegate proxy. We pass the zero address to the address resolver just to satisfy the constructor. We still need to set this value in initialize()."},"pause()":{"notice":"Pause relaying."},"relayMessage(address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))":{"notice":"Relays a cross domain message to a contract."},"replayMessage(address,address,bytes,uint256,uint32)":{"notice":"Replays a cross domain message to the target messenger."},"resolve(string)":{"notice":"Resolves the address associated with a given name."},"sendMessage(address,bytes,uint32)":{"notice":"Sends a cross domain message to the target messenger."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol":"OVM_L1CrossDomainMessenger"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/ContextUpgradeable.sol\\";\\nimport \\"../proxy/Initializable.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n","keccak256":"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5","license":"MIT"},"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\"../utils/AddressUpgradeable.sol\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\'t have a constructor, it\'s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\"Initializable: contract is already initialized\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n","keccak256":"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e","license":"MIT"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\"Address: insufficient balance\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\"\\");\\n        require(success, \\"Address: unable to send value, recipient may have reverted\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\"Address: low-level call failed\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\"Address: low-level call with value failed\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\"Address: insufficient balance for call\\");\\n        require(isContract(target), \\"Address: call to non-contract\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\"Address: low-level static call failed\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\"Address: static call to non-contract\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n","keccak256":"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6","license":"MIT"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\"../proxy/Initializable.sol\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n","keccak256":"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0","license":"MIT"},"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"./ContextUpgradeable.sol\\";\\nimport \\"../proxy/Initializable.sol\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\"Pausable: paused\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\"Pausable: not paused\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n","keccak256":"0x73bef0a5dec3efde8183c4858d90f683ed2771656c4329647b4d5b0f89498fd5","license":"MIT"},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\"../proxy/Initializable.sol\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\'s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\'s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\'s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\"ReentrancyGuard: reentrant call\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n","keccak256":"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e","license":"MIT"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_AddressResolver } from \\"../../../libraries/resolver/Lib_AddressResolver.sol\\";\\nimport { Lib_OVMCodec } from \\"../../../libraries/codec/Lib_OVMCodec.sol\\";\\nimport { Lib_AddressManager } from \\"../../../libraries/resolver/Lib_AddressManager.sol\\";\\nimport { Lib_SecureMerkleTrie } from \\"../../../libraries/trie/Lib_SecureMerkleTrie.sol\\";\\nimport { Lib_PredeployAddresses } from \\"../../../libraries/constants/Lib_PredeployAddresses.sol\\";\\nimport { Lib_CrossDomainUtils } from \\"../../../libraries/bridge/Lib_CrossDomainUtils.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_L1CrossDomainMessenger } from \\"../../../iOVM/bridge/messaging/iOVM_L1CrossDomainMessenger.sol\\";\\nimport { iOVM_CanonicalTransactionChain } from \\"../../../iOVM/chain/iOVM_CanonicalTransactionChain.sol\\";\\nimport { iOVM_StateCommitmentChain } from \\"../../../iOVM/chain/iOVM_StateCommitmentChain.sol\\";\\n\\n/* External Imports */\\nimport { OwnableUpgradeable } from \\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\";\\nimport { PausableUpgradeable } from \\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\";\\nimport { ReentrancyGuardUpgradeable } from \\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\";\\n\\n/**\\n * @title OVM_L1CrossDomainMessenger\\n * @dev The L1 Cross Domain Messenger contract sends messages from L1 to L2, and relays messages\\n * from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2\\n * epoch gas limit, it can be resubmitted via this contract\'s replay function.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_L1CrossDomainMessenger is\\n        iOVM_L1CrossDomainMessenger,\\n        Lib_AddressResolver,\\n        OwnableUpgradeable,\\n        PausableUpgradeable,\\n        ReentrancyGuardUpgradeable\\n{\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event MessageBlocked(\\n        bytes32 indexed _xDomainCalldataHash\\n    );\\n\\n    event MessageAllowed(\\n        bytes32 indexed _xDomainCalldataHash\\n    );\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    // The default x-domain message sender being set to a non-zero value makes\\n    // deployment a bit more expensive, but in exchange the refund on every call to\\n    // `relayMessage` by the L1 and L2 messengers will be higher.\\n    address internal constant DEFAULT_XDOMAIN_SENDER = 0x000000000000000000000000000000000000dEaD;\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n\\n    mapping (bytes32 => bool) public blockedMessages;\\n    mapping (bytes32 => bool) public relayedMessages;\\n    mapping (bytes32 => bool) public successfulMessages;\\n\\n    address internal xDomainMsgSender = DEFAULT_XDOMAIN_SENDER;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * This contract is intended to be behind a delegate proxy.\\n     * We pass the zero address to the address resolver just to satisfy the constructor.\\n     * We still need to set this value in initialize().\\n     */\\n    constructor()\\n        Lib_AddressResolver(address(0))\\n    {}\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Modifier to enforce that, if configured, only the OVM_L2MessageRelayer contract may\\n     * successfully call a method.\\n     */\\n    modifier onlyRelayer() {\\n        address relayer = resolve(\\"OVM_L2MessageRelayer\\");\\n        if (relayer != address(0)) {\\n            require(\\n                msg.sender == relayer,\\n                \\"Only OVM_L2MessageRelayer can relay L2-to-L1 messages.\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Address Manager.\\n     */\\n    function initialize(\\n        address _libAddressManager\\n    )\\n        public\\n        initializer\\n    {\\n        require(\\n            address(libAddressManager) == address(0),\\n            \\"L1CrossDomainMessenger already intialized.\\"\\n        );\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n        xDomainMsgSender = DEFAULT_XDOMAIN_SENDER;\\n\\n        // Initialize upgradable OZ contracts\\n        __Context_init_unchained(); // Context is a dependency for both Ownable and Pausable\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    /**\\n     * Pause relaying.\\n     */\\n    function pause()\\n        external\\n        onlyOwner\\n    {\\n        _pause();\\n    }\\n\\n    /**\\n     * Block a message.\\n     * @param _xDomainCalldataHash Hash of the message to block.\\n     */\\n    function blockMessage(\\n        bytes32 _xDomainCalldataHash\\n    )\\n        external\\n        onlyOwner\\n    {\\n        blockedMessages[_xDomainCalldataHash] = true;\\n        emit MessageBlocked(_xDomainCalldataHash);\\n    }\\n\\n    /**\\n     * Allow a message.\\n     * @param _xDomainCalldataHash Hash of the message to block.\\n     */\\n    function allowMessage(\\n        bytes32 _xDomainCalldataHash\\n    )\\n        external\\n        onlyOwner\\n    {\\n        blockedMessages[_xDomainCalldataHash] = false;\\n        emit MessageAllowed(_xDomainCalldataHash);\\n    }\\n\\n    function xDomainMessageSender()\\n        public\\n        override\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        require(xDomainMsgSender != DEFAULT_XDOMAIN_SENDER, \\"xDomainMessageSender is not set\\");\\n        return xDomainMsgSender;\\n    }\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes memory _message,\\n        uint32 _gasLimit\\n    )\\n        override\\n        public\\n    {\\n        address ovmCanonicalTransactionChain = resolve(\\"OVM_CanonicalTransactionChain\\");\\n        // Use the CTC queue length as nonce\\n        uint40 nonce = iOVM_CanonicalTransactionChain(ovmCanonicalTransactionChain).getQueueLength();\\n\\n        bytes memory xDomainCalldata = Lib_CrossDomainUtils.encodeXDomainCalldata(\\n            _target,\\n            msg.sender,\\n            _message,\\n            nonce\\n        );\\n\\n        address l2CrossDomainMessenger = resolve(\\"OVM_L2CrossDomainMessenger\\");\\n        _sendXDomainMessage(ovmCanonicalTransactionChain, l2CrossDomainMessenger, xDomainCalldata, _gasLimit);\\n        emit SentMessage(xDomainCalldata);\\n    }\\n\\n    /**\\n     * Relays a cross domain message to a contract.\\n     * @inheritdoc iOVM_L1CrossDomainMessenger\\n     */\\n    function relayMessage(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _messageNonce,\\n        L2MessageInclusionProof memory _proof\\n    )\\n        override\\n        public\\n        nonReentrant\\n        onlyRelayer\\n        whenNotPaused\\n    {\\n        bytes memory xDomainCalldata = Lib_CrossDomainUtils.encodeXDomainCalldata(\\n            _target,\\n            _sender,\\n            _message,\\n            _messageNonce\\n        );\\n\\n        require(\\n            _verifyXDomainMessage(\\n                xDomainCalldata,\\n                _proof\\n            ) == true,\\n            \\"Provided message could not be verified.\\"\\n        );\\n\\n        bytes32 xDomainCalldataHash = keccak256(xDomainCalldata);\\n\\n        require(\\n            successfulMessages[xDomainCalldataHash] == false,\\n            \\"Provided message has already been received.\\"\\n        );\\n\\n        require(\\n            blockedMessages[xDomainCalldataHash] == false,\\n            \\"Provided message has been blocked.\\"\\n        );\\n\\n        require(\\n            _target != resolve(\\"OVM_CanonicalTransactionChain\\"),\\n            \\"Cannot send L2->L1 messages to L1 system contracts.\\"\\n        );\\n\\n        xDomainMsgSender = _sender;\\n        (bool success, ) = _target.call(_message);\\n        xDomainMsgSender = DEFAULT_XDOMAIN_SENDER;\\n\\n        // Mark the message as received if the call was successful. Ensures that a message can be\\n        // relayed multiple times in the case that the call reverted.\\n        if (success == true) {\\n            successfulMessages[xDomainCalldataHash] = true;\\n            emit RelayedMessage(xDomainCalldataHash);\\n        } else {\\n            emit FailedRelayedMessage(xDomainCalldataHash);\\n        }\\n\\n        // Store an identifier that can be used to prove that the given message was relayed by some\\n        // user. Gives us an easy way to pay relayers for their work.\\n        bytes32 relayId = keccak256(\\n            abi.encodePacked(\\n                xDomainCalldata,\\n                msg.sender,\\n                block.number\\n            )\\n        );\\n        relayedMessages[relayId] = true;\\n    }\\n\\n    /**\\n     * Replays a cross domain message to the target messenger.\\n     * @inheritdoc iOVM_L1CrossDomainMessenger\\n     */\\n    function replayMessage(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _queueIndex,\\n        uint32 _gasLimit\\n    )\\n        override\\n        public\\n    {\\n        // Verify that the message is in the queue:\\n        address canonicalTransactionChain = resolve(\\"OVM_CanonicalTransactionChain\\");\\n        Lib_OVMCodec.QueueElement memory element = iOVM_CanonicalTransactionChain(canonicalTransactionChain).getQueueElement(_queueIndex);\\n\\n        address l2CrossDomainMessenger = resolve(\\"OVM_L2CrossDomainMessenger\\");\\n        // Compute the transactionHash\\n        bytes32 transactionHash = keccak256(\\n            abi.encode(\\n                address(this),\\n                l2CrossDomainMessenger,\\n                _gasLimit,\\n                _message\\n            )\\n        );\\n\\n        require(\\n            transactionHash == element.transactionHash,\\n            \\"Provided message has not been enqueued.\\"\\n        );\\n\\n        bytes memory xDomainCalldata = Lib_CrossDomainUtils.encodeXDomainCalldata(\\n            _target,\\n            _sender,\\n            _message,\\n            _queueIndex\\n        );\\n\\n        _sendXDomainMessage(canonicalTransactionChain, l2CrossDomainMessenger, xDomainCalldata, _gasLimit);\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Verifies that the given message is valid.\\n     * @param _xDomainCalldata Calldata to verify.\\n     * @param _proof Inclusion proof for the message.\\n     * @return Whether or not the provided message is valid.\\n     */\\n    function _verifyXDomainMessage(\\n        bytes memory _xDomainCalldata,\\n        L2MessageInclusionProof memory _proof\\n    )\\n        internal\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return (\\n            _verifyStateRootProof(_proof)\\n            && _verifyStorageProof(_xDomainCalldata, _proof)\\n        );\\n    }\\n\\n    /**\\n     * Verifies that the state root within an inclusion proof is valid.\\n     * @param _proof Message inclusion proof.\\n     * @return Whether or not the provided proof is valid.\\n     */\\n    function _verifyStateRootProof(\\n        L2MessageInclusionProof memory _proof\\n    )\\n        internal\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        iOVM_StateCommitmentChain ovmStateCommitmentChain = iOVM_StateCommitmentChain(\\n            resolve(\\"OVM_StateCommitmentChain\\")\\n        );\\n\\n        return (\\n            ovmStateCommitmentChain.insideFraudProofWindow(_proof.stateRootBatchHeader) == false\\n            && ovmStateCommitmentChain.verifyStateCommitment(\\n                _proof.stateRoot,\\n                _proof.stateRootBatchHeader,\\n                _proof.stateRootProof\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Verifies that the storage proof within an inclusion proof is valid.\\n     * @param _xDomainCalldata Encoded message calldata.\\n     * @param _proof Message inclusion proof.\\n     * @return Whether or not the provided proof is valid.\\n     */\\n    function _verifyStorageProof(\\n        bytes memory _xDomainCalldata,\\n        L2MessageInclusionProof memory _proof\\n    )\\n        internal\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 storageKey = keccak256(\\n            abi.encodePacked(\\n                keccak256(\\n                    abi.encodePacked(\\n                        _xDomainCalldata,\\n                        resolve(\\"OVM_L2CrossDomainMessenger\\")\\n                    )\\n                ),\\n                uint256(0)\\n            )\\n        );\\n\\n        (\\n            bool exists,\\n            bytes memory encodedMessagePassingAccount\\n        ) = Lib_SecureMerkleTrie.get(\\n            abi.encodePacked(Lib_PredeployAddresses.L2_TO_L1_MESSAGE_PASSER),\\n            _proof.stateTrieWitness,\\n            _proof.stateRoot\\n        );\\n\\n        require(\\n            exists == true,\\n            \\"Message passing predeploy has not been initialized or invalid proof provided.\\"\\n        );\\n\\n        Lib_OVMCodec.EVMAccount memory account = Lib_OVMCodec.decodeEVMAccount(\\n            encodedMessagePassingAccount\\n        );\\n\\n        return Lib_SecureMerkleTrie.verifyInclusionProof(\\n            abi.encodePacked(storageKey),\\n            abi.encodePacked(uint8(1)),\\n            _proof.storageTrieWitness,\\n            account.storageRoot\\n        );\\n    }\\n\\n    /**\\n     * Sends a cross domain message.\\n     * @param _canonicalTransactionChain Address of the OVM_CanonicalTransactionChain instance.\\n     * @param _l2CrossDomainMessenger Address of the OVM_L2CrossDomainMessenger instance.\\n     * @param _message Message to send.\\n     * @param _gasLimit OVM gas limit for the message.\\n     */\\n    function _sendXDomainMessage(\\n        address _canonicalTransactionChain,\\n        address _l2CrossDomainMessenger,\\n        bytes memory _message,\\n        uint256 _gasLimit\\n    )\\n        internal\\n    {\\n        iOVM_CanonicalTransactionChain(_canonicalTransactionChain).enqueue(\\n            _l2CrossDomainMessenger,\\n            _gasLimit,\\n            _message\\n        );\\n    }\\n}\\n","keccak256":"0x676c6c68042806aee071b0ffd44497066df1b1aed2ae212f002ee2db7654da83","license":"MIT"},"contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_CrossDomainMessenger.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_CrossDomainMessenger\\n */\\ninterface iOVM_CrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n    event FailedRelayedMessage(bytes32 msgHash);\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n","keccak256":"0x03dd576abe8e562cca646dd59b5c038291dffa9a5e43e4e3765d38cf1406fa62","license":"MIT"},"contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_L1CrossDomainMessenger.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_CrossDomainMessenger } from \\"./iOVM_CrossDomainMessenger.sol\\";\\n\\n/**\\n * @title iOVM_L1CrossDomainMessenger\\n */\\ninterface iOVM_L1CrossDomainMessenger is iOVM_CrossDomainMessenger {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    struct L2MessageInclusionProof {\\n        bytes32 stateRoot;\\n        Lib_OVMCodec.ChainBatchHeader stateRootBatchHeader;\\n        Lib_OVMCodec.ChainInclusionProof stateRootProof;\\n        bytes stateTrieWitness;\\n        bytes storageTrieWitness;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Relays a cross domain message to a contract.\\n     * @param _target Target contract address.\\n     * @param _sender Message sender address.\\n     * @param _message Message to send to the target.\\n     * @param _messageNonce Nonce for the provided message.\\n     * @param _proof Inclusion proof for the given message.\\n     */\\n    function relayMessage(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _messageNonce,\\n        L2MessageInclusionProof memory _proof\\n    ) external;\\n\\n    /**\\n     * Replays a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _sender Original sender address.\\n     * @param _message Message to send to the target.\\n     * @param _queueIndex CTC Queue index for the message to replay.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function replayMessage(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _queueIndex,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n","keccak256":"0xd278237bb588a45208d8ed57c7766386cddd1dc1e4f31867c9cb356939dfd49a","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_CanonicalTransactionChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_ChainStorageContainer } from \\"./iOVM_ChainStorageContainer.sol\\";\\n\\n/**\\n * @title iOVM_CanonicalTransactionChain\\n */\\ninterface iOVM_CanonicalTransactionChain {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event TransactionEnqueued(\\n        address _l1TxOrigin,\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes _data,\\n        uint256 _queueIndex,\\n        uint256 _timestamp\\n    );\\n\\n    event QueueBatchAppended(\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event SequencerBatchAppended(\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event TransactionBatchAppended(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct BatchContext {\\n        uint256 numSequencedTransactions;\\n        uint256 numSubsequentQueueTransactions;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n\\n    /**\\n     * Accesses the batch storage container.\\n     * @return Reference to the batch storage container.\\n     */\\n    function batches()\\n        external\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        );\\n\\n    /**\\n     * Accesses the queue storage container.\\n     * @return Reference to the queue storage container.\\n     */\\n    function queue()\\n        external\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        );\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements()\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches()\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Returns the index of the next element to be enqueued.\\n     * @return Index for the next queue element.\\n     */\\n    function getNextQueueIndex()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Gets the queue element at a particular index.\\n     * @param _index Index of the queue element to access.\\n     * @return _element Queue element at the given index.\\n     */\\n    function getQueueElement(\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            Lib_OVMCodec.QueueElement memory _element\\n        );\\n\\n    /**\\n     * Returns the timestamp of the last transaction.\\n     * @return Timestamp for the last transaction.\\n     */\\n    function getLastTimestamp()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Returns the blocknumber of the last transaction.\\n     * @return Blocknumber for the last transaction.\\n     */\\n    function getLastBlockNumber()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Get the number of queue elements which have not yet been included.\\n     * @return Number of pending queue elements.\\n     */\\n    function getNumPendingQueueElements()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Retrieves the length of the queue, including\\n     * both pending and canonical transactions.\\n     * @return Length of the queue.\\n     */\\n    function getQueueLength()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n\\n    /**\\n     * Adds a transaction to the queue.\\n     * @param _target Target contract to send the transaction to.\\n     * @param _gasLimit Gas limit for the given transaction.\\n     * @param _data Transaction data.\\n     */\\n    function enqueue(\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    )\\n        external;\\n\\n    /**\\n     * Appends a given number of queued transactions as a single batch.\\n     * @param _numQueuedTransactions Number of transactions to append.\\n     */\\n    function appendQueueBatch(\\n        uint256 _numQueuedTransactions\\n    )\\n        external;\\n\\n    /**\\n     * Allows the sequencer to append a batch of transactions.\\n     * @dev This function uses a custom encoding scheme for efficiency reasons.\\n     * .param _shouldStartAtElement Specific batch we expect to start appending to.\\n     * .param _totalElementsToAppend Total number of batch elements we expect to append.\\n     * .param _contexts Array of batch contexts.\\n     * .param _transactionDataFields Array of raw transaction data.\\n     */\\n    function appendSequencerBatch(\\n        // uint40 _shouldStartAtElement,\\n        // uint24 _totalElementsToAppend,\\n        // BatchContext[] _contexts,\\n        // bytes[] _transactionDataFields\\n    )\\n        external;\\n\\n    /**\\n     * Verifies whether a transaction is included in the chain.\\n     * @param _transaction Transaction to verify.\\n     * @param _txChainElement Transaction chain element corresponding to the transaction.\\n     * @param _batchHeader Header of the batch the transaction was included in.\\n     * @param _inclusionProof Inclusion proof for the provided transaction chain element.\\n     * @return True if the transaction exists in the CTC, false if not.\\n     */\\n    function verifyTransaction(\\n        Lib_OVMCodec.Transaction memory _transaction,\\n        Lib_OVMCodec.TransactionChainElement memory _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _inclusionProof\\n    )\\n        external\\n        view\\n        returns (\\n            bool\\n        );\\n}\\n","keccak256":"0xb5e55488a1982841c07cdf5ff475da4789596f111dd48f01b1918ee4c775cf3a","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_ChainStorageContainer.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_ChainStorageContainer\\n */\\ninterface iOVM_ChainStorageContainer {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the container\'s global metadata field. We\'re using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadata(\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves the container\'s global metadata field.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadata()\\n        external\\n        view\\n        returns (\\n            bytes27\\n        );\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @return Number of objects in the container.\\n     */\\n    function length()\\n        external\\n        view\\n        returns (\\n            uint256\\n        );\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function push(\\n        bytes32 _object\\n    )\\n        external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we\'ll need to touch the \\"length\\" storage slot anyway, which also contains the global\\n     * metadata (it\'s an optimization).\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function push(\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves an object from the container.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function get(\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32\\n        );\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusive(\\n        uint256 _index\\n    )\\n        external;\\n\\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusive(\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n}\\n","keccak256":"0x180b9c347e20f1a6efa553b0f2b9a59aebceda92a7484ae6fca4da2bf1d960c3","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_StateCommitmentChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateCommitmentChain\\n */\\ninterface iOVM_StateCommitmentChain {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event StateBatchAppended(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n    event StateBatchDeleted(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements()\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches()\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Retrieves the timestamp of the last batch submitted by the sequencer.\\n     * @return _lastSequencerTimestamp Last sequencer batch timestamp.\\n     */\\n    function getLastSequencerTimestamp()\\n        external\\n        view\\n        returns (\\n            uint256 _lastSequencerTimestamp\\n        );\\n\\n    /**\\n     * Appends a batch of state roots to the chain.\\n     * @param _batch Batch of state roots.\\n     * @param _shouldStartAtElement Index of the element at which this batch should start.\\n     */\\n    function appendStateBatch(\\n        bytes32[] calldata _batch,\\n        uint256 _shouldStartAtElement\\n    )\\n        external;\\n\\n    /**\\n     * Deletes all state roots after (and including) a given batch.\\n     * @param _batchHeader Header of the batch to start deleting from.\\n     */\\n    function deleteStateBatch(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external;\\n\\n    /**\\n     * Verifies a batch inclusion proof.\\n     * @param _element Hash of the element to verify a proof for.\\n     * @param _batchHeader Header of the batch in which the element was included.\\n     * @param _proof Merkle inclusion proof for the element.\\n     */\\n    function verifyStateCommitment(\\n        bytes32 _element,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _proof\\n    )\\n        external\\n        view\\n        returns (\\n            bool _verified\\n        );\\n\\n    /**\\n     * Checks whether a given batch is still inside its fraud proof window.\\n     * @param _batchHeader Header of the batch to check.\\n     * @return _inside Whether or not the batch is inside the fraud proof window.\\n     */\\n    function insideFraudProofWindow(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external\\n        view\\n        returns (\\n            bool _inside\\n        );\\n}\\n","keccak256":"0x6646d6ff392b81aab52a7a277e91540819464751de0af5afd1962094b2e92448","license":"MIT"},"contracts/optimistic-ethereum/libraries/bridge/Lib_CrossDomainUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\n\\n/**\\n * @title Lib_CrossDomainUtils\\n */\\nlibrary Lib_CrossDomainUtils {\\n    /**\\n     * Generates the correct cross domain calldata for a message.\\n     * @param _target Target contract address.\\n     * @param _sender Message sender address.\\n     * @param _message Message to send to the target.\\n     * @param _messageNonce Nonce for the provided message.\\n     * @return ABI encoded cross domain calldata.\\n     */\\n    function encodeXDomainCalldata(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _messageNonce\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodeWithSignature(\\n            \\"relayMessage(address,address,bytes,uint256)\\",\\n            _target,\\n            _sender,\\n            _message,\\n            _messageNonce\\n        );\\n    }\\n}\\n","keccak256":"0x019940ce688f689f30ce43da1f58dc6d6742ad9bcb6cccaaf7c6bb0a16c48f9f","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/constants/Lib_PredeployAddresses.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_PredeployAddresses\\n */\\nlibrary Lib_PredeployAddresses {\\n    address internal constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;\\n    address internal constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;\\n    address internal constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;\\n    address internal constant ECDSA_CONTRACT_ACCOUNT = 0x4200000000000000000000000000000000000003;\\n    address internal constant SEQUENCER_ENTRYPOINT = 0x4200000000000000000000000000000000000005;\\n    address payable internal constant OVM_ETH = 0x4200000000000000000000000000000000000006;\\n    address internal constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;\\n    address internal constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;\\n    address internal constant PROXY_EOA = 0x4200000000000000000000000000000000000009;\\n    address internal constant EXECUTION_MANAGER_WRAPPER = 0x420000000000000000000000000000000000000B;\\n    address internal constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;\\n    address internal constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    address internal constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;\\n}\\n","keccak256":"0x798dd3fe47c172880978c8e4d35573b25d5135be29a77584e9fac45845748695","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/trie/Lib_MerkleTrie.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\n\\n/**\\n * @title Lib_MerkleTrie\\n */\\nlibrary Lib_MerkleTrie {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum NodeType {\\n        BranchNode,\\n        ExtensionNode,\\n        LeafNode\\n    }\\n\\n    struct TrieNode {\\n        bytes encoded;\\n        Lib_RLPReader.RLPItem[] decoded;\\n    }\\n\\n\\n    /**********************\\n     * Contract Constants *\\n     **********************/\\n\\n    // TREE_RADIX determines the number of elements per branch node.\\n    uint256 constant TREE_RADIX = 16;\\n    // Branch nodes have TREE_RADIX elements plus an additional `value` slot.\\n    uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;\\n    // Leaf nodes and extension nodes always have two elements, a `path` and a `value`.\\n    uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;\\n\\n    // Prefixes are prepended to the `path` within a leaf or extension node and\\n    // allow us to differentiate between the two node types. `ODD` or `EVEN` is\\n    // determined by the number of nibbles within the unprefixed `path`. If the\\n    // number of nibbles if even, we need to insert an extra padding nibble so\\n    // the resulting prefixed `path` has an even number of nibbles.\\n    uint8 constant PREFIX_EXTENSION_EVEN = 0;\\n    uint8 constant PREFIX_EXTENSION_ODD = 1;\\n    uint8 constant PREFIX_LEAF_EVEN = 2;\\n    uint8 constant PREFIX_LEAF_ODD = 3;\\n\\n    // Just a utility constant. RLP represents `NULL` as 0x80.\\n    bytes1 constant RLP_NULL = bytes1(0x80);\\n    bytes constant RLP_NULL_BYTES = hex\'80\';\\n    bytes32 constant internal KECCAK256_RLP_NULL_BYTES = keccak256(RLP_NULL_BYTES);\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Verifies a proof that a given key/value pair is present in the\\n     * Merkle trie.\\n     * @param _key Key of the node to search for, as a hex string.\\n     * @param _value Value of the node to search for, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n     * traditional Merkle trees, this proof is executed top-down and consists\\n     * of a list of RLP-encoded nodes that make a path down to the target node.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n     */\\n    function verifyInclusionProof(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _verified\\n        )\\n    {\\n        (\\n            bool exists,\\n            bytes memory value\\n        ) = get(_key, _proof, _root);\\n\\n        return (\\n            exists && Lib_BytesUtils.equal(_value, value)\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates a Merkle trie and returns a new root hash.\\n     * @param _key Key of the node to update, as a hex string.\\n     * @param _value Value of the node to update, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the node *nearest* the\\n     * target node. If the key exists, we can simply update the value.\\n     * Otherwise, we need to modify the trie to handle the new k/v pair.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _updatedRoot Root hash of the newly constructed trie.\\n     */\\n    function update(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        // Special case when inserting the very first node.\\n        if (_root == KECCAK256_RLP_NULL_BYTES) {\\n            return getSingleNodeRootHash(_key, _value);\\n        }\\n\\n        TrieNode[] memory proof = _parseProof(_proof);\\n        (uint256 pathLength, bytes memory keyRemainder, ) = _walkNodePath(proof, _key, _root);\\n        TrieNode[] memory newPath = _getNewPath(proof, pathLength, _key, keyRemainder, _value);\\n\\n        return _getUpdatedTrieRoot(newPath, _key);\\n    }\\n\\n    /**\\n     * @notice Retrieves the value associated with a given key.\\n     * @param _key Key to search for, as hex bytes.\\n     * @param _proof Merkle trie inclusion proof for the key.\\n     * @param _root Known root of the Merkle trie.\\n     * @return _exists Whether or not the key exists.\\n     * @return _value Value of the key if it exists.\\n     */\\n    function get(\\n        bytes memory _key,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _exists,\\n            bytes memory _value\\n        )\\n    {\\n        TrieNode[] memory proof = _parseProof(_proof);\\n        (uint256 pathLength, bytes memory keyRemainder, bool isFinalNode) = _walkNodePath(proof, _key, _root);\\n\\n        bool exists = keyRemainder.length == 0;\\n\\n        require(\\n            exists || isFinalNode,\\n            \\"Provided proof is invalid.\\"\\n        );\\n\\n        bytes memory value = exists ? _getNodeValue(proof[pathLength - 1]) : bytes(\'\');\\n\\n        return (\\n            exists,\\n            value\\n        );\\n    }\\n\\n    /**\\n     * Computes the root hash for a trie with a single node.\\n     * @param _key Key for the single node.\\n     * @param _value Value for the single node.\\n     * @return _updatedRoot Hash of the trie.\\n     */\\n    function getSingleNodeRootHash(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        return keccak256(_makeLeafNode(\\n            Lib_BytesUtils.toNibbles(_key),\\n            _value\\n        ).encoded);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * @notice Walks through a proof using a provided key.\\n     * @param _proof Inclusion proof to walk through.\\n     * @param _key Key to use for the walk.\\n     * @param _root Known root of the trie.\\n     * @return _pathLength Length of the final path\\n     * @return _keyRemainder Portion of the key remaining after the walk.\\n     * @return _isFinalNode Whether or not we\'ve hit a dead end.\\n     */\\n    function _walkNodePath(\\n        TrieNode[] memory _proof,\\n        bytes memory _key,\\n        bytes32 _root\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 _pathLength,\\n            bytes memory _keyRemainder,\\n            bool _isFinalNode\\n        )\\n    {\\n        uint256 pathLength = 0;\\n        bytes memory key = Lib_BytesUtils.toNibbles(_key);\\n\\n        bytes32 currentNodeID = _root;\\n        uint256 currentKeyIndex = 0;\\n        uint256 currentKeyIncrement = 0;\\n        TrieNode memory currentNode;\\n\\n        // Proof is top-down, so we start at the first element (root).\\n        for (uint256 i = 0; i < _proof.length; i++) {\\n            currentNode = _proof[i];\\n            currentKeyIndex += currentKeyIncrement;\\n\\n            // Keep track of the proof elements we actually need.\\n            // It\'s expensive to resize arrays, so this simply reduces gas costs.\\n            pathLength += 1;\\n\\n            if (currentKeyIndex == 0) {\\n                // First proof element is always the root node.\\n                require(\\n                    keccak256(currentNode.encoded) == currentNodeID,\\n                    \\"Invalid root hash\\"\\n                );\\n            } else if (currentNode.encoded.length >= 32) {\\n                // Nodes 32 bytes or larger are hashed inside branch nodes.\\n                require(\\n                    keccak256(currentNode.encoded) == currentNodeID,\\n                    \\"Invalid large internal hash\\"\\n                );\\n            } else {\\n                // Nodes smaller than 31 bytes aren\'t hashed.\\n                require(\\n                    Lib_BytesUtils.toBytes32(currentNode.encoded) == currentNodeID,\\n                    \\"Invalid internal node hash\\"\\n                );\\n            }\\n\\n            if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {\\n                if (currentKeyIndex == key.length) {\\n                    // We\'ve hit the end of the key, meaning the value should be within this branch node.\\n                    break;\\n                } else {\\n                    // We\'re not at the end of the key yet.\\n                    // Figure out what the next node ID should be and continue.\\n                    uint8 branchKey = uint8(key[currentKeyIndex]);\\n                    Lib_RLPReader.RLPItem memory nextNode = currentNode.decoded[branchKey];\\n                    currentNodeID = _getNodeID(nextNode);\\n                    currentKeyIncrement = 1;\\n                    continue;\\n                }\\n            } else if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {\\n                bytes memory path = _getNodePath(currentNode);\\n                uint8 prefix = uint8(path[0]);\\n                uint8 offset = 2 - prefix % 2;\\n                bytes memory pathRemainder = Lib_BytesUtils.slice(path, offset);\\n                bytes memory keyRemainder = Lib_BytesUtils.slice(key, currentKeyIndex);\\n                uint256 sharedNibbleLength = _getSharedNibbleLength(pathRemainder, keyRemainder);\\n\\n                if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {\\n                    if (\\n                        pathRemainder.length == sharedNibbleLength &&\\n                        keyRemainder.length == sharedNibbleLength\\n                    ) {\\n                        // The key within this leaf matches our key exactly.\\n                        // Increment the key index to reflect that we have no remainder.\\n                        currentKeyIndex += sharedNibbleLength;\\n                    }\\n\\n                    // We\'ve hit a leaf node, so our next node should be NULL.\\n                    currentNodeID = bytes32(RLP_NULL);\\n                    break;\\n                } else if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {\\n                    if (sharedNibbleLength != pathRemainder.length) {\\n                        // Our extension node is not identical to the remainder.\\n                        // We\'ve hit the end of this path, updates will need to modify this extension.\\n                        currentNodeID = bytes32(RLP_NULL);\\n                        break;\\n                    } else {\\n                        // Our extension shares some nibbles.\\n                        // Carry on to the next node.\\n                        currentNodeID = _getNodeID(currentNode.decoded[1]);\\n                        currentKeyIncrement = sharedNibbleLength;\\n                        continue;\\n                    }\\n                } else {\\n                    revert(\\"Received a node with an unknown prefix\\");\\n                }\\n            } else {\\n                revert(\\"Received an unparseable node.\\");\\n            }\\n        }\\n\\n        // If our node ID is NULL, then we\'re at a dead end.\\n        bool isFinalNode = currentNodeID == bytes32(RLP_NULL);\\n        return (pathLength, Lib_BytesUtils.slice(key, currentKeyIndex), isFinalNode);\\n    }\\n\\n    /**\\n     * @notice Creates new nodes to support a k/v pair insertion into a given Merkle trie path.\\n     * @param _path Path to the node nearest the k/v pair.\\n     * @param _pathLength Length of the path. Necessary because the provided path may include\\n     *  additional nodes (e.g., it comes directly from a proof) and we can\'t resize in-memory\\n     *  arrays without costly duplication.\\n     * @param _key Full original key.\\n     * @param _keyRemainder Portion of the initial key that must be inserted into the trie.\\n     * @param _value Value to insert at the given key.\\n     * @return _newPath A new path with the inserted k/v pair and extra supporting nodes.\\n     */\\n    function _getNewPath(\\n        TrieNode[] memory _path,\\n        uint256 _pathLength,\\n        bytes memory _key,\\n        bytes memory _keyRemainder,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode[] memory _newPath\\n        )\\n    {\\n        bytes memory keyRemainder = _keyRemainder;\\n\\n        // Most of our logic depends on the status of the last node in the path.\\n        TrieNode memory lastNode = _path[_pathLength - 1];\\n        NodeType lastNodeType = _getNodeType(lastNode);\\n\\n        // Create an array for newly created nodes.\\n        // We need up to three new nodes, depending on the contents of the last node.\\n        // Since array resizing is expensive, we\'ll keep track of the size manually.\\n        // We\'re using an explicit `totalNewNodes += 1` after insertions for clarity.\\n        TrieNode[] memory newNodes = new TrieNode[](3);\\n        uint256 totalNewNodes = 0;\\n\\n        // Reference: https://github.com/ethereumjs/merkle-patricia-tree/blob/c0a10395aab37d42c175a47114ebfcbd7efcf059/src/baseTrie.ts#L294-L313\\n        bool matchLeaf = false;\\n        if (lastNodeType == NodeType.LeafNode) {\\n            uint256 l = 0;\\n            if (_path.length > 0) {\\n                for (uint256 i = 0; i < _path.length - 1; i++) {\\n                    if (_getNodeType(_path[i]) == NodeType.BranchNode) {\\n                        l++;\\n                    } else {\\n                        l += _getNodeKey(_path[i]).length;\\n                    }\\n                }\\n            }\\n\\n            if (\\n                _getSharedNibbleLength(\\n                    _getNodeKey(lastNode),\\n                    Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key), l)\\n                ) == _getNodeKey(lastNode).length\\n                && keyRemainder.length == 0\\n            ) {\\n                matchLeaf = true;\\n            }\\n        }\\n\\n        if (matchLeaf) {\\n            // We\'ve found a leaf node with the given key.\\n            // Simply need to update the value of the node to match.\\n            newNodes[totalNewNodes] = _makeLeafNode(_getNodeKey(lastNode), _value);\\n            totalNewNodes += 1;\\n        } else if (lastNodeType == NodeType.BranchNode) {\\n            if (keyRemainder.length == 0) {\\n                // We\'ve found a branch node with the given key.\\n                // Simply need to update the value of the node to match.\\n                newNodes[totalNewNodes] = _editBranchValue(lastNode, _value);\\n                totalNewNodes += 1;\\n            } else {\\n                // We\'ve found a branch node, but it doesn\'t contain our key.\\n                // Reinsert the old branch for now.\\n                newNodes[totalNewNodes] = lastNode;\\n                totalNewNodes += 1;\\n                // Create a new leaf node, slicing our remainder since the first byte points\\n                // to our branch node.\\n                newNodes[totalNewNodes] = _makeLeafNode(Lib_BytesUtils.slice(keyRemainder, 1), _value);\\n                totalNewNodes += 1;\\n            }\\n        } else {\\n            // Our last node is either an extension node or a leaf node with a different key.\\n            bytes memory lastNodeKey = _getNodeKey(lastNode);\\n            uint256 sharedNibbleLength = _getSharedNibbleLength(lastNodeKey, keyRemainder);\\n\\n            if (sharedNibbleLength != 0) {\\n                // We\'ve got some shared nibbles between the last node and our key remainder.\\n                // We\'ll need to insert an extension node that covers these shared nibbles.\\n                bytes memory nextNodeKey = Lib_BytesUtils.slice(lastNodeKey, 0, sharedNibbleLength);\\n                newNodes[totalNewNodes] = _makeExtensionNode(nextNodeKey, _getNodeHash(_value));\\n                totalNewNodes += 1;\\n\\n                // Cut down the keys since we\'ve just covered these shared nibbles.\\n                lastNodeKey = Lib_BytesUtils.slice(lastNodeKey, sharedNibbleLength);\\n                keyRemainder = Lib_BytesUtils.slice(keyRemainder, sharedNibbleLength);\\n            }\\n\\n            // Create an empty branch to fill in.\\n            TrieNode memory newBranch = _makeEmptyBranchNode();\\n\\n            if (lastNodeKey.length == 0) {\\n                // Key remainder was larger than the key for our last node.\\n                // The value within our last node is therefore going to be shifted into\\n                // a branch value slot.\\n                newBranch = _editBranchValue(newBranch, _getNodeValue(lastNode));\\n            } else {\\n                // Last node key was larger than the key remainder.\\n                // We\'re going to modify some index of our branch.\\n                uint8 branchKey = uint8(lastNodeKey[0]);\\n                // Move on to the next nibble.\\n                lastNodeKey = Lib_BytesUtils.slice(lastNodeKey, 1);\\n\\n                if (lastNodeType == NodeType.LeafNode) {\\n                    // We\'re dealing with a leaf node.\\n                    // We\'ll modify the key and insert the old leaf node into the branch index.\\n                    TrieNode memory modifiedLastNode = _makeLeafNode(lastNodeKey, _getNodeValue(lastNode));\\n                    newBranch = _editBranchIndex(newBranch, branchKey, _getNodeHash(modifiedLastNode.encoded));\\n                } else if (lastNodeKey.length != 0) {\\n                    // We\'re dealing with a shrinking extension node.\\n                    // We need to modify the node to decrease the size of the key.\\n                    TrieNode memory modifiedLastNode = _makeExtensionNode(lastNodeKey, _getNodeValue(lastNode));\\n                    newBranch = _editBranchIndex(newBranch, branchKey, _getNodeHash(modifiedLastNode.encoded));\\n                } else {\\n                    // We\'re dealing with an unnecessary extension node.\\n                    // We\'re going to delete the node entirely.\\n                    // Simply insert its current value into the branch index.\\n                    newBranch = _editBranchIndex(newBranch, branchKey, _getNodeValue(lastNode));\\n                }\\n            }\\n\\n            if (keyRemainder.length == 0) {\\n                // We\'ve got nothing left in the key remainder.\\n                // Simply insert the value into the branch value slot.\\n                newBranch = _editBranchValue(newBranch, _value);\\n                // Push the branch into the list of new nodes.\\n                newNodes[totalNewNodes] = newBranch;\\n                totalNewNodes += 1;\\n            } else {\\n                // We\'ve got some key remainder to work with.\\n                // We\'ll be inserting a leaf node into the trie.\\n                // First, move on to the next nibble.\\n                keyRemainder = Lib_BytesUtils.slice(keyRemainder, 1);\\n                // Push the branch into the list of new nodes.\\n                newNodes[totalNewNodes] = newBranch;\\n                totalNewNodes += 1;\\n                // Push a new leaf node for our k/v pair.\\n                newNodes[totalNewNodes] = _makeLeafNode(keyRemainder, _value);\\n                totalNewNodes += 1;\\n            }\\n        }\\n\\n        // Finally, join the old path with our newly created nodes.\\n        // Since we\'re overwriting the last node in the path, we use `_pathLength - 1`.\\n        return _joinNodeArrays(_path, _pathLength - 1, newNodes, totalNewNodes);\\n    }\\n\\n    /**\\n     * @notice Computes the trie root from a given path.\\n     * @param _nodes Path to some k/v pair.\\n     * @param _key Key for the k/v pair.\\n     * @return _updatedRoot Root hash for the updated trie.\\n     */\\n    function _getUpdatedTrieRoot(\\n        TrieNode[] memory _nodes,\\n        bytes memory _key\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        bytes memory key = Lib_BytesUtils.toNibbles(_key);\\n\\n        // Some variables to keep track of during iteration.\\n        TrieNode memory currentNode;\\n        NodeType currentNodeType;\\n        bytes memory previousNodeHash;\\n\\n        // Run through the path backwards to rebuild our root hash.\\n        for (uint256 i = _nodes.length; i > 0; i--) {\\n            // Pick out the current node.\\n            currentNode = _nodes[i - 1];\\n            currentNodeType = _getNodeType(currentNode);\\n\\n            if (currentNodeType == NodeType.LeafNode) {\\n                // Leaf nodes are already correctly encoded.\\n                // Shift the key over to account for the nodes key.\\n                bytes memory nodeKey = _getNodeKey(currentNode);\\n                key = Lib_BytesUtils.slice(key, 0, key.length - nodeKey.length);\\n            } else if (currentNodeType == NodeType.ExtensionNode) {\\n                // Shift the key over to account for the nodes key.\\n                bytes memory nodeKey = _getNodeKey(currentNode);\\n                key = Lib_BytesUtils.slice(key, 0, key.length - nodeKey.length);\\n\\n                // If this node is the last element in the path, it\'ll be correctly encoded\\n                // and we can skip this part.\\n                if (previousNodeHash.length > 0) {\\n                    // Re-encode the node based on the previous node.\\n                    currentNode = _editExtensionNodeValue(currentNode, previousNodeHash);\\n                }\\n            } else if (currentNodeType == NodeType.BranchNode) {\\n                // If this node is the last element in the path, it\'ll be correctly encoded\\n                // and we can skip this part.\\n                if (previousNodeHash.length > 0) {\\n                    // Re-encode the node based on the previous node.\\n                    uint8 branchKey = uint8(key[key.length - 1]);\\n                    key = Lib_BytesUtils.slice(key, 0, key.length - 1);\\n                    currentNode = _editBranchIndex(currentNode, branchKey, previousNodeHash);\\n                }\\n            }\\n\\n            // Compute the node hash for the next iteration.\\n            previousNodeHash = _getNodeHash(currentNode.encoded);\\n        }\\n\\n        // Current node should be the root at this point.\\n        // Simply return the hash of its encoding.\\n        return keccak256(currentNode.encoded);\\n    }\\n\\n    /**\\n     * @notice Parses an RLP-encoded proof into something more useful.\\n     * @param _proof RLP-encoded proof to parse.\\n     * @return _parsed Proof parsed into easily accessible structs.\\n     */\\n    function _parseProof(\\n        bytes memory _proof\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode[] memory _parsed\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory nodes = Lib_RLPReader.readList(_proof);\\n        TrieNode[] memory proof = new TrieNode[](nodes.length);\\n\\n        for (uint256 i = 0; i < nodes.length; i++) {\\n            bytes memory encoded = Lib_RLPReader.readBytes(nodes[i]);\\n            proof[i] = TrieNode({\\n                encoded: encoded,\\n                decoded: Lib_RLPReader.readList(encoded)\\n            });\\n        }\\n\\n        return proof;\\n    }\\n\\n    /**\\n     * @notice Picks out the ID for a node. Node ID is referred to as the\\n     * \\"hash\\" within the specification, but nodes < 32 bytes are not actually\\n     * hashed.\\n     * @param _node Node to pull an ID for.\\n     * @return _nodeID ID for the node, depending on the size of its contents.\\n     */\\n    function _getNodeID(\\n        Lib_RLPReader.RLPItem memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes32 _nodeID\\n        )\\n    {\\n        bytes memory nodeID;\\n\\n        if (_node.length < 32) {\\n            // Nodes smaller than 32 bytes are RLP encoded.\\n            nodeID = Lib_RLPReader.readRawBytes(_node);\\n        } else {\\n            // Nodes 32 bytes or larger are hashed.\\n            nodeID = Lib_RLPReader.readBytes(_node);\\n        }\\n\\n        return Lib_BytesUtils.toBytes32(nodeID);\\n    }\\n\\n    /**\\n     * @notice Gets the path for a leaf or extension node.\\n     * @param _node Node to get a path for.\\n     * @return _path Node path, converted to an array of nibbles.\\n     */\\n    function _getNodePath(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _path\\n        )\\n    {\\n        return Lib_BytesUtils.toNibbles(Lib_RLPReader.readBytes(_node.decoded[0]));\\n    }\\n\\n    /**\\n     * @notice Gets the key for a leaf or extension node. Keys are essentially\\n     * just paths without any prefix.\\n     * @param _node Node to get a key for.\\n     * @return _key Node key, converted to an array of nibbles.\\n     */\\n    function _getNodeKey(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _key\\n        )\\n    {\\n        return _removeHexPrefix(_getNodePath(_node));\\n    }\\n\\n    /**\\n     * @notice Gets the path for a node.\\n     * @param _node Node to get a value for.\\n     * @return _value Node value, as hex bytes.\\n     */\\n    function _getNodeValue(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _value\\n        )\\n    {\\n        return Lib_RLPReader.readBytes(_node.decoded[_node.decoded.length - 1]);\\n    }\\n\\n    /**\\n     * @notice Computes the node hash for an encoded node. Nodes < 32 bytes\\n     * are not hashed, all others are keccak256 hashed.\\n     * @param _encoded Encoded node to hash.\\n     * @return _hash Hash of the encoded node. Simply the input if < 32 bytes.\\n     */\\n    function _getNodeHash(\\n        bytes memory _encoded\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _hash\\n        )\\n    {\\n        if (_encoded.length < 32) {\\n            return _encoded;\\n        } else {\\n            return abi.encodePacked(keccak256(_encoded));\\n        }\\n    }\\n\\n    /**\\n     * @notice Determines the type for a given node.\\n     * @param _node Node to determine a type for.\\n     * @return _type Type of the node; BranchNode/ExtensionNode/LeafNode.\\n     */\\n    function _getNodeType(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            NodeType _type\\n        )\\n    {\\n        if (_node.decoded.length == BRANCH_NODE_LENGTH) {\\n            return NodeType.BranchNode;\\n        } else if (_node.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {\\n            bytes memory path = _getNodePath(_node);\\n            uint8 prefix = uint8(path[0]);\\n\\n            if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {\\n                return NodeType.LeafNode;\\n            } else if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {\\n                return NodeType.ExtensionNode;\\n            }\\n        }\\n\\n        revert(\\"Invalid node type\\");\\n    }\\n\\n    /**\\n     * @notice Utility; determines the number of nibbles shared between two\\n     * nibble arrays.\\n     * @param _a First nibble array.\\n     * @param _b Second nibble array.\\n     * @return _shared Number of shared nibbles.\\n     */\\n    function _getSharedNibbleLength(\\n        bytes memory _a,\\n        bytes memory _b\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 _shared\\n        )\\n    {\\n        uint256 i = 0;\\n        while (_a.length > i && _b.length > i && _a[i] == _b[i]) {\\n            i++;\\n        }\\n        return i;\\n    }\\n\\n    /**\\n     * @notice Utility; converts an RLP-encoded node into our nice struct.\\n     * @param _raw RLP-encoded node to convert.\\n     * @return _node Node as a TrieNode struct.\\n     */\\n    function _makeNode(\\n        bytes[] memory _raw\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes memory encoded = Lib_RLPWriter.writeList(_raw);\\n\\n        return TrieNode({\\n            encoded: encoded,\\n            decoded: Lib_RLPReader.readList(encoded)\\n        });\\n    }\\n\\n    /**\\n     * @notice Utility; converts an RLP-decoded node into our nice struct.\\n     * @param _items RLP-decoded node to convert.\\n     * @return _node Node as a TrieNode struct.\\n     */\\n    function _makeNode(\\n        Lib_RLPReader.RLPItem[] memory _items\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](_items.length);\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            raw[i] = Lib_RLPReader.readRawBytes(_items[i]);\\n        }\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Creates a new extension node.\\n     * @param _key Key for the extension node, unprefixed.\\n     * @param _value Value for the extension node.\\n     * @return _node New extension node with the given k/v pair.\\n     */\\n    function _makeExtensionNode(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](2);\\n        bytes memory key = _addHexPrefix(_key, false);\\n        raw[0] = Lib_RLPWriter.writeBytes(Lib_BytesUtils.fromNibbles(key));\\n        raw[1] = Lib_RLPWriter.writeBytes(_value);\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * Creates a new extension node with the same key but a different value.\\n     * @param _node Extension node to copy and modify.\\n     * @param _value New value for the extension node.\\n     * @return New node with the same key and different value.\\n     */\\n    function _editExtensionNodeValue(\\n        TrieNode memory _node,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](2);\\n        bytes memory key = _addHexPrefix(_getNodeKey(_node), false);\\n        raw[0] = Lib_RLPWriter.writeBytes(Lib_BytesUtils.fromNibbles(key));\\n        if (_value.length < 32) {\\n            raw[1] = _value;\\n        } else {\\n            raw[1] = Lib_RLPWriter.writeBytes(_value);\\n        }\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Creates a new leaf node.\\n     * @dev This function is essentially identical to `_makeExtensionNode`.\\n     * Although we could route both to a single method with a flag, it\'s\\n     * more gas efficient to keep them separate and duplicate the logic.\\n     * @param _key Key for the leaf node, unprefixed.\\n     * @param _value Value for the leaf node.\\n     * @return _node New leaf node with the given k/v pair.\\n     */\\n    function _makeLeafNode(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](2);\\n        bytes memory key = _addHexPrefix(_key, true);\\n        raw[0] = Lib_RLPWriter.writeBytes(Lib_BytesUtils.fromNibbles(key));\\n        raw[1] = Lib_RLPWriter.writeBytes(_value);\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Creates an empty branch node.\\n     * @return _node Empty branch node as a TrieNode struct.\\n     */\\n    function _makeEmptyBranchNode()\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](BRANCH_NODE_LENGTH);\\n        for (uint256 i = 0; i < raw.length; i++) {\\n            raw[i] = RLP_NULL_BYTES;\\n        }\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Modifies the value slot for a given branch.\\n     * @param _branch Branch node to modify.\\n     * @param _value Value to insert into the branch.\\n     * @return _updatedNode Modified branch node.\\n     */\\n    function _editBranchValue(\\n        TrieNode memory _branch,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _updatedNode\\n        )\\n    {\\n        bytes memory encoded = Lib_RLPWriter.writeBytes(_value);\\n        _branch.decoded[_branch.decoded.length - 1] = Lib_RLPReader.toRLPItem(encoded);\\n        return _makeNode(_branch.decoded);\\n    }\\n\\n    /**\\n     * @notice Modifies a slot at an index for a given branch.\\n     * @param _branch Branch node to modify.\\n     * @param _index Slot index to modify.\\n     * @param _value Value to insert into the slot.\\n     * @return _updatedNode Modified branch node.\\n     */\\n    function _editBranchIndex(\\n        TrieNode memory _branch,\\n        uint8 _index,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _updatedNode\\n        )\\n    {\\n        bytes memory encoded = _value.length < 32 ? _value : Lib_RLPWriter.writeBytes(_value);\\n        _branch.decoded[_index] = Lib_RLPReader.toRLPItem(encoded);\\n        return _makeNode(_branch.decoded);\\n    }\\n\\n    /**\\n     * @notice Utility; adds a prefix to a key.\\n     * @param _key Key to prefix.\\n     * @param _isLeaf Whether or not the key belongs to a leaf.\\n     * @return _prefixedKey Prefixed key.\\n     */\\n    function _addHexPrefix(\\n        bytes memory _key,\\n        bool _isLeaf\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _prefixedKey\\n        )\\n    {\\n        uint8 prefix = _isLeaf ? uint8(0x02) : uint8(0x00);\\n        uint8 offset = uint8(_key.length % 2);\\n        bytes memory prefixed = new bytes(2 - offset);\\n        prefixed[0] = bytes1(prefix + offset);\\n        return abi.encodePacked(prefixed, _key);\\n    }\\n\\n    /**\\n     * @notice Utility; removes a prefix from a path.\\n     * @param _path Path to remove the prefix from.\\n     * @return _unprefixedKey Unprefixed key.\\n     */\\n    function _removeHexPrefix(\\n        bytes memory _path\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _unprefixedKey\\n        )\\n    {\\n        if (uint8(_path[0]) % 2 == 0) {\\n            return Lib_BytesUtils.slice(_path, 2);\\n        } else {\\n            return Lib_BytesUtils.slice(_path, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Utility; combines two node arrays. Array lengths are required\\n     * because the actual lengths may be longer than the filled lengths.\\n     * Array resizing is extremely costly and should be avoided.\\n     * @param _a First array to join.\\n     * @param _aLength Length of the first array.\\n     * @param _b Second array to join.\\n     * @param _bLength Length of the second array.\\n     * @return _joined Combined node array.\\n     */\\n    function _joinNodeArrays(\\n        TrieNode[] memory _a,\\n        uint256 _aLength,\\n        TrieNode[] memory _b,\\n        uint256 _bLength\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode[] memory _joined\\n        )\\n    {\\n        TrieNode[] memory ret = new TrieNode[](_aLength + _bLength);\\n\\n        // Copy elements from the first array.\\n        for (uint256 i = 0; i < _aLength; i++) {\\n            ret[i] = _a[i];\\n        }\\n\\n        // Copy elements from the second array.\\n        for (uint256 i = 0; i < _bLength; i++) {\\n            ret[i + _aLength] = _b[i];\\n        }\\n\\n        return ret;\\n    }\\n}\\n","keccak256":"0x4bb09d0b4f965b57cdc6b3ace49967bcfe7f2580fa0b7863dfe288081247d876","license":"MIT"},"contracts/optimistic-ethereum/libraries/trie/Lib_SecureMerkleTrie.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_MerkleTrie } from \\"./Lib_MerkleTrie.sol\\";\\n\\n/**\\n * @title Lib_SecureMerkleTrie\\n */\\nlibrary Lib_SecureMerkleTrie {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Verifies a proof that a given key/value pair is present in the\\n     * Merkle trie.\\n     * @param _key Key of the node to search for, as a hex string.\\n     * @param _value Value of the node to search for, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n     * traditional Merkle trees, this proof is executed top-down and consists\\n     * of a list of RLP-encoded nodes that make a path down to the target node.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n     */\\n    function verifyInclusionProof(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _verified\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.verifyInclusionProof(key, _value, _proof, _root);\\n    }\\n\\n    /**\\n     * @notice Updates a Merkle trie and returns a new root hash.\\n     * @param _key Key of the node to update, as a hex string.\\n     * @param _value Value of the node to update, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the node *nearest* the\\n     * target node. If the key exists, we can simply update the value.\\n     * Otherwise, we need to modify the trie to handle the new k/v pair.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _updatedRoot Root hash of the newly constructed trie.\\n     */\\n    function update(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.update(key, _value, _proof, _root);\\n    }\\n\\n    /**\\n     * @notice Retrieves the value associated with a given key.\\n     * @param _key Key to search for, as hex bytes.\\n     * @param _proof Merkle trie inclusion proof for the key.\\n     * @param _root Known root of the Merkle trie.\\n     * @return _exists Whether or not the key exists.\\n     * @return _value Value of the key if it exists.\\n     */\\n    function get(\\n        bytes memory _key,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _exists,\\n            bytes memory _value\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.get(key, _proof, _root);\\n    }\\n\\n    /**\\n     * Computes the root hash for a trie with a single node.\\n     * @param _key Key for the single node.\\n     * @param _value Value for the single node.\\n     * @return _updatedRoot Hash of the trie.\\n     */\\n    function getSingleNodeRootHash(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.getSingleNodeRootHash(key, _value);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Computes the secure counterpart to a key.\\n     * @param _key Key to get a secure key from.\\n     * @return _secureKey Secure version of the key.\\n     */\\n    function _getSecureKey(\\n        bytes memory _key\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _secureKey\\n        )\\n    {\\n        return abi.encodePacked(keccak256(_key));\\n    }\\n}","keccak256":"0xbbdd600165307d2131340599afa9dc0991f8f63727ba3a834bca5a3d7f501da8","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"}},"version":1}',bytecode:"0x608060405260cc80546001600160a01b03191661dead17905534801561002457600080fd5b50600080546001600160a01b03191690556133d2806100446000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063b1b1b20911610071578063b1b1b209146101d7578063c4d66de8146101ea578063c6b94ab0146101fd578063d7fd19dd14610210578063f2fde38b146102235761010b565b8063715018a6146101ac57806381ada46c146101b45780638456cb59146101c75780638da5cb5b146101cf5761010b565b8063461a4478116100de578063461a4478146101765780635c975abb146101895780636e296e4514610191578063706ceab6146101995761010b565b80630ecf2eea1461011057806321d800ec14610125578063299ca4781461014e5780633dbb202b14610163575b600080fd5b61012361011e366004612c5e565b610236565b005b610138610133366004612c5e565b6102db565b6040516101459190612f24565b60405180910390f35b6101566102f0565b6040516101459190612e74565b610123610171366004612be2565b6102ff565b610156610184366004612c76565b61045e565b61013861053c565b610156610545565b6101236101a7366004612b6b565b61058e565b610123610711565b6101236101c2366004612c5e565b6107bd565b61012361085f565b6101566108cb565b6101386101e5366004612c5e565b6108da565b6101236101f8366004612a22565b6108ef565b61013861020b366004612c5e565b610a1d565b61012361021e366004612a3c565b610a32565b610123610231366004612a22565b610ddf565b61023e610ee2565b6001600160a01b031661024f6108cb565b6001600160a01b031614610298576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b600081815260c96020526040808220805460ff191660011790555182917ff52508d5339edf0d7e5060a416df98db067af561bdc60872d29c0439eaa13a0291a250565b60ca6020526000908152604090205460ff1681565b6000546001600160a01b031681565b600061033f6040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e00000081525061045e565b90506000816001600160a01b031663b8f770056040518163ffffffff1660e01b815260040160206040518083038186803b15801561037c57600080fd5b505afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190612d22565b905060006103cb8633878564ffffffffff16610ee6565b9050600061040a6040518060400160405280601a81526020017927ab26afa61921b937b9b9a237b6b0b4b726b2b9b9b2b733b2b960311b81525061045e565b905061041e8482848863ffffffff16610f33565b7f0ee9ffdb2334d78de97ffb066b23a352a4d35180cefb36589d663fbb1eb6f3268260405161044d9190612fa6565b60405180910390a150505050505050565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b838110156104be5781810151838201526020016104a6565b50505050905090810190601f1680156104eb5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561050857600080fd5b505afa15801561051c573d6000803e3d6000fd5b505050506040513d602081101561053257600080fd5b505190505b919050565b60655460ff1690565b60cc546000906001600160a01b031661dead141561057e5760405162461bcd60e51b815260040161057590612fb9565b60405180910390fd5b5060cc546001600160a01b031690565b60006105ce6040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e00000081525061045e565b90506000816001600160a01b0316632a7f18be856040518263ffffffff1660e01b81526004016105fe9190612dbd565b60606040518083038186803b15801561061657600080fd5b505afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190612cc4565b9050600061068d6040518060400160405280601a81526020017927ab26afa61921b937b9b9a237b6b0b4b726b2b9b9b2b733b2b960311b81525061045e565b90506000308286896040516020016106a89493929190612ec5565b604051602081830303815290604052805190602001209050826000015181146106e35760405162461bcd60e51b81526004016105759061322a565b60006106f18a8a8a8a610ee6565b90506107058584838963ffffffff16610f33565b50505050505050505050565b610719610ee2565b6001600160a01b031661072a6108cb565b6001600160a01b031614610773576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6107c5610ee2565b6001600160a01b03166107d66108cb565b6001600160a01b03161461081f576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b600081815260c96020526040808220805460ff191690555182917f52c8a2680a9f4cc0ad0bf88f32096eadbebf0646ea611d93a0ce6a29a024040591a250565b610867610ee2565b6001600160a01b03166108786108cb565b6001600160a01b0316146108c1576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b6108c9610f9b565b565b6033546001600160a01b031690565b60cb6020526000908152604090205460ff1681565b600054600160a81b900460ff168061090a575061090a61103b565b8061091f5750600054600160a01b900460ff16155b61095a5760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015610991576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6000546001600160a01b0316156109ba5760405162461bcd60e51b81526004016105759061318d565b600080546001600160a01b0384166001600160a01b03199182161790915560cc805490911661dead1790556109ed61104c565b6109f5611105565b6109fd611215565b610a056112d7565b8015610a19576000805460ff60a81b191690555b5050565b60c96020526000908152604090205460ff1681565b60026097541415610a8a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260975560408051808201909152601481527327ab26afa61926b2b9b9b0b3b2a932b630bcb2b960611b6020820152600090610ac69061045e565b90506001600160a01b03811615610aff57336001600160a01b03821614610aff5760405162461bcd60e51b8152600401610575906130f0565b610b0761053c565b15610b4c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000610b5a87878787610ee6565b9050610b668184611394565b1515600114610b875760405162461bcd60e51b815260040161057590613146565b8051602080830191909120600081815260cb90925260409091205460ff1615610bc25760405162461bcd60e51b815260040161057590612ff0565b600081815260c9602052604090205460ff1615610bf15760405162461bcd60e51b8152600401610575906130ae565b610c2f6040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e00000081525061045e565b6001600160a01b0316886001600160a01b03161415610c605760405162461bcd60e51b8152600401610575906131d7565b60cc80546001600160a01b0319166001600160a01b03898116919091179091556040516000918a1690610c94908990612dd4565b6000604051808303816000865af19150503d8060008114610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b505060cc80546001600160a01b03191661dead179055905080151560011415610d4f57600082815260cb602052604090819020805460ff19166001179055517f4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c90610d42908490612dbd565b60405180910390a1610d87565b7f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f82604051610d7e9190612dbd565b60405180910390a15b6000833343604051602001610d9e93929190612e22565b60408051601f198184030181529181528151602092830120600090815260ca9092529020805460ff1916600190811790915560975550505050505050505050565b610de7610ee2565b6001600160a01b0316610df86108cb565b6001600160a01b031614610e41576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b6001600160a01b038116610e865760405162461bcd60e51b81526004018080602001828103825260268152602001806132d96026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b606084848484604051602401610eff9493929190612e88565b60408051601f198184030181529190526020810180516001600160e01b031663cbd4ece960e01b1790529050949350505050565b60405163037f703f60e51b81526001600160a01b03851690636fee07e090610f6390869085908790600401612efd565b600060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b5050505050505050565b610fa361053c565b15610fe8576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861101e610ee2565b604080516001600160a01b039092168252519081900360200190a1565b6000611046306113b9565b15905090565b600054600160a81b900460ff1680611067575061106761103b565b8061107c5750600054600160a01b900460ff16155b6110b75760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff161580156110ee576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b8015611102576000805460ff60a81b191690555b50565b600054600160a81b900460ff1680611120575061112061103b565b806111355750600054600160a01b900460ff16155b6111705760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff161580156111a7576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60006111b1610ee2565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611102576000805460ff60a81b1916905550565b600054600160a81b900460ff1680611230575061123061103b565b806112455750600054600160a01b900460ff16155b6112805760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff161580156112b7576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6065805460ff191690558015611102576000805460ff60a81b1916905550565b600054600160a81b900460ff16806112f257506112f261103b565b806113075750600054600160a01b900460ff16155b6113425760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015611379576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60016097558015611102576000805460ff60a81b1916905550565b600061139f826113bf565b80156113b057506113b0838361151c565b90505b92915050565b3b151590565b6000806114006040518060400160405280601881526020017f4f564d5f5374617465436f6d6d69746d656e74436861696e000000000000000081525061045e565b6020840151604051639418bddd60e01b81529192506001600160a01b03831691639418bddd9161143291600401613271565b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190612c3e565b1580156115155750825160208401516040808601519051634d69ee5760e01b81526001600160a01b03851693634d69ee57936114c5939192909190600401612f2f565b60206040518083038186803b1580156114dd57600080fd5b505afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190612c3e565b9392505050565b6000808361155b6040518060400160405280601a81526020017927ab26afa61921b937b9b9a237b6b0b4b726b2b9b9b2b733b2b960311b81525061045e565b60405160200161156c929190612df0565b604051602081830303815290604052805190602001206000604051602001611595929190612dc6565b6040516020818303038152906040528051906020012090506000806115e4602160991b6040516020016115c89190612da5565b60408051601f1981840301815291905260608701518751611676565b909250905060018215151461160b5760405162461bcd60e51b81526004016105759061303b565b60006116168261169f565b905061166b8460405160200161162c9190612dbd565b604051602081830303815290604052600160405160200161164d9190612e5c565b60405160208183030381529060405288608001518460400151611731565b979650505050505050565b60006060600061168586611755565b9050611692818686611785565b9250925050935093915050565b6116a76127c3565b60006116b283611858565b905060405180608001604052806116dc836000815181106116cf57fe5b602002602001015161186b565b81526020016116f1836001815181106116cf57fe5b81526020016117138360028151811061170657fe5b6020026020010151611872565b81526020016117288360038151811061170657fe5b90529392505050565b60008061173d86611755565b905061174b8186868661196b565b9695505050505050565b6060818051906020012060405160200161176f9190612dbd565b6040516020818303038152906040529050919050565b60006060600061179485611991565b905060008060006117a6848a89611a68565b815192955090935091501580806117ba5750815b61180b576040805162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e000000000000604482015290519081900360640190fd5b6000816118275760405180602001604052806000815250611846565b61184686600187038151811061183957fe5b6020026020010151611e0e565b919b919a509098505050505050505050565b60606113b361186683611e2a565b611e4f565b60006113b3825b60006021826000015111156118ce576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015290519081900360640190fd5b60008060006118dc85611fc5565b9194509250905060008160018111156118f157fe5b14611943576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015290519081900360640190fd5b60208086015184018051909184101561174b5760208490036101000a90049695505050505050565b600080600061197b878686611785565b9150915081801561166b575061166b86826122ee565b6060600061199e83611858565b90506000815167ffffffffffffffff811180156119ba57600080fd5b506040519080825280602002602001820160405280156119f457816020015b6119e16127ea565b8152602001906001900390816119d95790505b50905060005b8251811015611a60576000611a21848381518110611a1457fe5b6020026020010151612304565b90506040518060400160405280828152602001611a3d83611858565b815250838381518110611a4c57fe5b6020908102919091010152506001016119fa565b509392505050565b60006060818080611a7887612393565b905085600080611a866127ea565b60005b8c51811015611de6578c8181518110611a9e57fe5b6020026020010151915082840193506001870196508360001415611b1257815180516020909101208514611b0d576040805162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b604482015290519081900360640190fd5b611bd9565b815151602011611b7957815180516020909101208514611b0d576040805162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c20686173680000000000604482015290519081900360640190fd5b84611b878360000151612490565b14611bd9576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f64652068617368000000000000604482015290519081900360640190fd5b60208201515160111415611c48578551841415611bf557611de6565b6000868581518110611c0357fe5b602001015160f81c60f81b60f81c9050600083602001518260ff1681518110611c2857fe5b60200260200101519050611c3b816124bc565b9650600194505050611dde565b60028260200151511415611d91576000611c61836124f2565b9050600081600081518110611c7257fe5b016020015160f81c9050600181166002036000611c928460ff8416612510565b90506000611ca08b8a612510565b90506000611cae838361253d565b905060ff851660021480611cc5575060ff85166003145b15611cf757808351148015611cda5750808251145b15611ce457988901985b50600160ff1b9950611de6945050505050565b60ff85161580611d0a575060ff85166001145b15611d5a5782518114611d2a5750600160ff1b9950611de6945050505050565b611d4b8860200151600181518110611d3e57fe5b60200260200101516124bc565b9a509750611dde945050505050565b60405162461bcd60e51b81526004018080602001828103825260268152602001806133576026913960400191505060405180910390fd5b6040805162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e000000604482015290519081900360640190fd5b600101611a89565b50600160ff1b841486611df98786612510565b909e909d50909b509950505050505050505050565b602081015180516060916113b3916000198101908110611a1457fe5b611e32612804565b506040805180820190915281518152602082810190820152919050565b6060600080611e5d84611fc5565b91935090915060019050816001811115611e7357fe5b14611ec5576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e000000000000000000604482015290519081900360640190fd5b6040805160208082526104208201909252600091816020015b611ee6612804565b815260200190600190039081611ede5790505090506000835b8651811015611fba5760208210611f475760405162461bcd60e51b815260040180806020018281038252602a8152602001806132ff602a913960400191505060405180910390fd5b600080611f736040518060400160405280858c60000151038152602001858c6020015101815250611fc5565b509150915060405180604001604052808383018152602001848b6020015101815250858581518110611fa157fe5b6020908102919091010152600193909301920101611eff565b508152949350505050565b600080600080846000015111612022576040805162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e0000000000000000604482015290519081900360640190fd5b6020840151805160001a607f81116120475760006001600094509450945050506122e7565b60b781116120bc578551607f1982019081106120aa576040805162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e00000000000000604482015290519081900360640190fd5b600195509350600092506122e7915050565b60bf81116121a057855160b619820190811061211f576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e00604482015290519081900360640190fd5b6000816020036101000a600185015104905080820188600001511161218b576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e0000000000000000604482015290519081900360640190fd5b600190910195509350600092506122e7915050565b60f7811161221457855160bf198201908110612203576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e000000000000000000604482015290519081900360640190fd5b6001955093508492506122e7915050565b855160f619820190811061226f576040805162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e000000604482015290519081900360640190fd5b6000816020036101000a60018501510490508082018860000151116122d4576040805162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b604482015290519081900360640190fd5b60019182019650945092506122e7915050565b9193909250565b8051602091820120825192909101919091201490565b6060600080600061231485611fc5565b91945092509050600081600181111561232957fe5b1461237b576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e0000000000000000604482015290519081900360640190fd5b61238a856020015184846125a3565b95945050505050565b60606000825160020267ffffffffffffffff811180156123b257600080fd5b506040519080825280601f01601f1916602001820160405280156123dd576020820181803683370190505b50905060005b83518110156124895760048482815181106123fa57fe5b602001015160f81c60f81b6001600160f81b031916901c82826002028151811061242057fe5b60200101906001600160f81b031916908160001a905350601084828151811061244557fe5b016020015160f81c8161245457fe5b0660f81b82826002026001018151811061246a57fe5b60200101906001600160f81b031916908160001a9053506001016123e3565b5092915050565b60006020825110156124a757506020810151610537565b81806020019051602081101561053257600080fd5b600060606020836000015110156124dd576124d683612651565b90506124e9565b6124e683612304565b90505b61151581612490565b60606113b361250b8360200151600081518110611a1457fe5b612393565b60608251821061252f57506040805160208101909152600081526113b3565b6113b083838486510361265c565b6000805b8084511180156125515750808351115b8015612596575082818151811061256457fe5b602001015160f81c60f81b6001600160f81b03191684828151811061258557fe5b01602001516001600160f81b031916145b156113b057600101612541565b606060008267ffffffffffffffff811180156125be57600080fd5b506040519080825280601f01601f1916602001820160405280156125e9576020820181803683370190505b5090508051600014156125fd579050611515565b8484016020820160005b60208604811015612628578251825260209283019290910190600101612607565b5080519151601f959095166020036101000a600019019182169119909416179092525092915050565b60606113b3826127ad565b60608182601f0110156126a7576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b8282840110156126ef576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b8183018451101561273b576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b60608215801561275a57604051915060008252602082016040526127a4565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561279357805183526020928301920161277b565b5050858452601f01601f1916604052505b50949350505050565b60606113b38260200151600084600001516125a3565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806040016040528060608152602001606081525090565b604051806040016040528060008152602001600081525090565b600067ffffffffffffffff83111561283257fe5b612845601f8401601f1916602001613284565b905082815283838301111561285957600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461053757600080fd5b600082601f830112612897578081fd5b6113b08383356020850161281e565b600060a082840312156128b7578081fd5b60405160a0810167ffffffffffffffff82821081831117156128d557fe5b8160405282935084358352602085013560208401526040850135604084015260608501356060840152608085013591508082111561291257600080fd5b5061291f85828601612887565b6080830152505092915050565b60006040828403121561293d578081fd5b6040516040810167ffffffffffffffff828210818311171561295b57fe5b816040528293508435835260209150818501358181111561297b57600080fd5b8501601f8101871361298c57600080fd5b80358281111561299857fe5b83810292506129a8848401613284565b8181528481019083860185850187018b10156129c357600080fd5b600095505b838610156129e65780358352600195909501949186019186016129c8565b5080868801525050505050505092915050565b803563ffffffff8116811461053757600080fd5b805164ffffffffff8116811461053757600080fd5b600060208284031215612a33578081fd5b6113b082612870565b600080600080600060a08688031215612a53578081fd5b612a5c86612870565b9450612a6a60208701612870565b9350604086013567ffffffffffffffff80821115612a86578283fd5b612a9289838a01612887565b9450606088013593506080880135915080821115612aae578283fd5b9087019060a0828a031215612ac1578283fd5b612acb60a0613284565b82358152602083013582811115612ae0578485fd5b612aec8b8286016128a6565b602083015250604083013582811115612b03578485fd5b612b0f8b82860161292c565b604083015250606083013582811115612b26578485fd5b612b328b828601612887565b606083015250608083013582811115612b49578485fd5b612b558b828601612887565b6080830152508093505050509295509295909350565b600080600080600060a08688031215612b82578081fd5b612b8b86612870565b9450612b9960208701612870565b9350604086013567ffffffffffffffff811115612bb4578182fd5b612bc088828901612887565b93505060608601359150612bd6608087016129f9565b90509295509295909350565b600080600060608486031215612bf6578283fd5b612bff84612870565b9250602084013567ffffffffffffffff811115612c1a578283fd5b612c2686828701612887565b925050612c35604085016129f9565b90509250925092565b600060208284031215612c4f578081fd5b815180151581146113b0578182fd5b600060208284031215612c6f578081fd5b5035919050565b600060208284031215612c87578081fd5b813567ffffffffffffffff811115612c9d578182fd5b8201601f81018413612cad578182fd5b612cbc8482356020840161281e565b949350505050565b600060608284031215612cd5578081fd5b6040516060810181811067ffffffffffffffff82111715612cf257fe5b60405282518152612d0560208401612a0d565b6020820152612d1660408401612a0d565b60408201529392505050565b600060208284031215612d33578081fd5b6113b082612a0d565b60008151808452612d548160208601602086016132a8565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a06080850152612cbc60a0850182612d3c565b60609190911b6001600160601b031916815260140190565b90815260200190565b918252602082015260400190565b60008251612de68184602087016132a8565b9190910192915050565b60008351612e028184602088016132a8565b60609390931b6001600160601b0319169190920190815260140192915050565b60008451612e348184602089016132a8565b60609490941b6001600160601b03191691909301908152601481019190915260340192915050565b60f89190911b6001600160f81b031916815260010190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152608060408201819052600090612eb490830185612d3c565b905082606083015295945050505050565b6001600160a01b0385811682528416602082015263ffffffff8316604082015260806060820181905260009061174b90830184612d3c565b600060018060a01b03851682528360208301526060604083015261238a6060830184612d3c565b901515815260200190565b60008482526020606081840152612f496060840186612d68565b838103604085015260408101855182528286015160408484015281815180845260608501915085830194508693505b80841015612f985784518252938501936001939093019290850190612f78565b509998505050505050505050565b6000602082526113b06020830184612d3c565b6020808252601f908201527f78446f6d61696e4d65737361676553656e646572206973206e6f742073657400604082015260600190565b6020808252602b908201527f50726f7669646564206d6573736167652068617320616c72656164792062656560408201526a37103932b1b2b4bb32b21760a91b606082015260800190565b6020808252604d908201527f4d6573736167652070617373696e67207072656465706c6f7920686173206e6f60408201527f74206265656e20696e697469616c697a6564206f7220696e76616c696420707260608201526c37b7b310383937bb34b232b21760991b608082015260a00190565b60208082526022908201527f50726f7669646564206d65737361676520686173206265656e20626c6f636b65604082015261321760f11b606082015260800190565b60208082526036908201527f4f6e6c79204f564d5f4c324d65737361676552656c617965722063616e2072656040820152753630bc90261916ba3796a6189036b2b9b9b0b3b2b99760511b606082015260800190565b60208082526027908201527f50726f7669646564206d65737361676520636f756c64206e6f742062652076656040820152663934b334b2b21760c91b606082015260800190565b6020808252602a908201527f4c3143726f7373446f6d61696e4d657373656e67657220616c72656164792069604082015269373a34b0b634bd32b21760b11b606082015260800190565b60208082526033908201527f43616e6e6f742073656e64204c322d3e4c31206d6573736167657320746f204c604082015272189039bcb9ba32b69031b7b73a3930b1ba399760691b606082015260800190565b60208082526027908201527f50726f7669646564206d65737361676520686173206e6f74206265656e20656e60408201526638bab2bab2b21760c91b606082015260800190565b6000602082526113b06020830184612d68565b60405181810167ffffffffffffffff811182821017156132a057fe5b604052919050565b60005b838110156132c35781810151838201526020016132ab565b838111156132d2576000848401525b5050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737350726f766964656420524c50206c6973742065786365656473206d6178206c697374206c656e6774682e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656452656365697665642061206e6f6465207769746820616e20756e6b6e6f776e207072656669784f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122046b22cebed82725feab0a108697421c652995cff561271612ace5dc70c2b956664736f6c63430007060033",deployedBytecode:"0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063b1b1b20911610071578063b1b1b209146101d7578063c4d66de8146101ea578063c6b94ab0146101fd578063d7fd19dd14610210578063f2fde38b146102235761010b565b8063715018a6146101ac57806381ada46c146101b45780638456cb59146101c75780638da5cb5b146101cf5761010b565b8063461a4478116100de578063461a4478146101765780635c975abb146101895780636e296e4514610191578063706ceab6146101995761010b565b80630ecf2eea1461011057806321d800ec14610125578063299ca4781461014e5780633dbb202b14610163575b600080fd5b61012361011e366004612c5e565b610236565b005b610138610133366004612c5e565b6102db565b6040516101459190612f24565b60405180910390f35b6101566102f0565b6040516101459190612e74565b610123610171366004612be2565b6102ff565b610156610184366004612c76565b61045e565b61013861053c565b610156610545565b6101236101a7366004612b6b565b61058e565b610123610711565b6101236101c2366004612c5e565b6107bd565b61012361085f565b6101566108cb565b6101386101e5366004612c5e565b6108da565b6101236101f8366004612a22565b6108ef565b61013861020b366004612c5e565b610a1d565b61012361021e366004612a3c565b610a32565b610123610231366004612a22565b610ddf565b61023e610ee2565b6001600160a01b031661024f6108cb565b6001600160a01b031614610298576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b600081815260c96020526040808220805460ff191660011790555182917ff52508d5339edf0d7e5060a416df98db067af561bdc60872d29c0439eaa13a0291a250565b60ca6020526000908152604090205460ff1681565b6000546001600160a01b031681565b600061033f6040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e00000081525061045e565b90506000816001600160a01b031663b8f770056040518163ffffffff1660e01b815260040160206040518083038186803b15801561037c57600080fd5b505afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190612d22565b905060006103cb8633878564ffffffffff16610ee6565b9050600061040a6040518060400160405280601a81526020017927ab26afa61921b937b9b9a237b6b0b4b726b2b9b9b2b733b2b960311b81525061045e565b905061041e8482848863ffffffff16610f33565b7f0ee9ffdb2334d78de97ffb066b23a352a4d35180cefb36589d663fbb1eb6f3268260405161044d9190612fa6565b60405180910390a150505050505050565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b838110156104be5781810151838201526020016104a6565b50505050905090810190601f1680156104eb5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561050857600080fd5b505afa15801561051c573d6000803e3d6000fd5b505050506040513d602081101561053257600080fd5b505190505b919050565b60655460ff1690565b60cc546000906001600160a01b031661dead141561057e5760405162461bcd60e51b815260040161057590612fb9565b60405180910390fd5b5060cc546001600160a01b031690565b60006105ce6040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e00000081525061045e565b90506000816001600160a01b0316632a7f18be856040518263ffffffff1660e01b81526004016105fe9190612dbd565b60606040518083038186803b15801561061657600080fd5b505afa15801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190612cc4565b9050600061068d6040518060400160405280601a81526020017927ab26afa61921b937b9b9a237b6b0b4b726b2b9b9b2b733b2b960311b81525061045e565b90506000308286896040516020016106a89493929190612ec5565b604051602081830303815290604052805190602001209050826000015181146106e35760405162461bcd60e51b81526004016105759061322a565b60006106f18a8a8a8a610ee6565b90506107058584838963ffffffff16610f33565b50505050505050505050565b610719610ee2565b6001600160a01b031661072a6108cb565b6001600160a01b031614610773576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6107c5610ee2565b6001600160a01b03166107d66108cb565b6001600160a01b03161461081f576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b600081815260c96020526040808220805460ff191690555182917f52c8a2680a9f4cc0ad0bf88f32096eadbebf0646ea611d93a0ce6a29a024040591a250565b610867610ee2565b6001600160a01b03166108786108cb565b6001600160a01b0316146108c1576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b6108c9610f9b565b565b6033546001600160a01b031690565b60cb6020526000908152604090205460ff1681565b600054600160a81b900460ff168061090a575061090a61103b565b8061091f5750600054600160a01b900460ff16155b61095a5760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015610991576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6000546001600160a01b0316156109ba5760405162461bcd60e51b81526004016105759061318d565b600080546001600160a01b0384166001600160a01b03199182161790915560cc805490911661dead1790556109ed61104c565b6109f5611105565b6109fd611215565b610a056112d7565b8015610a19576000805460ff60a81b191690555b5050565b60c96020526000908152604090205460ff1681565b60026097541415610a8a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260975560408051808201909152601481527327ab26afa61926b2b9b9b0b3b2a932b630bcb2b960611b6020820152600090610ac69061045e565b90506001600160a01b03811615610aff57336001600160a01b03821614610aff5760405162461bcd60e51b8152600401610575906130f0565b610b0761053c565b15610b4c576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000610b5a87878787610ee6565b9050610b668184611394565b1515600114610b875760405162461bcd60e51b815260040161057590613146565b8051602080830191909120600081815260cb90925260409091205460ff1615610bc25760405162461bcd60e51b815260040161057590612ff0565b600081815260c9602052604090205460ff1615610bf15760405162461bcd60e51b8152600401610575906130ae565b610c2f6040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e00000081525061045e565b6001600160a01b0316886001600160a01b03161415610c605760405162461bcd60e51b8152600401610575906131d7565b60cc80546001600160a01b0319166001600160a01b03898116919091179091556040516000918a1690610c94908990612dd4565b6000604051808303816000865af19150503d8060008114610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b505060cc80546001600160a01b03191661dead179055905080151560011415610d4f57600082815260cb602052604090819020805460ff19166001179055517f4641df4a962071e12719d8c8c8e5ac7fc4d97b927346a3d7a335b1f7517e133c90610d42908490612dbd565b60405180910390a1610d87565b7f99d0e048484baa1b1540b1367cb128acd7ab2946d1ed91ec10e3c85e4bf51b8f82604051610d7e9190612dbd565b60405180910390a15b6000833343604051602001610d9e93929190612e22565b60408051601f198184030181529181528151602092830120600090815260ca9092529020805460ff1916600190811790915560975550505050505050505050565b610de7610ee2565b6001600160a01b0316610df86108cb565b6001600160a01b031614610e41576040805162461bcd60e51b8152602060048201819052602482015260008051602061337d833981519152604482015290519081900360640190fd5b6001600160a01b038116610e865760405162461bcd60e51b81526004018080602001828103825260268152602001806132d96026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b606084848484604051602401610eff9493929190612e88565b60408051601f198184030181529190526020810180516001600160e01b031663cbd4ece960e01b1790529050949350505050565b60405163037f703f60e51b81526001600160a01b03851690636fee07e090610f6390869085908790600401612efd565b600060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b5050505050505050565b610fa361053c565b15610fe8576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861101e610ee2565b604080516001600160a01b039092168252519081900360200190a1565b6000611046306113b9565b15905090565b600054600160a81b900460ff1680611067575061106761103b565b8061107c5750600054600160a01b900460ff16155b6110b75760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff161580156110ee576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b8015611102576000805460ff60a81b191690555b50565b600054600160a81b900460ff1680611120575061112061103b565b806111355750600054600160a01b900460ff16155b6111705760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff161580156111a7576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60006111b1610ee2565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611102576000805460ff60a81b1916905550565b600054600160a81b900460ff1680611230575061123061103b565b806112455750600054600160a01b900460ff16155b6112805760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff161580156112b7576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b6065805460ff191690558015611102576000805460ff60a81b1916905550565b600054600160a81b900460ff16806112f257506112f261103b565b806113075750600054600160a01b900460ff16155b6113425760405162461bcd60e51b815260040180806020018281038252602e815260200180613329602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015611379576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b60016097558015611102576000805460ff60a81b1916905550565b600061139f826113bf565b80156113b057506113b0838361151c565b90505b92915050565b3b151590565b6000806114006040518060400160405280601881526020017f4f564d5f5374617465436f6d6d69746d656e74436861696e000000000000000081525061045e565b6020840151604051639418bddd60e01b81529192506001600160a01b03831691639418bddd9161143291600401613271565b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190612c3e565b1580156115155750825160208401516040808601519051634d69ee5760e01b81526001600160a01b03851693634d69ee57936114c5939192909190600401612f2f565b60206040518083038186803b1580156114dd57600080fd5b505afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190612c3e565b9392505050565b6000808361155b6040518060400160405280601a81526020017927ab26afa61921b937b9b9a237b6b0b4b726b2b9b9b2b733b2b960311b81525061045e565b60405160200161156c929190612df0565b604051602081830303815290604052805190602001206000604051602001611595929190612dc6565b6040516020818303038152906040528051906020012090506000806115e4602160991b6040516020016115c89190612da5565b60408051601f1981840301815291905260608701518751611676565b909250905060018215151461160b5760405162461bcd60e51b81526004016105759061303b565b60006116168261169f565b905061166b8460405160200161162c9190612dbd565b604051602081830303815290604052600160405160200161164d9190612e5c565b60405160208183030381529060405288608001518460400151611731565b979650505050505050565b60006060600061168586611755565b9050611692818686611785565b9250925050935093915050565b6116a76127c3565b60006116b283611858565b905060405180608001604052806116dc836000815181106116cf57fe5b602002602001015161186b565b81526020016116f1836001815181106116cf57fe5b81526020016117138360028151811061170657fe5b6020026020010151611872565b81526020016117288360038151811061170657fe5b90529392505050565b60008061173d86611755565b905061174b8186868661196b565b9695505050505050565b6060818051906020012060405160200161176f9190612dbd565b6040516020818303038152906040529050919050565b60006060600061179485611991565b905060008060006117a6848a89611a68565b815192955090935091501580806117ba5750815b61180b576040805162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e000000000000604482015290519081900360640190fd5b6000816118275760405180602001604052806000815250611846565b61184686600187038151811061183957fe5b6020026020010151611e0e565b919b919a509098505050505050505050565b60606113b361186683611e2a565b611e4f565b60006113b3825b60006021826000015111156118ce576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015290519081900360640190fd5b60008060006118dc85611fc5565b9194509250905060008160018111156118f157fe5b14611943576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e000000000000604482015290519081900360640190fd5b60208086015184018051909184101561174b5760208490036101000a90049695505050505050565b600080600061197b878686611785565b9150915081801561166b575061166b86826122ee565b6060600061199e83611858565b90506000815167ffffffffffffffff811180156119ba57600080fd5b506040519080825280602002602001820160405280156119f457816020015b6119e16127ea565b8152602001906001900390816119d95790505b50905060005b8251811015611a60576000611a21848381518110611a1457fe5b6020026020010151612304565b90506040518060400160405280828152602001611a3d83611858565b815250838381518110611a4c57fe5b6020908102919091010152506001016119fa565b509392505050565b60006060818080611a7887612393565b905085600080611a866127ea565b60005b8c51811015611de6578c8181518110611a9e57fe5b6020026020010151915082840193506001870196508360001415611b1257815180516020909101208514611b0d576040805162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b604482015290519081900360640190fd5b611bd9565b815151602011611b7957815180516020909101208514611b0d576040805162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c20686173680000000000604482015290519081900360640190fd5b84611b878360000151612490565b14611bd9576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f64652068617368000000000000604482015290519081900360640190fd5b60208201515160111415611c48578551841415611bf557611de6565b6000868581518110611c0357fe5b602001015160f81c60f81b60f81c9050600083602001518260ff1681518110611c2857fe5b60200260200101519050611c3b816124bc565b9650600194505050611dde565b60028260200151511415611d91576000611c61836124f2565b9050600081600081518110611c7257fe5b016020015160f81c9050600181166002036000611c928460ff8416612510565b90506000611ca08b8a612510565b90506000611cae838361253d565b905060ff851660021480611cc5575060ff85166003145b15611cf757808351148015611cda5750808251145b15611ce457988901985b50600160ff1b9950611de6945050505050565b60ff85161580611d0a575060ff85166001145b15611d5a5782518114611d2a5750600160ff1b9950611de6945050505050565b611d4b8860200151600181518110611d3e57fe5b60200260200101516124bc565b9a509750611dde945050505050565b60405162461bcd60e51b81526004018080602001828103825260268152602001806133576026913960400191505060405180910390fd5b6040805162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e000000604482015290519081900360640190fd5b600101611a89565b50600160ff1b841486611df98786612510565b909e909d50909b509950505050505050505050565b602081015180516060916113b3916000198101908110611a1457fe5b611e32612804565b506040805180820190915281518152602082810190820152919050565b6060600080611e5d84611fc5565b91935090915060019050816001811115611e7357fe5b14611ec5576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e000000000000000000604482015290519081900360640190fd5b6040805160208082526104208201909252600091816020015b611ee6612804565b815260200190600190039081611ede5790505090506000835b8651811015611fba5760208210611f475760405162461bcd60e51b815260040180806020018281038252602a8152602001806132ff602a913960400191505060405180910390fd5b600080611f736040518060400160405280858c60000151038152602001858c6020015101815250611fc5565b509150915060405180604001604052808383018152602001848b6020015101815250858581518110611fa157fe5b6020908102919091010152600193909301920101611eff565b508152949350505050565b600080600080846000015111612022576040805162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e0000000000000000604482015290519081900360640190fd5b6020840151805160001a607f81116120475760006001600094509450945050506122e7565b60b781116120bc578551607f1982019081106120aa576040805162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e00000000000000604482015290519081900360640190fd5b600195509350600092506122e7915050565b60bf81116121a057855160b619820190811061211f576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e00604482015290519081900360640190fd5b6000816020036101000a600185015104905080820188600001511161218b576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e0000000000000000604482015290519081900360640190fd5b600190910195509350600092506122e7915050565b60f7811161221457855160bf198201908110612203576040805162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e000000000000000000604482015290519081900360640190fd5b6001955093508492506122e7915050565b855160f619820190811061226f576040805162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e000000604482015290519081900360640190fd5b6000816020036101000a60018501510490508082018860000151116122d4576040805162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b604482015290519081900360640190fd5b60019182019650945092506122e7915050565b9193909250565b8051602091820120825192909101919091201490565b6060600080600061231485611fc5565b91945092509050600081600181111561232957fe5b1461237b576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e0000000000000000604482015290519081900360640190fd5b61238a856020015184846125a3565b95945050505050565b60606000825160020267ffffffffffffffff811180156123b257600080fd5b506040519080825280601f01601f1916602001820160405280156123dd576020820181803683370190505b50905060005b83518110156124895760048482815181106123fa57fe5b602001015160f81c60f81b6001600160f81b031916901c82826002028151811061242057fe5b60200101906001600160f81b031916908160001a905350601084828151811061244557fe5b016020015160f81c8161245457fe5b0660f81b82826002026001018151811061246a57fe5b60200101906001600160f81b031916908160001a9053506001016123e3565b5092915050565b60006020825110156124a757506020810151610537565b81806020019051602081101561053257600080fd5b600060606020836000015110156124dd576124d683612651565b90506124e9565b6124e683612304565b90505b61151581612490565b60606113b361250b8360200151600081518110611a1457fe5b612393565b60608251821061252f57506040805160208101909152600081526113b3565b6113b083838486510361265c565b6000805b8084511180156125515750808351115b8015612596575082818151811061256457fe5b602001015160f81c60f81b6001600160f81b03191684828151811061258557fe5b01602001516001600160f81b031916145b156113b057600101612541565b606060008267ffffffffffffffff811180156125be57600080fd5b506040519080825280601f01601f1916602001820160405280156125e9576020820181803683370190505b5090508051600014156125fd579050611515565b8484016020820160005b60208604811015612628578251825260209283019290910190600101612607565b5080519151601f959095166020036101000a600019019182169119909416179092525092915050565b60606113b3826127ad565b60608182601f0110156126a7576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b8282840110156126ef576040805162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015290519081900360640190fd5b8183018451101561273b576040805162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015290519081900360640190fd5b60608215801561275a57604051915060008252602082016040526127a4565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561279357805183526020928301920161277b565b5050858452601f01601f1916604052505b50949350505050565b60606113b38260200151600084600001516125a3565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806040016040528060608152602001606081525090565b604051806040016040528060008152602001600081525090565b600067ffffffffffffffff83111561283257fe5b612845601f8401601f1916602001613284565b905082815283838301111561285957600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461053757600080fd5b600082601f830112612897578081fd5b6113b08383356020850161281e565b600060a082840312156128b7578081fd5b60405160a0810167ffffffffffffffff82821081831117156128d557fe5b8160405282935084358352602085013560208401526040850135604084015260608501356060840152608085013591508082111561291257600080fd5b5061291f85828601612887565b6080830152505092915050565b60006040828403121561293d578081fd5b6040516040810167ffffffffffffffff828210818311171561295b57fe5b816040528293508435835260209150818501358181111561297b57600080fd5b8501601f8101871361298c57600080fd5b80358281111561299857fe5b83810292506129a8848401613284565b8181528481019083860185850187018b10156129c357600080fd5b600095505b838610156129e65780358352600195909501949186019186016129c8565b5080868801525050505050505092915050565b803563ffffffff8116811461053757600080fd5b805164ffffffffff8116811461053757600080fd5b600060208284031215612a33578081fd5b6113b082612870565b600080600080600060a08688031215612a53578081fd5b612a5c86612870565b9450612a6a60208701612870565b9350604086013567ffffffffffffffff80821115612a86578283fd5b612a9289838a01612887565b9450606088013593506080880135915080821115612aae578283fd5b9087019060a0828a031215612ac1578283fd5b612acb60a0613284565b82358152602083013582811115612ae0578485fd5b612aec8b8286016128a6565b602083015250604083013582811115612b03578485fd5b612b0f8b82860161292c565b604083015250606083013582811115612b26578485fd5b612b328b828601612887565b606083015250608083013582811115612b49578485fd5b612b558b828601612887565b6080830152508093505050509295509295909350565b600080600080600060a08688031215612b82578081fd5b612b8b86612870565b9450612b9960208701612870565b9350604086013567ffffffffffffffff811115612bb4578182fd5b612bc088828901612887565b93505060608601359150612bd6608087016129f9565b90509295509295909350565b600080600060608486031215612bf6578283fd5b612bff84612870565b9250602084013567ffffffffffffffff811115612c1a578283fd5b612c2686828701612887565b925050612c35604085016129f9565b90509250925092565b600060208284031215612c4f578081fd5b815180151581146113b0578182fd5b600060208284031215612c6f578081fd5b5035919050565b600060208284031215612c87578081fd5b813567ffffffffffffffff811115612c9d578182fd5b8201601f81018413612cad578182fd5b612cbc8482356020840161281e565b949350505050565b600060608284031215612cd5578081fd5b6040516060810181811067ffffffffffffffff82111715612cf257fe5b60405282518152612d0560208401612a0d565b6020820152612d1660408401612a0d565b60408201529392505050565b600060208284031215612d33578081fd5b6113b082612a0d565b60008151808452612d548160208601602086016132a8565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a06080850152612cbc60a0850182612d3c565b60609190911b6001600160601b031916815260140190565b90815260200190565b918252602082015260400190565b60008251612de68184602087016132a8565b9190910192915050565b60008351612e028184602088016132a8565b60609390931b6001600160601b0319169190920190815260140192915050565b60008451612e348184602089016132a8565b60609490941b6001600160601b03191691909301908152601481019190915260340192915050565b60f89190911b6001600160f81b031916815260010190565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152608060408201819052600090612eb490830185612d3c565b905082606083015295945050505050565b6001600160a01b0385811682528416602082015263ffffffff8316604082015260806060820181905260009061174b90830184612d3c565b600060018060a01b03851682528360208301526060604083015261238a6060830184612d3c565b901515815260200190565b60008482526020606081840152612f496060840186612d68565b838103604085015260408101855182528286015160408484015281815180845260608501915085830194508693505b80841015612f985784518252938501936001939093019290850190612f78565b509998505050505050505050565b6000602082526113b06020830184612d3c565b6020808252601f908201527f78446f6d61696e4d65737361676553656e646572206973206e6f742073657400604082015260600190565b6020808252602b908201527f50726f7669646564206d6573736167652068617320616c72656164792062656560408201526a37103932b1b2b4bb32b21760a91b606082015260800190565b6020808252604d908201527f4d6573736167652070617373696e67207072656465706c6f7920686173206e6f60408201527f74206265656e20696e697469616c697a6564206f7220696e76616c696420707260608201526c37b7b310383937bb34b232b21760991b608082015260a00190565b60208082526022908201527f50726f7669646564206d65737361676520686173206265656e20626c6f636b65604082015261321760f11b606082015260800190565b60208082526036908201527f4f6e6c79204f564d5f4c324d65737361676552656c617965722063616e2072656040820152753630bc90261916ba3796a6189036b2b9b9b0b3b2b99760511b606082015260800190565b60208082526027908201527f50726f7669646564206d65737361676520636f756c64206e6f742062652076656040820152663934b334b2b21760c91b606082015260800190565b6020808252602a908201527f4c3143726f7373446f6d61696e4d657373656e67657220616c72656164792069604082015269373a34b0b634bd32b21760b11b606082015260800190565b60208082526033908201527f43616e6e6f742073656e64204c322d3e4c31206d6573736167657320746f204c604082015272189039bcb9ba32b69031b7b73a3930b1ba399760691b606082015260800190565b60208082526027908201527f50726f7669646564206d65737361676520686173206e6f74206265656e20656e60408201526638bab2bab2b21760c91b606082015260800190565b6000602082526113b06020830184612d68565b60405181810167ffffffffffffffff811182821017156132a057fe5b604052919050565b60005b838110156132c35781810151838201526020016132ab565b838111156132d2576000848401525b5050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737350726f766964656420524c50206c6973742065786365656473206d6178206c697374206c656e6774682e496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656452656365697665642061206e6f6465207769746820616e20756e6b6e6f776e207072656669784f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122046b22cebed82725feab0a108697421c652995cff561271612ace5dc70c2b956664736f6c63430007060033",devdoc:{details:"The L1 Cross Domain Messenger contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{"allowMessage(bytes32)":{params:{_xDomainCalldataHash:"Hash of the message to block."}},"blockMessage(bytes32)":{params:{_xDomainCalldataHash:"Hash of the message to block."}},"initialize(address)":{params:{_libAddressManager:"Address of the Address Manager."}},"owner()":{details:"Returns the address of the current owner."},"paused()":{details:"Returns true if the contract is paused, and false otherwise."},"relayMessage(address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))":{params:{_message:"Message to send to the target.",_messageNonce:"Nonce for the provided message.",_proof:"Inclusion proof for the given message.",_sender:"Message sender address.",_target:"Target contract address."}},"renounceOwnership()":{details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"replayMessage(address,address,bytes,uint256,uint32)":{params:{_gasLimit:"Gas limit for the provided message.",_message:"Message to send to the target.",_queueIndex:"CTC Queue index for the message to replay.",_sender:"Original sender address.",_target:"Target contract address."}},"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}},"sendMessage(address,bytes,uint32)":{params:{_gasLimit:"Gas limit for the provided message.",_message:"Message to send to the target.",_target:"Target contract address."}},"transferOwnership(address)":{details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},title:"OVM_L1CrossDomainMessenger",version:1},userdoc:{kind:"user",methods:{"allowMessage(bytes32)":{notice:"Allow a message."},"blockMessage(bytes32)":{notice:"Block a message."},constructor:{notice:"This contract is intended to be behind a delegate proxy. We pass the zero address to the address resolver just to satisfy the constructor. We still need to set this value in initialize()."},"pause()":{notice:"Pause relaying."},"relayMessage(address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))":{notice:"Relays a cross domain message to a contract."},"replayMessage(address,address,bytes,uint256,uint32)":{notice:"Replays a cross domain message to the target messenger."},"resolve(string)":{notice:"Resolves the address associated with a given name."},"sendMessage(address,bytes,uint32)":{notice:"Sends a cross domain message to the target messenger."}},version:1},storageLayout:{storage:[{astId:15312,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15305"},{astId:137,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"_initialized",offset:20,slot:"0",type:"t_bool"},{astId:140,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"_initializing",offset:21,slot:"0",type:"t_bool"},{astId:484,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"__gap",offset:0,slot:"1",type:"t_array(t_uint256)50_storage"},{astId:10,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"_owner",offset:0,slot:"51",type:"t_address"},{astId:129,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"__gap",offset:0,slot:"52",type:"t_array(t_uint256)49_storage"},{astId:506,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"_paused",offset:0,slot:"101",type:"t_bool"},{astId:597,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"__gap",offset:0,slot:"102",type:"t_array(t_uint256)49_storage"},{astId:612,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"_status",offset:0,slot:"151",type:"t_uint256"},{astId:655,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"__gap",offset:0,slot:"152",type:"t_array(t_uint256)49_storage"},{astId:2756,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"blockedMessages",offset:0,slot:"201",type:"t_mapping(t_bytes32,t_bool)"},{astId:2760,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"relayedMessages",offset:0,slot:"202",type:"t_mapping(t_bytes32,t_bool)"},{astId:2764,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"successfulMessages",offset:0,slot:"203",type:"t_mapping(t_bytes32,t_bool)"},{astId:2767,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1CrossDomainMessenger.sol:OVM_L1CrossDomainMessenger",label:"xDomainMsgSender",offset:0,slot:"204",type:"t_address"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},"t_array(t_uint256)49_storage":{base:"t_uint256",encoding:"inplace",label:"uint256[49]",numberOfBytes:"1568"},"t_array(t_uint256)50_storage":{base:"t_uint256",encoding:"inplace",label:"uint256[50]",numberOfBytes:"1600"},t_bool:{encoding:"inplace",label:"bool",numberOfBytes:"1"},t_bytes32:{encoding:"inplace",label:"bytes32",numberOfBytes:"32"},"t_contract(Lib_AddressManager)15305":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"},"t_mapping(t_bytes32,t_bool)":{encoding:"mapping",key:"t_bytes32",label:"mapping(bytes32 => bool)",numberOfBytes:"32",value:"t_bool"},t_uint256:{encoding:"inplace",label:"uint256",numberOfBytes:"32"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_L1CrossDomainMessenger.json"}],[355,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0xF26391FBB1f77481f80a7d646AC08ba3817eA891",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes",name:"message",type:"bytes"},{internalType:"uint256",name:"messageNonce",type:"uint256"},{components:[{internalType:"bytes32",name:"stateRoot",type:"bytes32"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"stateRootBatchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"stateRootProof",type:"tuple"},{internalType:"bytes",name:"stateTrieWitness",type:"bytes"},{internalType:"bytes",name:"storageTrieWitness",type:"bytes"}],internalType:"struct iOVM_L1CrossDomainMessenger.L2MessageInclusionProof",name:"proof",type:"tuple"}],internalType:"struct iOVM_L1MultiMessageRelayer.L2ToL1Message[]",name:"_messages",type:"tuple[]"}],name:"batchRelayMessages",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],transactionHash:"0x6ca2fea1b2653ec00b10b5537dbb9436b3e31418df4ce9fa424d377e0f7d9fc2",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0xF26391FBB1f77481f80a7d646AC08ba3817eA891",transactionIndex:120,gasUsed:"606477",logsBloom:"0xblockHash:"0x7b910c0721badc0259a470b5494483b0bd40300c4abf959a34f18709c1c91e68",transactionHash:"0x6ca2fea1b2653ec00b10b5537dbb9436b3e31418df4ce9fa424d377e0f7d9fc2",logs:[],blockNumber:12686779,cumulativeGasUsed:"9401992",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F"],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"uint256","name":"messageNonce","type":"uint256"},{"components":[{"internalType":"bytes32","name":"stateRoot","type":"bytes32"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"stateRootBatchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"stateRootProof","type":"tuple"},{"internalType":"bytes","name":"stateTrieWitness","type":"bytes"},{"internalType":"bytes","name":"storageTrieWitness","type":"bytes"}],"internalType":"struct iOVM_L1CrossDomainMessenger.L2MessageInclusionProof","name":"proof","type":"tuple"}],"internalType":"struct iOVM_L1MultiMessageRelayer.L2ToL1Message[]","name":"_messages","type":"tuple[]"}],"name":"batchRelayMessages","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The L1 Multi-Message Relayer contract is a gas efficiency optimization which enables the relayer to submit multiple messages in a single transaction to be relayed by the L1 Cross Domain Message Sender. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"batchRelayMessages((address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))[])":{"params":{"_messages":"An array of L2 to L1 messages"}},"constructor":{"params":{"_libAddressManager":"Address of the Address Manager."}},"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}}},"title":"OVM_L1MultiMessageRelayer","version":1},"userdoc":{"kind":"user","methods":{"batchRelayMessages((address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))[])":{"notice":"Forwards multiple cross domain messages to the L1 Cross Domain Messenger for relaying"},"resolve(string)":{"notice":"Resolves the address associated with a given name."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1MultiMessageRelayer.sol":"OVM_L1MultiMessageRelayer"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1MultiMessageRelayer.sol":{"content":"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Interface Imports */\\nimport { iOVM_L1CrossDomainMessenger } from \\"../../../iOVM/bridge/messaging/iOVM_L1CrossDomainMessenger.sol\\";\\nimport { iOVM_L1MultiMessageRelayer } from \\"../../../iOVM/bridge/messaging/iOVM_L1MultiMessageRelayer.sol\\";\\n\\n/* Library Imports */\\nimport { Lib_AddressResolver } from \\"../../../libraries/resolver/Lib_AddressResolver.sol\\";\\n\\n/**\\n * @title OVM_L1MultiMessageRelayer\\n * @dev The L1 Multi-Message Relayer contract is a gas efficiency optimization which enables the\\n * relayer to submit multiple messages in a single transaction to be relayed by the L1 Cross Domain\\n * Message Sender.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_L1MultiMessageRelayer is iOVM_L1MultiMessageRelayer, Lib_AddressResolver {\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Address Manager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {}\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyBatchRelayer() {\\n        require(\\n            msg.sender == resolve(\\"OVM_L2BatchMessageRelayer\\"),\\n            \\"OVM_L1MultiMessageRelayer: Function can only be called by the OVM_L2BatchMessageRelayer\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @notice Forwards multiple cross domain messages to the L1 Cross Domain Messenger for relaying\\n     * @param _messages An array of L2 to L1 messages\\n     */\\n    function batchRelayMessages(\\n        L2ToL1Message[] calldata _messages\\n    ) \\n        override\\n        external\\n        onlyBatchRelayer\\n    {\\n        iOVM_L1CrossDomainMessenger messenger = iOVM_L1CrossDomainMessenger(\\n            resolve(\\"Proxy__OVM_L1CrossDomainMessenger\\")\\n        );\\n\\n        for (uint256 i = 0; i < _messages.length; i++) {\\n            L2ToL1Message memory message = _messages[i];\\n            messenger.relayMessage(\\n                message.target,\\n                message.sender,\\n                message.message,\\n                message.messageNonce,\\n                message.proof\\n            );\\n        }\\n    }\\n}\\n","keccak256":"0xe698b8dbdcecd055ee77cc553963f966faebcdefbed1e586f7fd603fa816d9c6","license":"MIT"},"contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_CrossDomainMessenger.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_CrossDomainMessenger\\n */\\ninterface iOVM_CrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n    event FailedRelayedMessage(bytes32 msgHash);\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n","keccak256":"0x03dd576abe8e562cca646dd59b5c038291dffa9a5e43e4e3765d38cf1406fa62","license":"MIT"},"contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_L1CrossDomainMessenger.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_CrossDomainMessenger } from \\"./iOVM_CrossDomainMessenger.sol\\";\\n\\n/**\\n * @title iOVM_L1CrossDomainMessenger\\n */\\ninterface iOVM_L1CrossDomainMessenger is iOVM_CrossDomainMessenger {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    struct L2MessageInclusionProof {\\n        bytes32 stateRoot;\\n        Lib_OVMCodec.ChainBatchHeader stateRootBatchHeader;\\n        Lib_OVMCodec.ChainInclusionProof stateRootProof;\\n        bytes stateTrieWitness;\\n        bytes storageTrieWitness;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Relays a cross domain message to a contract.\\n     * @param _target Target contract address.\\n     * @param _sender Message sender address.\\n     * @param _message Message to send to the target.\\n     * @param _messageNonce Nonce for the provided message.\\n     * @param _proof Inclusion proof for the given message.\\n     */\\n    function relayMessage(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _messageNonce,\\n        L2MessageInclusionProof memory _proof\\n    ) external;\\n\\n    /**\\n     * Replays a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _sender Original sender address.\\n     * @param _message Message to send to the target.\\n     * @param _queueIndex CTC Queue index for the message to replay.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function replayMessage(\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _queueIndex,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n","keccak256":"0xd278237bb588a45208d8ed57c7766386cddd1dc1e4f31867c9cb356939dfd49a","license":"MIT"},"contracts/optimistic-ethereum/iOVM/bridge/messaging/iOVM_L1MultiMessageRelayer.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Interface Imports */\\nimport { iOVM_L1CrossDomainMessenger } from \\"../../../iOVM/bridge/messaging/iOVM_L1CrossDomainMessenger.sol\\";\\ninterface iOVM_L1MultiMessageRelayer {\\n\\n    struct L2ToL1Message {\\n        address target;\\n        address sender;\\n        bytes message;\\n        uint256 messageNonce;\\n        iOVM_L1CrossDomainMessenger.L2MessageInclusionProof proof;\\n    }\\n\\n    function batchRelayMessages(L2ToL1Message[] calldata _messages) external;\\n}\\n","keccak256":"0x8bc1fb2a33dcac59ec307195f8b8358d1ae2ab021c70a1589038b366d1b949d7","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b50604051610a22380380610a2283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610991806100916000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806316e9cd9b14610046578063299ca4781461005b578063461a447814610079575b600080fd5b61005961005436600461057d565b61008c565b005b6100636101ea565b60405161007091906106db565b60405180910390f35b6100636100873660046105ec565b6101f9565b6100ca6040518060400160405280601981526020017f4f564d5f4c3242617463684d65737361676552656c61796572000000000000008152506101f9565b6001600160a01b0316336001600160a01b0316146101035760405162461bcd60e51b81526004016100fa906107d7565b60405180910390fd5b600061012660405180606001604052806021815260200161093b602191396101f9565b905060005b828110156101e457600084848381811061014157fe5b9050602002810190610153919061085a565b61015c9061089d565b8051602082015160408084015160608501516080860151925163d7fd19dd60e01b81529596506001600160a01b0389169563d7fd19dd956101a5959094909392916004016106ef565b600060405180830381600087803b1580156101bf57600080fd5b505af11580156101d3573d6000803e3d6000fd5b50506001909301925061012b915050565b50505050565b6000546001600160a01b031681565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b83811015610259578181015183820152602001610241565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156102a357600080fd5b505afa1580156102b7573d6000803e3d6000fd5b505050506040513d60208110156102cd57600080fd5b505190505b919050565b600067ffffffffffffffff8311156102eb57fe5b6102fe601f8401601f1916602001610879565b905082815283838301111561031257600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146102d257600080fd5b600082601f830112610350578081fd5b61035f838335602085016102d7565b9392505050565b600060a08284031215610377578081fd5b60405160a0810167ffffffffffffffff828210818311171561039557fe5b816040528293508435835260208501356020840152604085013560408401526060850135606084015260808501359150808211156103d257600080fd5b506103df85828601610340565b6080830152505092915050565b6000604082840312156103fd578081fd5b6040516040810167ffffffffffffffff828210818311171561041b57fe5b816040528293508435835260209150818501358181111561043b57600080fd5b8501601f8101871361044c57600080fd5b80358281111561045857fe5b8381029250610468848401610879565b8181528481019083860185850187018b101561048357600080fd5b600095505b838610156104a6578035835260019590950194918601918601610488565b5080868801525050505050505092915050565b600060a082840312156104ca578081fd5b6104d460a0610879565b905081358152602082013567ffffffffffffffff808211156104f557600080fd5b61050185838601610366565b6020840152604084013591508082111561051a57600080fd5b610526858386016103ec565b6040840152606084013591508082111561053f57600080fd5b61054b85838601610340565b6060840152608084013591508082111561056457600080fd5b5061057184828501610340565b60808301525092915050565b6000806020838503121561058f578182fd5b823567ffffffffffffffff808211156105a6578384fd5b818501915085601f8301126105b9578384fd5b8135818111156105c7578485fd5b86602080830285010111156105da578485fd5b60209290920196919550909350505050565b6000602082840312156105fd578081fd5b813567ffffffffffffffff811115610613578182fd5b8201601f81018413610623578182fd5b610632848235602084016102d7565b949350505050565b60008151808452815b8181101561065f57602081850181015186830182015201610643565b818111156106705782602083870101525b50601f01601f19169290920160200192915050565b6000604083018251845260208084015160408287015282815180855260608801915083830194508592505b808310156106d057845182529383019360019290920191908301906106b0565b509695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a06040820181905260009061071b9083018661063a565b846060840152828103608084015283518152602084015160a06020830152805160a0830152602081015160c0830152604081015160e083015260608101516101008301526080810151905060a061012083015261077c61014083018261063a565b9050604085015182820360408401526107958282610685565b915050606085015182820360608401526107af828261063a565b915050608085015182820360808401526107c9828261063a565b9a9950505050505050505050565b60208082526057908201527f4f564d5f4c314d756c74694d65737361676552656c617965723a2046756e637460408201527f696f6e2063616e206f6e6c792062652063616c6c656420627920746865204f5660608201527f4d5f4c3242617463684d65737361676552656c61796572000000000000000000608082015260a00190565b60008235609e1983360301811261086f578182fd5b9190910192915050565b60405181810167ffffffffffffffff8111828210171561089557fe5b604052919050565b600060a082360312156108ae578081fd5b60405160a0810167ffffffffffffffff82821081831117156108cc57fe5b816040526108d985610329565b83526108e760208601610329565b602084015260408501359150808211156108ff578384fd5b61090b36838701610340565b604084015260608501356060840152608085013591508082111561092d578384fd5b50610571368286016104b956fe50726f78795f5f4f564d5f4c3143726f7373446f6d61696e4d657373656e676572a2646970667358221220ca6bebf589e0e196a7eecc58e0f8a7270f00ec6d1a5d6a61d75748f6e061f36f64736f6c63430007060033",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106100415760003560e01c806316e9cd9b14610046578063299ca4781461005b578063461a447814610079575b600080fd5b61005961005436600461057d565b61008c565b005b6100636101ea565b60405161007091906106db565b60405180910390f35b6100636100873660046105ec565b6101f9565b6100ca6040518060400160405280601981526020017f4f564d5f4c3242617463684d65737361676552656c61796572000000000000008152506101f9565b6001600160a01b0316336001600160a01b0316146101035760405162461bcd60e51b81526004016100fa906107d7565b60405180910390fd5b600061012660405180606001604052806021815260200161093b602191396101f9565b905060005b828110156101e457600084848381811061014157fe5b9050602002810190610153919061085a565b61015c9061089d565b8051602082015160408084015160608501516080860151925163d7fd19dd60e01b81529596506001600160a01b0389169563d7fd19dd956101a5959094909392916004016106ef565b600060405180830381600087803b1580156101bf57600080fd5b505af11580156101d3573d6000803e3d6000fd5b50506001909301925061012b915050565b50505050565b6000546001600160a01b031681565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b83811015610259578181015183820152602001610241565b50505050905090810190601f1680156102865780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156102a357600080fd5b505afa1580156102b7573d6000803e3d6000fd5b505050506040513d60208110156102cd57600080fd5b505190505b919050565b600067ffffffffffffffff8311156102eb57fe5b6102fe601f8401601f1916602001610879565b905082815283838301111561031257600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146102d257600080fd5b600082601f830112610350578081fd5b61035f838335602085016102d7565b9392505050565b600060a08284031215610377578081fd5b60405160a0810167ffffffffffffffff828210818311171561039557fe5b816040528293508435835260208501356020840152604085013560408401526060850135606084015260808501359150808211156103d257600080fd5b506103df85828601610340565b6080830152505092915050565b6000604082840312156103fd578081fd5b6040516040810167ffffffffffffffff828210818311171561041b57fe5b816040528293508435835260209150818501358181111561043b57600080fd5b8501601f8101871361044c57600080fd5b80358281111561045857fe5b8381029250610468848401610879565b8181528481019083860185850187018b101561048357600080fd5b600095505b838610156104a6578035835260019590950194918601918601610488565b5080868801525050505050505092915050565b600060a082840312156104ca578081fd5b6104d460a0610879565b905081358152602082013567ffffffffffffffff808211156104f557600080fd5b61050185838601610366565b6020840152604084013591508082111561051a57600080fd5b610526858386016103ec565b6040840152606084013591508082111561053f57600080fd5b61054b85838601610340565b6060840152608084013591508082111561056457600080fd5b5061057184828501610340565b60808301525092915050565b6000806020838503121561058f578182fd5b823567ffffffffffffffff808211156105a6578384fd5b818501915085601f8301126105b9578384fd5b8135818111156105c7578485fd5b86602080830285010111156105da578485fd5b60209290920196919550909350505050565b6000602082840312156105fd578081fd5b813567ffffffffffffffff811115610613578182fd5b8201601f81018413610623578182fd5b610632848235602084016102d7565b949350505050565b60008151808452815b8181101561065f57602081850181015186830182015201610643565b818111156106705782602083870101525b50601f01601f19169290920160200192915050565b6000604083018251845260208084015160408287015282815180855260608801915083830194508592505b808310156106d057845182529383019360019290920191908301906106b0565b509695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a06040820181905260009061071b9083018661063a565b846060840152828103608084015283518152602084015160a06020830152805160a0830152602081015160c0830152604081015160e083015260608101516101008301526080810151905060a061012083015261077c61014083018261063a565b9050604085015182820360408401526107958282610685565b915050606085015182820360608401526107af828261063a565b915050608085015182820360808401526107c9828261063a565b9a9950505050505050505050565b60208082526057908201527f4f564d5f4c314d756c74694d65737361676552656c617965723a2046756e637460408201527f696f6e2063616e206f6e6c792062652063616c6c656420627920746865204f5660608201527f4d5f4c3242617463684d65737361676552656c61796572000000000000000000608082015260a00190565b60008235609e1983360301811261086f578182fd5b9190910192915050565b60405181810167ffffffffffffffff8111828210171561089557fe5b604052919050565b600060a082360312156108ae578081fd5b60405160a0810167ffffffffffffffff82821081831117156108cc57fe5b816040526108d985610329565b83526108e760208601610329565b602084015260408501359150808211156108ff578384fd5b61090b36838701610340565b604084015260608501356060840152608085013591508082111561092d578384fd5b50610571368286016104b956fe50726f78795f5f4f564d5f4c3143726f7373446f6d61696e4d657373656e676572a2646970667358221220ca6bebf589e0e196a7eecc58e0f8a7270f00ec6d1a5d6a61d75748f6e061f36f64736f6c63430007060033",devdoc:{details:"The L1 Multi-Message Relayer contract is a gas efficiency optimization which enables the relayer to submit multiple messages in a single transaction to be relayed by the L1 Cross Domain Message Sender. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{"batchRelayMessages((address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))[])":{params:{_messages:"An array of L2 to L1 messages"}},constructor:{params:{_libAddressManager:"Address of the Address Manager."}},"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}}},title:"OVM_L1MultiMessageRelayer",version:1},userdoc:{kind:"user",methods:{"batchRelayMessages((address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))[])":{notice:"Forwards multiple cross domain messages to the L1 Cross Domain Messenger for relaying"},"resolve(string)":{notice:"Resolves the address associated with a given name."}},version:1},storageLayout:{storage:[{astId:15303,contract:"contracts/optimistic-ethereum/OVM/bridge/messaging/OVM_L1MultiMessageRelayer.sol:OVM_L1MultiMessageRelayer",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15296"}],types:{"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_L1MultiMessageRelayer.json"}],[356,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0xfe1F9Cf28ecDb12110aa8086e6FD343EA06035cC",abi:[{inputs:[{internalType:"bytes",name:"_bytecode",type:"bytes"}],name:"isBytecodeSafe",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"pure",type:"function"}],transactionHash:"0xc470369bd3f0b9544e40c2d859fa0345ffc8f1e87a242e8abf6a56eb5698c71f",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0xfe1F9Cf28ecDb12110aa8086e6FD343EA06035cC",transactionIndex:106,gasUsed:"243548",logsBloom:"0xblockHash:"0xc28664a0ac4aecc14cbfb3950126e7146416ee863c63c8120eaff726d89029fe",transactionHash:"0xc470369bd3f0b9544e40c2d859fa0345ffc8f1e87a242e8abf6a56eb5698c71f",logs:[],blockNumber:12686776,cumulativeGasUsed:"5613711",status:1,byzantium:!0},args:[],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"_bytecode","type":"bytes"}],"name":"isBytecodeSafe","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"}],"devdoc":{"details":"The Safety Checker verifies that contracts deployed on L2 do not contain any \\"unsafe\\" operations. An operation is considered unsafe if it would access state variables which are specific to the environment (ie. L1 or L2) in which it is executed, as this could be used to \\"escape the sandbox\\" of the OVM, resulting in non-deterministic fraud proofs. That is, an attacker would be able to \\"prove fraud\\" on an honestly applied transaction. Note that a \\"safe\\" contract requires opcodes to appear in a particular pattern; omission of \\"unsafe\\" opcodes is necessary, but not sufficient. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"isBytecodeSafe(bytes)":{"params":{"_bytecode":"The bytecode to safety check."},"returns":{"_0":"`true` if the bytecode is safe, `false` otherwise."}}},"title":"OVM_SafetyChecker","version":1},"userdoc":{"kind":"user","methods":{"isBytecodeSafe(bytes)":{"notice":"Returns whether or not all of the provided bytecode is safe."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/execution/OVM_SafetyChecker.sol":"OVM_SafetyChecker"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/optimistic-ethereum/OVM/execution/OVM_SafetyChecker.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Interface Imports */\\nimport { iOVM_SafetyChecker } from \\"../../iOVM/execution/iOVM_SafetyChecker.sol\\";\\n\\n/**\\n * @title OVM_SafetyChecker\\n * @dev  The Safety Checker verifies that contracts deployed on L2 do not contain any\\n * \\"unsafe\\" operations. An operation is considered unsafe if it would access state variables which\\n * are specific to the environment (ie. L1 or L2) in which it is executed, as this could be used\\n * to \\"escape the sandbox\\" of the OVM, resulting in non-deterministic fraud proofs.\\n * That is, an attacker would be able to \\"prove fraud\\" on an honestly applied transaction.\\n * Note that a \\"safe\\" contract requires opcodes to appear in a particular pattern;\\n * omission of \\"unsafe\\" opcodes is necessary, but not sufficient.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_SafetyChecker is iOVM_SafetyChecker {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Returns whether or not all of the provided bytecode is safe.\\n     * @param _bytecode The bytecode to safety check.\\n     * @return `true` if the bytecode is safe, `false` otherwise.\\n     */\\n    function isBytecodeSafe(\\n        bytes memory _bytecode\\n    )\\n        override\\n        external\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        // autogenerated by gen_safety_checker_constants.py\\n        // number of bytes to skip for each opcode\\n        uint256[8] memory opcodeSkippableBytes = [\\n            uint256(0x0001010101010101010101010000000001010101010101010101010101010000),\\n            uint256(0x0100000000000000000000000000000000000000010101010101000000010100),\\n            uint256(0x0000000000000000000000000000000001010101000000010101010100000000),\\n            uint256(0x0203040500000000000000000000000000000000000000000000000000000000),\\n            uint256(0x0101010101010101010101010101010101010101010101010101010101010101),\\n            uint256(0x0101010101000000000000000000000000000000000000000000000000000000),\\n            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),\\n            uint256(0x0000000000000000000000000000000000000000000000000000000000000000)\\n        ];\\n        // Mask to gate opcode specific cases\\n        uint256 opcodeGateMask = ~uint256(0xffffffffffffffffffffffe000000000fffffffff070ffff9c0ffffec000f001);\\n        // Halting opcodes\\n        uint256 opcodeHaltingMask = ~uint256(0x4008000000000000000000000000000000000000004000000000000000000001);\\n        // PUSH opcodes\\n        uint256 opcodePushMask = ~uint256(0xffffffff000000000000000000000000);\\n\\n        uint256 codeLength;\\n        uint256 _pc;\\n        assembly {\\n            _pc := add(_bytecode, 0x20)\\n        }\\n        codeLength = _pc + _bytecode.length;\\n        do {\\n            // current opcode: 0x00...0xff\\n            uint256 opNum;\\n\\n            // inline assembly removes the extra add + bounds check\\n            assembly {\\n                let word := mload(_pc) //load the next 32 bytes at pc into word\\n\\n                // Look up number of bytes to skip from opcodeSkippableBytes and then update indexInWord\\n                // E.g. the 02030405 in opcodeSkippableBytes is the number of bytes to skip for PUSH1->4\\n                // We repeat this 6 times, thus we can only skip bytes for up to PUSH4 ((1+4) * 6 = 30 < 32).\\n                // If we see an opcode that is listed as 0 skippable bytes e.g. PUSH5,\\n                // then we will get stuck on that indexInWord and then opNum will be set to the PUSH5 opcode.\\n                let indexInWord := byte(0, mload(add(opcodeSkippableBytes, byte(0, word))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                _pc := add(_pc, indexInWord)\\n\\n                opNum := byte(indexInWord, word)\\n            }\\n\\n            // + push opcodes\\n            // + stop opcodes [STOP(0x00),JUMP(0x56),RETURN(0xf3),INVALID(0xfe)]\\n            // + caller opcode CALLER(0x33)\\n            // + blacklisted opcodes\\n            uint256 opBit = 1 << opNum;\\n            if (opBit & opcodeGateMask == 0) {\\n                if (opBit & opcodePushMask == 0) {\\n                    // all pushes are valid opcodes\\n                    // subsequent bytes are not opcodes. Skip them.\\n                    _pc += (opNum - 0x5e); // PUSH1 is 0x60, so opNum-0x5f = PUSHed bytes and we +1 to\\n                    // skip the _pc++; line below in order to save gas ((-0x5f + 1) = -0x5e)\\n                    continue;\\n                } else if (opBit & opcodeHaltingMask == 0) {\\n                    // STOP or JUMP or RETURN or INVALID (Note: REVERT is blacklisted, so not included here)\\n                    // We are now inside unreachable code until we hit a JUMPDEST!\\n                    do {\\n                        _pc++;\\n                        assembly {\\n                            opNum := byte(0, mload(_pc))\\n                        }\\n                        // encountered a JUMPDEST\\n                        if (opNum == 0x5b) break;\\n                        // skip PUSHed bytes\\n                        if ((1 << opNum) & opcodePushMask == 0) _pc += (opNum - 0x5f); // opNum-0x5f = PUSHed bytes (PUSH1 is 0x60)\\n                    } while (_pc < codeLength);\\n                    // opNum is 0x5b, so we don\'t continue here since the pc++ is fine\\n                } else if (opNum == 0x33) { // Caller opcode\\n                    uint256 firstOps; // next 32 bytes of bytecode\\n                    uint256 secondOps; // following 32 bytes of bytecode\\n\\n                    assembly {\\n                        firstOps := mload(_pc)\\n                        // 37 bytes total, 5 left over --\x3e 32 - 5 bytes = 27 bytes = 216 bits\\n                        secondOps := shr(216, mload(add(_pc, 0x20)))\\n                    }\\n\\n                    // Call identity precompile\\n                    // CALLER POP PUSH1 0x00 PUSH1 0x04 GAS CALL\\n                    // 32 - 8 bytes = 24 bytes = 192\\n                    if ((firstOps >> 192) == 0x3350600060045af1) {\\n                        _pc += 8;\\n                    // Call EM and abort execution if instructed\\n                    // CALLER PUSH1 0x00 SWAP1 GAS CALL PC PUSH1 0x0E ADD JUMPI RETURNDATASIZE PUSH1 0x00 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x00 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x01 EQ ISZERO PC PUSH1 0x0a ADD JUMPI PUSH1 0x01 PUSH1 0x00 RETURN JUMPDEST\\n                    } else if (firstOps == 0x336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760 && secondOps == 0x016000f35b) {\\n                        _pc += 37;\\n                    } else {\\n                        return false;\\n                    }\\n                    continue;\\n                } else {\\n                    // encountered a non-whitelisted opcode!\\n                    return false;\\n                }\\n            }\\n            _pc++;\\n        } while (_pc < codeLength);\\n        return true;\\n    }\\n}\\n","keccak256":"0x44cd4fcdcb25a233fa98da5ba66706ce2f9fbf13359cf7f2891793739687a86f","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_SafetyChecker.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_SafetyChecker\\n */\\ninterface iOVM_SafetyChecker {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function isBytecodeSafe(bytes calldata _bytecode) external pure returns (bool);\\n}\\n","keccak256":"0xde6639676d4ec4f77297652d5ede2429bc93e74e11fefd9e9de4bc92dd784878","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b50610373806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a44eb59a14610030575b600080fd5b6100d66004803603602081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100ea945050505050565b604080519115158252519081900360200190f35b60408051610100810182527e0101010101010101010101000000000101010101010101010101010101000081526b010101010101000000010100600160f81b016020808301919091526f0101010100000001010101010000000092820192909252630203040560e01b60608201527f0101010101010101010101010101010101010101010101010101010101010101608082015264010101010160d81b60a0820152600060c0820181905260e0820181905283519092741fffffffff000000000f8f000063f000013fff0ffe916a40000000000000000000026117ff60f31b039163ffffffff60601b1991870181019087015b8051600081811a880151811a82811a890151821a0182811a890151821a0182811a890151821a0182811a890151821a0182811a89015190911a01918201911a6001811b86811661032057808516610239575001605d1901610326565b80861661027e575b8280600101935050825160001a915081605b141561025e57610279565b6001821b851661027157918101605e1901915b838310610241575b610320565b816033141561030f578251602084015160d81c673350600060045af160c083901c14156102b057600885019450610306565b817f336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a0157601480156102e357508064016000f35b145b156102f357602585019450610306565b60009a5050505050505050505050610338565b50505050610326565b600098505050505050505050610338565b50506001015b8181106101dd57600196505050505050505b91905056fea26469706673582212209a836b268dcf58167a9f65bb872e3ddb5bd93b231f6b456f1c5e6d75b92a746364736f6c63430007060033",deployedBytecode:"0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a44eb59a14610030575b600080fd5b6100d66004803603602081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100ea945050505050565b604080519115158252519081900360200190f35b60408051610100810182527e0101010101010101010101000000000101010101010101010101010101000081526b010101010101000000010100600160f81b016020808301919091526f0101010100000001010101010000000092820192909252630203040560e01b60608201527f0101010101010101010101010101010101010101010101010101010101010101608082015264010101010160d81b60a0820152600060c0820181905260e0820181905283519092741fffffffff000000000f8f000063f000013fff0ffe916a40000000000000000000026117ff60f31b039163ffffffff60601b1991870181019087015b8051600081811a880151811a82811a890151821a0182811a890151821a0182811a890151821a0182811a890151821a0182811a89015190911a01918201911a6001811b86811661032057808516610239575001605d1901610326565b80861661027e575b8280600101935050825160001a915081605b141561025e57610279565b6001821b851661027157918101605e1901915b838310610241575b610320565b816033141561030f578251602084015160d81c673350600060045af160c083901c14156102b057600885019450610306565b817f336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a0157601480156102e357508064016000f35b145b156102f357602585019450610306565b60009a5050505050505050505050610338565b50505050610326565b600098505050505050505050610338565b50506001015b8181106101dd57600196505050505050505b91905056fea26469706673582212209a836b268dcf58167a9f65bb872e3ddb5bd93b231f6b456f1c5e6d75b92a746364736f6c63430007060033",devdoc:{details:'The Safety Checker verifies that contracts deployed on L2 do not contain any "unsafe" operations. An operation is considered unsafe if it would access state variables which are specific to the environment (ie. L1 or L2) in which it is executed, as this could be used to "escape the sandbox" of the OVM, resulting in non-deterministic fraud proofs. That is, an attacker would be able to "prove fraud" on an honestly applied transaction. Note that a "safe" contract requires opcodes to appear in a particular pattern; omission of "unsafe" opcodes is necessary, but not sufficient. Compiler used: solc Runtime target: EVM',kind:"dev",methods:{"isBytecodeSafe(bytes)":{params:{_bytecode:"The bytecode to safety check."},returns:{_0:"`true` if the bytecode is safe, `false` otherwise."}}},title:"OVM_SafetyChecker",version:1},userdoc:{kind:"user",methods:{"isBytecodeSafe(bytes)":{notice:"Returns whether or not all of the provided bytecode is safe."}},version:1},storageLayout:{storage:[],types:null}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_SafetyChecker.json"}],[357,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0xE969C2724d2448F1d1A6189d3e2aA1F37d5998c1",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"},{internalType:"uint256",name:"_fraudProofWindow",type:"uint256"},{internalType:"uint256",name:"_sequencerPublishWindow",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"_batchIndex",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"_batchRoot",type:"bytes32"},{indexed:!1,internalType:"uint256",name:"_batchSize",type:"uint256"},{indexed:!1,internalType:"uint256",name:"_prevTotalElements",type:"uint256"},{indexed:!1,internalType:"bytes",name:"_extraData",type:"bytes"}],name:"StateBatchAppended",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"_batchIndex",type:"uint256"},{indexed:!1,internalType:"bytes32",name:"_batchRoot",type:"bytes32"}],name:"StateBatchDeleted",type:"event"},{inputs:[],name:"FRAUD_PROOF_WINDOW",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"SEQUENCER_PUBLISH_WINDOW",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"_batch",type:"bytes32[]"},{internalType:"uint256",name:"_shouldStartAtElement",type:"uint256"}],name:"appendStateBatch",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"batches",outputs:[{internalType:"contract iOVM_ChainStorageContainer",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_batchHeader",type:"tuple"}],name:"deleteStateBatch",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getLastSequencerTimestamp",outputs:[{internalType:"uint256",name:"_lastSequencerTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getTotalBatches",outputs:[{internalType:"uint256",name:"_totalBatches",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getTotalElements",outputs:[{internalType:"uint256",name:"_totalElements",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_batchHeader",type:"tuple"}],name:"insideFraudProofWindow",outputs:[{internalType:"bool",name:"_inside",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"_element",type:"bytes32"},{components:[{internalType:"uint256",name:"batchIndex",type:"uint256"},{internalType:"bytes32",name:"batchRoot",type:"bytes32"},{internalType:"uint256",name:"batchSize",type:"uint256"},{internalType:"uint256",name:"prevTotalElements",type:"uint256"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct Lib_OVMCodec.ChainBatchHeader",name:"_batchHeader",type:"tuple"},{components:[{internalType:"uint256",name:"index",type:"uint256"},{internalType:"bytes32[]",name:"siblings",type:"bytes32[]"}],internalType:"struct Lib_OVMCodec.ChainInclusionProof",name:"_proof",type:"tuple"}],name:"verifyStateCommitment",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],transactionHash:"0x67c2ea9f14079f9b3c2b7b074401856f9837c99d55ec9191cc1eda1fbb2dcb9c",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0xE969C2724d2448F1d1A6189d3e2aA1F37d5998c1",transactionIndex:177,gasUsed:"1630177",logsBloom:"0xblockHash:"0x9917443bb50022ebdac59d71a12d0d562522c3e8c8ade23d30eb39eeeadb72d2",transactionHash:"0x67c2ea9f14079f9b3c2b7b074401856f9837c99d55ec9191cc1eda1fbb2dcb9c",logs:[],blockNumber:12686746,cumulativeGasUsed:"14820986",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F",604800,12592e3],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"},{"internalType":"uint256","name":"_fraudProofWindow","type":"uint256"},{"internalType":"uint256","name":"_sequencerPublishWindow","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_batchIndex","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_batchRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"_batchSize","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_prevTotalElements","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"StateBatchAppended","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_batchIndex","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_batchRoot","type":"bytes32"}],"name":"StateBatchDeleted","type":"event"},{"inputs":[],"name":"FRAUD_PROOF_WINDOW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SEQUENCER_PUBLISH_WINDOW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"_batch","type":"bytes32[]"},{"internalType":"uint256","name":"_shouldStartAtElement","type":"uint256"}],"name":"appendStateBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"batches","outputs":[{"internalType":"contract iOVM_ChainStorageContainer","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_batchHeader","type":"tuple"}],"name":"deleteStateBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getLastSequencerTimestamp","outputs":[{"internalType":"uint256","name":"_lastSequencerTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalBatches","outputs":[{"internalType":"uint256","name":"_totalBatches","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalElements","outputs":[{"internalType":"uint256","name":"_totalElements","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_batchHeader","type":"tuple"}],"name":"insideFraudProofWindow","outputs":[{"internalType":"bool","name":"_inside","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_element","type":"bytes32"},{"components":[{"internalType":"uint256","name":"batchIndex","type":"uint256"},{"internalType":"bytes32","name":"batchRoot","type":"bytes32"},{"internalType":"uint256","name":"batchSize","type":"uint256"},{"internalType":"uint256","name":"prevTotalElements","type":"uint256"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct Lib_OVMCodec.ChainBatchHeader","name":"_batchHeader","type":"tuple"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32[]","name":"siblings","type":"bytes32[]"}],"internalType":"struct Lib_OVMCodec.ChainInclusionProof","name":"_proof","type":"tuple"}],"name":"verifyStateCommitment","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The State Commitment Chain (SCC) contract contains a list of proposed state roots which Proposers assert to be a result of each transaction in the Canonical Transaction Chain (CTC). Elements here have a 1:1 correspondence with transactions in the CTC, and should be the unique state root calculated off-chain by applying the canonical transactions one by one. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"appendStateBatch(bytes32[],uint256)":{"params":{"_batch":"Batch of state roots.","_shouldStartAtElement":"Index of the element at which this batch should start."}},"batches()":{"returns":{"_0":"Reference to the batch storage container."}},"constructor":{"params":{"_libAddressManager":"Address of the Address Manager."}},"deleteStateBatch((uint256,bytes32,uint256,uint256,bytes))":{"params":{"_batchHeader":"Header of the batch to start deleting from."}},"getLastSequencerTimestamp()":{"returns":{"_lastSequencerTimestamp":"Last sequencer batch timestamp."}},"getTotalBatches()":{"returns":{"_totalBatches":"Total submitted batches."}},"getTotalElements()":{"returns":{"_totalElements":"Total submitted elements."}},"insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes))":{"params":{"_batchHeader":"Header of the batch to check."},"returns":{"_inside":"Whether or not the batch is inside the fraud proof window."}},"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}},"verifyStateCommitment(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{"params":{"_batchHeader":"Header of the batch in which the element was included.","_element":"Hash of the element to verify a proof for.","_proof":"Merkle inclusion proof for the element."}}},"title":"OVM_StateCommitmentChain","version":1},"userdoc":{"kind":"user","methods":{"appendStateBatch(bytes32[],uint256)":{"notice":"Appends a batch of state roots to the chain."},"batches()":{"notice":"Accesses the batch storage container."},"deleteStateBatch((uint256,bytes32,uint256,uint256,bytes))":{"notice":"Deletes all state roots after (and including) a given batch."},"getLastSequencerTimestamp()":{"notice":"Retrieves the timestamp of the last batch submitted by the sequencer."},"getTotalBatches()":{"notice":"Retrieves the total number of batches submitted."},"getTotalElements()":{"notice":"Retrieves the total number of elements submitted."},"insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes))":{"notice":"Checks whether a given batch is still inside its fraud proof window."},"resolve(string)":{"notice":"Resolves the address associated with a given name."},"verifyStateCommitment(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{"notice":"Verifies a batch inclusion proof."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/chain/OVM_StateCommitmentChain.sol":"OVM_StateCommitmentChain"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\'s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\'s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\n        // benefit is lost if \'b\' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\'s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\"SafeMath: addition overflow\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\'s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\"SafeMath: subtraction overflow\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\'s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\"SafeMath: multiplication overflow\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\"SafeMath: division by zero\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\"SafeMath: modulo by zero\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\'s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n","keccak256":"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/OVM/chain/OVM_StateCommitmentChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\nimport { Lib_MerkleTree } from \\"../../libraries/utils/Lib_MerkleTree.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_FraudVerifier } from \\"../../iOVM/verification/iOVM_FraudVerifier.sol\\";\\nimport { iOVM_StateCommitmentChain } from \\"../../iOVM/chain/iOVM_StateCommitmentChain.sol\\";\\nimport { iOVM_CanonicalTransactionChain } from \\"../../iOVM/chain/iOVM_CanonicalTransactionChain.sol\\";\\nimport { iOVM_BondManager } from \\"../../iOVM/verification/iOVM_BondManager.sol\\";\\nimport { iOVM_ChainStorageContainer } from \\"../../iOVM/chain/iOVM_ChainStorageContainer.sol\\";\\n\\n/* External Imports */\\nimport \'@openzeppelin/contracts/math/SafeMath.sol\';\\n\\n/**\\n * @title OVM_StateCommitmentChain\\n * @dev The State Commitment Chain (SCC) contract contains a list of proposed state roots which\\n * Proposers assert to be a result of each transaction in the Canonical Transaction Chain (CTC).\\n * Elements here have a 1:1 correspondence with transactions in the CTC, and should be the unique\\n * state root calculated off-chain by applying the canonical transactions one by one.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_StateCommitmentChain is iOVM_StateCommitmentChain, Lib_AddressResolver {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 public FRAUD_PROOF_WINDOW;\\n    uint256 public SEQUENCER_PUBLISH_WINDOW;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Address Manager.\\n     */\\n    constructor(\\n        address _libAddressManager,\\n        uint256 _fraudProofWindow,\\n        uint256 _sequencerPublishWindow\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {\\n        FRAUD_PROOF_WINDOW = _fraudProofWindow;\\n        SEQUENCER_PUBLISH_WINDOW = _sequencerPublishWindow;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Accesses the batch storage container.\\n     * @return Reference to the batch storage container.\\n     */\\n    function batches()\\n        public\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        )\\n    {\\n        return iOVM_ChainStorageContainer(\\n            resolve(\\"OVM_ChainStorageContainer-SCC-batches\\")\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function getTotalElements()\\n        override\\n        public\\n        view\\n        returns (\\n            uint256 _totalElements\\n        )\\n    {\\n        (uint40 totalElements, ) = _getBatchExtraData();\\n        return uint256(totalElements);\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function getTotalBatches()\\n        override\\n        public\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        )\\n    {\\n        return batches().length();\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function getLastSequencerTimestamp()\\n        override\\n        public\\n        view\\n        returns (\\n            uint256 _lastSequencerTimestamp\\n        )\\n    {\\n        (, uint40 lastSequencerTimestamp) = _getBatchExtraData();\\n        return uint256(lastSequencerTimestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function appendStateBatch(\\n        bytes32[] memory _batch,\\n        uint256 _shouldStartAtElement\\n    )\\n        override\\n        public\\n    {\\n        // Fail fast in to make sure our batch roots aren\'t accidentally made fraudulent by the\\n        // publication of batches by some other user.\\n        require(\\n            _shouldStartAtElement == getTotalElements(),\\n            \\"Actual batch start index does not match expected start index.\\"\\n        );\\n\\n        // Proposers must have previously staked at the BondManager\\n        require(\\n            iOVM_BondManager(resolve(\\"OVM_BondManager\\")).isCollateralized(msg.sender),\\n            \\"Proposer does not have enough collateral posted\\"\\n        );\\n\\n        require(\\n            _batch.length > 0,\\n            \\"Cannot submit an empty state batch.\\"\\n        );\\n\\n        require(\\n            getTotalElements() + _batch.length <= iOVM_CanonicalTransactionChain(resolve(\\"OVM_CanonicalTransactionChain\\")).getTotalElements(),\\n            \\"Number of state roots cannot exceed the number of canonical transactions.\\"\\n        );\\n\\n        // Pass the block\'s timestamp and the publisher of the data\\n        // to be used in the fraud proofs\\n        _appendBatch(\\n            _batch,\\n            abi.encode(block.timestamp, msg.sender)\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function deleteStateBatch(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        override\\n        public\\n    {\\n        require(\\n            msg.sender == resolve(\\"OVM_FraudVerifier\\"),\\n            \\"State batches can only be deleted by the OVM_FraudVerifier.\\"\\n        );\\n\\n        require(\\n            _isValidBatchHeader(_batchHeader),\\n            \\"Invalid batch header.\\"\\n        );\\n\\n        require(\\n            insideFraudProofWindow(_batchHeader),\\n            \\"State batches can only be deleted within the fraud proof window.\\"\\n        );\\n\\n        _deleteBatch(_batchHeader);\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function verifyStateCommitment(\\n        bytes32 _element,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _proof\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _isValidBatchHeader(_batchHeader),\\n            \\"Invalid batch header.\\"\\n        );\\n\\n        require(\\n            Lib_MerkleTree.verify(\\n                _batchHeader.batchRoot,\\n                _element,\\n                _proof.index,\\n                _proof.siblings,\\n                _batchHeader.batchSize\\n            ),\\n            \\"Invalid inclusion proof.\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc iOVM_StateCommitmentChain\\n     */\\n    function insideFraudProofWindow(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool _inside\\n        )\\n    {\\n        (uint256 timestamp,) = abi.decode(\\n            _batchHeader.extraData,\\n            (uint256, address)\\n        );\\n\\n        require(\\n            timestamp != 0,\\n            \\"Batch header timestamp cannot be zero\\"\\n        );\\n        return SafeMath.add(timestamp, FRAUD_PROOF_WINDOW) > block.timestamp;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Parses the batch context from the extra data.\\n     * @return Total number of elements submitted.\\n     * @return Timestamp of the last batch submitted by the sequencer.\\n     */\\n    function _getBatchExtraData()\\n        internal\\n        view\\n        returns (\\n            uint40,\\n            uint40\\n        )\\n    {\\n        bytes27 extraData = batches().getGlobalMetadata();\\n\\n        uint40 totalElements;\\n        uint40 lastSequencerTimestamp;\\n        assembly {\\n            extraData              := shr(40, extraData)\\n            totalElements          :=         and(extraData, 0x000000000000000000000000000000000000000000000000000000FFFFFFFFFF)\\n            lastSequencerTimestamp := shr(40, and(extraData, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000))\\n        }\\n\\n        return (\\n            totalElements,\\n            lastSequencerTimestamp\\n        );\\n    }\\n\\n    /**\\n     * Encodes the batch context for the extra data.\\n     * @param _totalElements Total number of elements submitted.\\n     * @param _lastSequencerTimestamp Timestamp of the last batch submitted by the sequencer.\\n     * @return Encoded batch context.\\n     */\\n    function _makeBatchExtraData(\\n        uint40 _totalElements,\\n        uint40 _lastSequencerTimestamp\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes27\\n        )\\n    {\\n        bytes27 extraData;\\n        assembly {\\n            extraData := _totalElements\\n            extraData := or(extraData, shl(40, _lastSequencerTimestamp))\\n            extraData := shl(40, extraData)\\n        }\\n\\n        return extraData;\\n    }\\n\\n    /**\\n     * Appends a batch to the chain.\\n     * @param _batch Elements within the batch.\\n     * @param _extraData Any extra data to append to the batch.\\n     */\\n    function _appendBatch(\\n        bytes32[] memory _batch,\\n        bytes memory _extraData\\n    )\\n        internal\\n    {\\n        address sequencer = resolve(\\"OVM_Proposer\\");\\n        (uint40 totalElements, uint40 lastSequencerTimestamp) = _getBatchExtraData();\\n\\n        if (msg.sender == sequencer) {\\n            lastSequencerTimestamp = uint40(block.timestamp);\\n        } else {\\n            // We keep track of the last batch submitted by the sequencer so there\'s a window in\\n            // which only the sequencer can publish state roots. A window like this just reduces\\n            // the chance of \\"system breaking\\" state roots being published while we\'re still in\\n            // testing mode. This window should be removed or significantly reduced in the future.\\n            require(\\n                lastSequencerTimestamp + SEQUENCER_PUBLISH_WINDOW < block.timestamp,\\n                \\"Cannot publish state roots within the sequencer publication window.\\"\\n            );\\n        }\\n\\n        // For efficiency reasons getMerkleRoot modifies the `_batch` argument in place\\n        // while calculating the root hash therefore any arguments passed to it must not\\n        // be used again afterwards\\n        Lib_OVMCodec.ChainBatchHeader memory batchHeader = Lib_OVMCodec.ChainBatchHeader({\\n            batchIndex: getTotalBatches(),\\n            batchRoot: Lib_MerkleTree.getMerkleRoot(_batch),\\n            batchSize: _batch.length,\\n            prevTotalElements: totalElements,\\n            extraData: _extraData\\n        });\\n\\n        emit StateBatchAppended(\\n            batchHeader.batchIndex,\\n            batchHeader.batchRoot,\\n            batchHeader.batchSize,\\n            batchHeader.prevTotalElements,\\n            batchHeader.extraData\\n        );\\n\\n        batches().push(\\n            Lib_OVMCodec.hashBatchHeader(batchHeader),\\n            _makeBatchExtraData(\\n                uint40(batchHeader.prevTotalElements + batchHeader.batchSize),\\n                lastSequencerTimestamp\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Removes a batch and all subsequent batches from the chain.\\n     * @param _batchHeader Header of the batch to remove.\\n     */\\n    function _deleteBatch(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n    {\\n        require(\\n            _batchHeader.batchIndex < batches().length(),\\n            \\"Invalid batch index.\\"\\n        );\\n\\n        require(\\n            _isValidBatchHeader(_batchHeader),\\n            \\"Invalid batch header.\\"\\n        );\\n\\n        batches().deleteElementsAfterInclusive(\\n            _batchHeader.batchIndex,\\n            _makeBatchExtraData(\\n                uint40(_batchHeader.prevTotalElements),\\n                0\\n            )\\n        );\\n\\n        emit StateBatchDeleted(\\n            _batchHeader.batchIndex,\\n            _batchHeader.batchRoot\\n        );\\n    }\\n\\n    /**\\n     * Checks that a batch header matches the stored hash for the given index.\\n     * @param _batchHeader Batch header to validate.\\n     * @return Whether or not the header matches the stored one.\\n     */\\n    function _isValidBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return Lib_OVMCodec.hashBatchHeader(_batchHeader) == batches().get(_batchHeader.batchIndex);\\n    }\\n}\\n","keccak256":"0x12cc020811ca6a41cbad48c2e6b812c1eeaca1dde65e09b4b51a1891e0872d92","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_CanonicalTransactionChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_ChainStorageContainer } from \\"./iOVM_ChainStorageContainer.sol\\";\\n\\n/**\\n * @title iOVM_CanonicalTransactionChain\\n */\\ninterface iOVM_CanonicalTransactionChain {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event TransactionEnqueued(\\n        address _l1TxOrigin,\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes _data,\\n        uint256 _queueIndex,\\n        uint256 _timestamp\\n    );\\n\\n    event QueueBatchAppended(\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event SequencerBatchAppended(\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event TransactionBatchAppended(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct BatchContext {\\n        uint256 numSequencedTransactions;\\n        uint256 numSubsequentQueueTransactions;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n\\n    /**\\n     * Accesses the batch storage container.\\n     * @return Reference to the batch storage container.\\n     */\\n    function batches()\\n        external\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        );\\n\\n    /**\\n     * Accesses the queue storage container.\\n     * @return Reference to the queue storage container.\\n     */\\n    function queue()\\n        external\\n        view\\n        returns (\\n            iOVM_ChainStorageContainer\\n        );\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements()\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches()\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Returns the index of the next element to be enqueued.\\n     * @return Index for the next queue element.\\n     */\\n    function getNextQueueIndex()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Gets the queue element at a particular index.\\n     * @param _index Index of the queue element to access.\\n     * @return _element Queue element at the given index.\\n     */\\n    function getQueueElement(\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            Lib_OVMCodec.QueueElement memory _element\\n        );\\n\\n    /**\\n     * Returns the timestamp of the last transaction.\\n     * @return Timestamp for the last transaction.\\n     */\\n    function getLastTimestamp()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Returns the blocknumber of the last transaction.\\n     * @return Blocknumber for the last transaction.\\n     */\\n    function getLastBlockNumber()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Get the number of queue elements which have not yet been included.\\n     * @return Number of pending queue elements.\\n     */\\n    function getNumPendingQueueElements()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Retrieves the length of the queue, including\\n     * both pending and canonical transactions.\\n     * @return Length of the queue.\\n     */\\n    function getQueueLength()\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n\\n    /**\\n     * Adds a transaction to the queue.\\n     * @param _target Target contract to send the transaction to.\\n     * @param _gasLimit Gas limit for the given transaction.\\n     * @param _data Transaction data.\\n     */\\n    function enqueue(\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    )\\n        external;\\n\\n    /**\\n     * Appends a given number of queued transactions as a single batch.\\n     * @param _numQueuedTransactions Number of transactions to append.\\n     */\\n    function appendQueueBatch(\\n        uint256 _numQueuedTransactions\\n    )\\n        external;\\n\\n    /**\\n     * Allows the sequencer to append a batch of transactions.\\n     * @dev This function uses a custom encoding scheme for efficiency reasons.\\n     * .param _shouldStartAtElement Specific batch we expect to start appending to.\\n     * .param _totalElementsToAppend Total number of batch elements we expect to append.\\n     * .param _contexts Array of batch contexts.\\n     * .param _transactionDataFields Array of raw transaction data.\\n     */\\n    function appendSequencerBatch(\\n        // uint40 _shouldStartAtElement,\\n        // uint24 _totalElementsToAppend,\\n        // BatchContext[] _contexts,\\n        // bytes[] _transactionDataFields\\n    )\\n        external;\\n\\n    /**\\n     * Verifies whether a transaction is included in the chain.\\n     * @param _transaction Transaction to verify.\\n     * @param _txChainElement Transaction chain element corresponding to the transaction.\\n     * @param _batchHeader Header of the batch the transaction was included in.\\n     * @param _inclusionProof Inclusion proof for the provided transaction chain element.\\n     * @return True if the transaction exists in the CTC, false if not.\\n     */\\n    function verifyTransaction(\\n        Lib_OVMCodec.Transaction memory _transaction,\\n        Lib_OVMCodec.TransactionChainElement memory _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _inclusionProof\\n    )\\n        external\\n        view\\n        returns (\\n            bool\\n        );\\n}\\n","keccak256":"0xb5e55488a1982841c07cdf5ff475da4789596f111dd48f01b1918ee4c775cf3a","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_ChainStorageContainer.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_ChainStorageContainer\\n */\\ninterface iOVM_ChainStorageContainer {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the container\'s global metadata field. We\'re using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadata(\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves the container\'s global metadata field.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadata()\\n        external\\n        view\\n        returns (\\n            bytes27\\n        );\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @return Number of objects in the container.\\n     */\\n    function length()\\n        external\\n        view\\n        returns (\\n            uint256\\n        );\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function push(\\n        bytes32 _object\\n    )\\n        external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we\'ll need to touch the \\"length\\" storage slot anyway, which also contains the global\\n     * metadata (it\'s an optimization).\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function push(\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves an object from the container.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function get(\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32\\n        );\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusive(\\n        uint256 _index\\n    )\\n        external;\\n\\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusive(\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n}\\n","keccak256":"0x180b9c347e20f1a6efa553b0f2b9a59aebceda92a7484ae6fca4da2bf1d960c3","license":"MIT"},"contracts/optimistic-ethereum/iOVM/chain/iOVM_StateCommitmentChain.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateCommitmentChain\\n */\\ninterface iOVM_StateCommitmentChain {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event StateBatchAppended(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n    event StateBatchDeleted(\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements()\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches()\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Retrieves the timestamp of the last batch submitted by the sequencer.\\n     * @return _lastSequencerTimestamp Last sequencer batch timestamp.\\n     */\\n    function getLastSequencerTimestamp()\\n        external\\n        view\\n        returns (\\n            uint256 _lastSequencerTimestamp\\n        );\\n\\n    /**\\n     * Appends a batch of state roots to the chain.\\n     * @param _batch Batch of state roots.\\n     * @param _shouldStartAtElement Index of the element at which this batch should start.\\n     */\\n    function appendStateBatch(\\n        bytes32[] calldata _batch,\\n        uint256 _shouldStartAtElement\\n    )\\n        external;\\n\\n    /**\\n     * Deletes all state roots after (and including) a given batch.\\n     * @param _batchHeader Header of the batch to start deleting from.\\n     */\\n    function deleteStateBatch(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external;\\n\\n    /**\\n     * Verifies a batch inclusion proof.\\n     * @param _element Hash of the element to verify a proof for.\\n     * @param _batchHeader Header of the batch in which the element was included.\\n     * @param _proof Merkle inclusion proof for the element.\\n     */\\n    function verifyStateCommitment(\\n        bytes32 _element,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _proof\\n    )\\n        external\\n        view\\n        returns (\\n            bool _verified\\n        );\\n\\n    /**\\n     * Checks whether a given batch is still inside its fraud proof window.\\n     * @param _batchHeader Header of the batch to check.\\n     * @return _inside Whether or not the batch is inside the fraud proof window.\\n     */\\n    function insideFraudProofWindow(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external\\n        view\\n        returns (\\n            bool _inside\\n        );\\n}\\n","keccak256":"0x6646d6ff392b81aab52a7a277e91540819464751de0af5afd1962094b2e92448","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_BondManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\ninterface ERC20 {\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n}\\n\\n/// All the errors which may be encountered on the bond manager\\nlibrary Errors {\\n    string constant ERC20_ERR = \\"BondManager: Could not post bond\\";\\n    string constant ALREADY_FINALIZED = \\"BondManager: Fraud proof for this pre-state root has already been finalized\\";\\n    string constant SLASHED = \\"BondManager: Cannot finalize withdrawal, you probably got slashed\\";\\n    string constant WRONG_STATE = \\"BondManager: Wrong bond state for proposer\\";\\n    string constant CANNOT_CLAIM = \\"BondManager: Cannot claim yet. Dispute must be finalized first\\";\\n\\n    string constant WITHDRAWAL_PENDING = \\"BondManager: Withdrawal already pending\\";\\n    string constant TOO_EARLY = \\"BondManager: Too early to finalize your withdrawal\\";\\n\\n    string constant ONLY_TRANSITIONER = \\"BondManager: Only the transitioner for this pre-state root may call this function\\";\\n    string constant ONLY_FRAUD_VERIFIER = \\"BondManager: Only the fraud verifier may call this function\\";\\n    string constant ONLY_STATE_COMMITMENT_CHAIN = \\"BondManager: Only the state commitment chain may call this function\\";\\n    string constant WAIT_FOR_DISPUTES = \\"BondManager: Wait for other potential disputes\\";\\n}\\n\\n/**\\n * @title iOVM_BondManager\\n */\\ninterface iOVM_BondManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    /// The lifecycle of a proposer\'s bond\\n    enum State {\\n        // Before depositing or after getting slashed, a user is uncollateralized\\n        NOT_COLLATERALIZED,\\n        // After depositing, a user is collateralized\\n        COLLATERALIZED,\\n        // After a user has initiated a withdrawal\\n        WITHDRAWING\\n    }\\n\\n    /// A bond posted by a proposer\\n    struct Bond {\\n        // The user\'s state\\n        State state;\\n        // The timestamp at which a proposer issued their withdrawal request\\n        uint32 withdrawalTimestamp;\\n        // The time when the first disputed was initiated for this bond\\n        uint256 firstDisputeAt;\\n        // The earliest observed state root for this bond which has had fraud\\n        bytes32 earliestDisputedStateRoot;\\n        // The state root\'s timestamp\\n        uint256 earliestTimestamp;\\n    }\\n\\n    // Per pre-state root, store the number of state provisions that were made\\n    // and how many of these calls were made by each user. Payouts will then be\\n    // claimed by users proportionally for that dispute.\\n    struct Rewards {\\n        // Flag to check if rewards for a fraud proof are claimable\\n        bool canClaim;\\n        // Total number of `recordGasSpent` calls made\\n        uint256 total;\\n        // The gas spent by each user to provide witness data. The sum of all\\n        // values inside this map MUST be equal to the value of `total`\\n        mapping(address => uint256) gasSpent;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function recordGasSpent(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash,\\n        address _who,\\n        uint256 _gasSpent\\n    ) external;\\n\\n    function finalize(\\n        bytes32 _preStateRoot,\\n        address _publisher,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function deposit() external;\\n\\n    function startWithdrawal() external;\\n\\n    function finalizeWithdrawal() external;\\n\\n    function claim(\\n        address _who\\n    ) external;\\n\\n    function isCollateralized(\\n        address _who\\n    ) external view returns (bool);\\n\\n    function getGasSpent(\\n        bytes32 _preStateRoot,\\n        address _who\\n    ) external view returns (uint256);\\n}\\n","keccak256":"0x3c2a8a399487857158649db1896749d86e39cba545a8aeb2e2bb0f3bdfa7a5b1","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_FraudVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_StateTransitioner } from \\"./iOVM_StateTransitioner.sol\\";\\n\\n/**\\n * @title iOVM_FraudVerifier\\n */\\ninterface iOVM_FraudVerifier {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event FraudProofInitialized(\\n        bytes32 _preStateRoot,\\n        uint256 _preStateRootIndex,\\n        bytes32 _transactionHash,\\n        address _who\\n    );\\n\\n    event FraudProofFinalized(\\n        bytes32 _preStateRoot,\\n        uint256 _preStateRootIndex,\\n        bytes32 _transactionHash,\\n        address _who\\n    );\\n\\n\\n    /***************************************\\n     * Public Functions: Transition Status *\\n     ***************************************/\\n\\n    function getStateTransitioner(bytes32 _preStateRoot, bytes32 _txHash) external view returns (iOVM_StateTransitioner _transitioner);\\n\\n\\n    /****************************************\\n     * Public Functions: Fraud Verification *\\n     ****************************************/\\n\\n    function initializeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof,\\n        Lib_OVMCodec.Transaction calldata _transaction,\\n        Lib_OVMCodec.TransactionChainElement calldata _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader calldata _transactionBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _transactionProof\\n    ) external;\\n\\n    function finalizeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof,\\n        bytes32 _txHash,\\n        bytes32 _postStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _postStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _postStateRootProof\\n    ) external;\\n}\\n","keccak256":"0x5efd7bb18164bbd3e9d58379e8203fbf2a7ee802b1a48dff3ceaaec1523b1751","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_StateTransitioner.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateTransitioner\\n */\\ninterface iOVM_StateTransitioner {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AccountCommitted(\\n        address _address\\n    );\\n\\n    event ContractStorageCommitted(\\n        address _address,\\n        bytes32 _key\\n    );\\n\\n\\n    /**********************************\\n     * Public Functions: State Access *\\n     **********************************/\\n\\n    function getPreStateRoot() external view returns (bytes32 _preStateRoot);\\n    function getPostStateRoot() external view returns (bytes32 _postStateRoot);\\n    function isComplete() external view returns (bool _complete);\\n\\n\\n    /***********************************\\n     * Public Functions: Pre-Execution *\\n     ***********************************/\\n\\n    function proveContractState(\\n        address _ovmContractAddress,\\n        address _ethContractAddress,\\n        bytes calldata _stateTrieWitness\\n    ) external;\\n\\n    function proveStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes calldata _storageTrieWitness\\n    ) external;\\n\\n\\n    /*******************************\\n     * Public Functions: Execution *\\n     *******************************/\\n\\n    function applyTransaction(\\n        Lib_OVMCodec.Transaction calldata _transaction\\n    ) external;\\n\\n\\n    /************************************\\n     * Public Functions: Post-Execution *\\n     ************************************/\\n\\n    function commitContractState(\\n        address _ovmContractAddress,\\n        bytes calldata _stateTrieWitness\\n    ) external;\\n\\n    function commitStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes calldata _storageTrieWitness\\n    ) external;\\n\\n\\n    /**********************************\\n     * Public Functions: Finalization *\\n     **********************************/\\n\\n    function completeTransition() external;\\n}\\n","keccak256":"0x3d044ac0a3bb6ad3d529f904b3191117511f9c379678ca03010e1ebdfcb5c34b","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_MerkleTree.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_MerkleTree\\n * @author River Keefer\\n */\\nlibrary Lib_MerkleTree {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Calculates a merkle root for a list of 32-byte leaf hashes.  WARNING: If the number\\n     * of leaves passed in is not a power of two, it pads out the tree with zero hashes.\\n     * If you do not know the original length of elements for the tree you are verifying,\\n     * then this may allow empty leaves past _elements.length to pass a verification check down the line.\\n     * Note that the _elements argument is modified, therefore it must not be used again afterwards\\n     * @param _elements Array of hashes from which to generate a merkle root.\\n     * @return Merkle root of the leaves, with zero hashes for non-powers-of-two (see above).\\n     */\\n    function getMerkleRoot(\\n        bytes32[] memory _elements\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _elements.length > 0,\\n            \\"Lib_MerkleTree: Must provide at least one leaf hash.\\"\\n        );\\n\\n        if (_elements.length == 1) {\\n            return _elements[0];\\n        }\\n\\n        uint256[16] memory defaults = [\\n            0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563,\\n            0x633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d,\\n            0x890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d,\\n            0x3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd8,\\n            0xecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da,\\n            0xdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da5,\\n            0x617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d7,\\n            0x292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead,\\n            0xe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e10,\\n            0x7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f82,\\n            0xe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e83636516,\\n            0x3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c,\\n            0xad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e,\\n            0xa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab,\\n            0x4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c862,\\n            0x2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf10\\n        ];\\n\\n        // Reserve memory space for our hashes.\\n        bytes memory buf = new bytes(64);\\n\\n        // We\'ll need to keep track of left and right siblings.\\n        bytes32 leftSibling;\\n        bytes32 rightSibling;\\n\\n        // Number of non-empty nodes at the current depth.\\n        uint256 rowSize = _elements.length;\\n\\n        // Current depth, counting from 0 at the leaves\\n        uint256 depth = 0;\\n\\n        // Common sub-expressions\\n        uint256 halfRowSize;         // rowSize / 2\\n        bool rowSizeIsOdd;           // rowSize % 2 == 1\\n\\n        while (rowSize > 1) {\\n            halfRowSize = rowSize / 2;\\n            rowSizeIsOdd = rowSize % 2 == 1;\\n\\n            for (uint256 i = 0; i < halfRowSize; i++) {\\n                leftSibling  = _elements[(2 * i)    ];\\n                rightSibling = _elements[(2 * i) + 1];\\n                assembly {\\n                    mstore(add(buf, 32), leftSibling )\\n                    mstore(add(buf, 64), rightSibling)\\n                }\\n\\n                _elements[i] = keccak256(buf);\\n            }\\n\\n            if (rowSizeIsOdd) {\\n                leftSibling  = _elements[rowSize - 1];\\n                rightSibling = bytes32(defaults[depth]);\\n                assembly {\\n                    mstore(add(buf, 32), leftSibling)\\n                    mstore(add(buf, 64), rightSibling)\\n                }\\n\\n                _elements[halfRowSize] = keccak256(buf);\\n            }\\n\\n            rowSize = halfRowSize + (rowSizeIsOdd ? 1 : 0);\\n            depth++;\\n        }\\n\\n        return _elements[0];\\n    }\\n\\n    /**\\n     * Verifies a merkle branch for the given leaf hash.  Assumes the original length\\n     * of leaves generated is a known, correct input, and does not return true for indices\\n     * extending past that index (even if _siblings would be otherwise valid.)\\n     * @param _root The Merkle root to verify against.\\n     * @param _leaf The leaf hash to verify inclusion of.\\n     * @param _index The index in the tree of this leaf.\\n     * @param _siblings Array of sibline nodes in the inclusion proof, starting from depth 0 (bottom of the tree).\\n     * @param _totalLeaves The total number of leaves originally passed into.\\n     * @return Whether or not the merkle branch and leaf passes verification.\\n     */\\n    function verify(\\n        bytes32 _root,\\n        bytes32 _leaf,\\n        uint256 _index,\\n        bytes32[] memory _siblings,\\n        uint256 _totalLeaves\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _totalLeaves > 0,\\n            \\"Lib_MerkleTree: Total leaves must be greater than zero.\\"\\n        );\\n\\n        require(\\n            _index < _totalLeaves,\\n            \\"Lib_MerkleTree: Index out of bounds.\\"\\n        );\\n\\n        require(\\n            _siblings.length == _ceilLog2(_totalLeaves),\\n            \\"Lib_MerkleTree: Total siblings does not correctly correspond to total leaves.\\"\\n        );\\n\\n        bytes32 computedRoot = _leaf;\\n\\n        for (uint256 i = 0; i < _siblings.length; i++) {\\n            if ((_index & 1) == 1) {\\n                computedRoot = keccak256(\\n                    abi.encodePacked(\\n                        _siblings[i],\\n                        computedRoot\\n                    )\\n                );\\n            } else {\\n                computedRoot = keccak256(\\n                    abi.encodePacked(\\n                        computedRoot,\\n                        _siblings[i]\\n                    )\\n                );\\n            }\\n\\n            _index >>= 1;\\n        }\\n\\n        return _root == computedRoot;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Calculates the integer ceiling of the log base 2 of an input.\\n     * @param _in Unsigned input to calculate the log.\\n     * @return ceil(log_base_2(_in))\\n     */\\n    function _ceilLog2(\\n        uint256 _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        require(\\n            _in > 0,\\n            \\"Lib_MerkleTree: Cannot compute ceil(log_2) of 0.\\"\\n        );\\n\\n        if (_in == 1) {\\n            return 0;\\n        }\\n\\n        // Find the highest set bit (will be floor(log_2)).\\n        // Borrowed with <3 from https://github.com/ethereum/solidity-examples\\n        uint256 val = _in;\\n        uint256 highest = 0;\\n        for (uint256 i = 128; i >= 1; i >>= 1) {\\n            if (val & (uint(1) << i) - 1 << i != 0) {\\n                highest += i;\\n                val >>= i;\\n            }\\n        }\\n\\n        // Increment by one if this is not a perfect logarithm.\\n        if ((uint(1) << highest) != _in) {\\n            highest += 1;\\n        }\\n\\n        return highest;\\n    }\\n}\\n","keccak256":"0xa78edb9fbd34712771a1ebff05bc5e1abec7fc1e9a1bfb709d183099b44fa62a","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b50604051611bee380380611bee83398101604081905261002f9161005b565b600080546001600160a01b0319166001600160a01b03949094169390931790925560015560025561009c565b60008060006060848603121561006f578283fd5b83516001600160a01b0381168114610085578384fd5b602085015160409095015190969495509392505050565b611b43806100ab6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638ca5cbb9116100715780638ca5cbb91461012f5780639418bddd14610144578063b8e189ac14610157578063c17b291b1461016a578063cfdf677e14610172578063e561dddc1461017a576100b4565b8063299ca478146100b9578063461a4478146100d75780634d69ee57146100ea5780637aa63a861461010a5780637ad168a01461011f57806381eb62ef14610127575b600080fd5b6100c1610182565b6040516100ce919061159f565b60405180910390f35b6100c16100e53660046114e3565b610191565b6100fd6100f8366004611431565b61026f565b6040516100ce91906115b3565b6101126102e2565b6040516100ce91906115be565b6101126102fb565b610112610314565b61014261013d366004611390565b61031a565b005b6100fd610152366004611531565b61052e565b610142610165366004611531565b61057e565b610112610636565b6100c161063c565b610112610664565b6000546001600160a01b031681565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b838110156101f15781810151838201526020016101d9565b50505050905090810190601f16801561021e5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561023b57600080fd5b505afa15801561024f573d6000803e3d6000fd5b505050506040513d602081101561026557600080fd5b505190505b919050565b600061027a836106de565b61029f5760405162461bcd60e51b815260040161029690611749565b60405180910390fd5b6102bc836020015185846000015185602001518760400151610776565b6102d85760405162461bcd60e51b8152600401610296906116b5565b5060019392505050565b6000806102ed6108fb565b5064ffffffffff1691505090565b6000806103066108fb565b64ffffffffff169250505090565b60025481565b6103226102e2565b81146103405760405162461bcd60e51b8152600401610296906116ec565b6103706040518060400160405280600f81526020016e27ab26afa137b73226b0b730b3b2b960891b815250610191565b6001600160a01b03166302ad4d2a336040518263ffffffff1660e01b815260040161039b919061159f565b60206040518083038186803b1580156103b357600080fd5b505afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb91906113d3565b6104075760405162461bcd60e51b8152600401610296906118bb565b60008251116104285760405162461bcd60e51b815260040161029690611878565b6104666040518060400160405280601d81526020017f4f564d5f43616e6f6e6963616c5472616e73616374696f6e436861696e000000815250610191565b6001600160a01b0316637aa63a866040518163ffffffff1660e01b815260040160206040518083038186803b15801561049e57600080fd5b505afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190611419565b82516104e06102e2565b0111156104ff5760405162461bcd60e51b815260040161029690611646565b61052a8242336040516020016105169291906119a1565b604051602081830303815290604052610990565b5050565b60008082608001518060200190518101906105499190611564565b509050806105695760405162461bcd60e51b815260040161029690611833565b4261057682600154610b31565b119392505050565b6105b06040518060400160405280601181526020017027ab26afa33930bab22b32b934b334b2b960791b815250610191565b6001600160a01b0316336001600160a01b0316146105e05760405162461bcd60e51b8152600401610296906117d6565b6105e9816106de565b6106055760405162461bcd60e51b815260040161029690611749565b61060e8161052e565b61062a5760405162461bcd60e51b815260040161029690611778565b61063381610b92565b50565b60015481565b600061065f604051806060016040528060258152602001611a6860259139610191565b905090565b600061066e61063c565b6001600160a01b0316631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f9190611419565b60006106e861063c565b8251604051634a83e9cd60e11b81526001600160a01b039290921691639507d39a91610716916004016115be565b60206040518083038186803b15801561072e57600080fd5b505afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190611419565b61076f83610d0a565b1492915050565b60008082116107b65760405162461bcd60e51b8152600401808060200182810382526037815260200180611a316037913960400191505060405180910390fd5b8184106107f45760405162461bcd60e51b81526004018080602001828103825260248152602001806119dd6024913960400191505060405180910390fd5b6107fd82610d50565b83511461083b5760405162461bcd60e51b815260040180806020018281038252604d815260200180611a8d604d913960600191505060405180910390fd5b8460005b84518110156108ee57856001166001141561089d5784818151811061086057fe5b60200260200101518260405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091506108e2565b818582815181106108aa57fe5b602002602001015160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091505b600195861c950161083f565b5090951495945050505050565b600080600061090861063c565b6001600160a01b031663ccf8f9696040518163ffffffff1660e01b815260040160206040518083038186803b15801561094057600080fd5b505afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097891906113f3565b64ffffffffff602882901c16935060501c9150509091565b60006109bf6040518060400160405280600c81526020016b27ab26afa83937b837b9b2b960a11b815250610191565b90506000806109cc6108fb565b9092509050336001600160a01b03841614156109e9575042610a13565b426002548264ffffffffff160110610a135760405162461bcd60e51b81526004016102969061190a565b60006040518060a00160405280610a28610664565b8152602001610a3688610de6565b8152602001875181526020018464ffffffffff16815260200186815250905080600001517f16be4c5129a4e03cf3350262e181dc02ddfb4a6008d925368c0899fcd97ca9c58260200151836040015184606001518560800151604051610a9f94939291906115dd565b60405180910390a2610aaf61063c565b6001600160a01b0316632015276c610ac683610d0a565b610ada84604001518560600151018661121a565b6040518363ffffffff1660e01b8152600401610af79291906115c7565b600060405180830381600087803b158015610b1157600080fd5b505af1158015610b25573d6000803e3d6000fd5b50505050505050505050565b600082820183811015610b8b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b610b9a61063c565b6001600160a01b0316631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd257600080fd5b505afa158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a9190611419565b815110610c295760405162461bcd60e51b815260040161029690611973565b610c32816106de565b610c4e5760405162461bcd60e51b815260040161029690611749565b610c5661063c565b6001600160a01b031663167fd6818260000151610c788460600151600061121a565b6040518363ffffffff1660e01b8152600401610c959291906115c7565b600060405180830381600087803b158015610caf57600080fd5b505af1158015610cc3573d6000803e3d6000fd5b5050505080600001517f8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd648260200151604051610cff91906115be565b60405180910390a250565b60008160200151826040015183606001518460800151604051602001610d3394939291906115dd565b604051602081830303815290604052805190602001209050919050565b6000808211610d905760405162461bcd60e51b8152600401808060200182810382526030815260200180611a016030913960400191505060405180910390fd5b8160011415610da15750600061026a565b81600060805b60018110610dd1576000196001821b01811b831615610dc95791821c91908101905b60011c610da7565b506001811b8414610b8b576001019392505050565b600080825111610e275760405162461bcd60e51b8152600401808060200182810382526034815260200180611ada6034913960400191505060405180910390fd5b815160011415610e4d5781600081518110610e3e57fe5b6020026020010151905061026a565b60408051610200810182527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381527f633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d60208201527f890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d818301527f3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd86060808301919091527fecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da60808301527fdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da560a08301527f617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d760c08301527f292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead60e08301527fe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e106101008301527f7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f826101208301527fe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e836365166101408301527f3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c6101608301527fad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e6101808301527fa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab6101a08301527f4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c8626101c08301527f2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf106101e083015282518381529081018352909160009190602082018180368337505085519192506000918291508180805b60018411156111f65750506002820460018084161460005b82811015611172578a816002028151811061111957fe5b602002602001015196508a816002026001018151811061113557fe5b6020026020010151955086602089015285604089015287805190602001208b828151811061115f57fe5b6020908102919091010152600101611102565b5080156111d55789600185038151811061118857fe5b6020026020010151955087836010811061119e57fe5b602002015160001b945085602088015284604088015286805190602001208a83815181106111c857fe5b6020026020010181815250505b806111e15760006111e4565b60015b60ff16820193506001909201916110ea565b8960008151811061120357fe5b602002602001015198505050505050505050919050565b602890811b91909117901b90565b600067ffffffffffffffff83111561123c57fe5b61124f601f8401601f19166020016119b8565b905082815283838301111561126357600080fd5b828260208301376000602084830101529392505050565b600082601f83011261128a578081fd5b8135602067ffffffffffffffff8211156112a057fe5b8082026112ae8282016119b8565b8381528281019086840183880185018910156112c8578687fd5b8693505b858410156112ea5780358352600193909301929184019184016112cc565b50979650505050505050565b600060a08284031215611307578081fd5b60405160a0810167ffffffffffffffff828210818311171561132557fe5b8160405282935084358352602085013560208401526040850135604084015260608501356060840152608085013591508082111561136257600080fd5b508301601f8101851361137457600080fd5b61138385823560208401611228565b6080830152505092915050565b600080604083850312156113a2578182fd5b823567ffffffffffffffff8111156113b8578283fd5b6113c48582860161127a565b95602094909401359450505050565b6000602082840312156113e4578081fd5b81518015158114610b8b578182fd5b600060208284031215611404578081fd5b815164ffffffffff1981168114610b8b578182fd5b60006020828403121561142a578081fd5b5051919050565b600080600060608486031215611445578081fd5b83359250602084013567ffffffffffffffff80821115611463578283fd5b61146f878388016112f6565b93506040860135915080821115611484578283fd5b9085019060408288031215611497578283fd5b6040516040810181811083821117156114ac57fe5b604052823581526020830135828111156114c4578485fd5b6114d08982860161127a565b6020830152508093505050509250925092565b6000602082840312156114f4578081fd5b813567ffffffffffffffff81111561150a578182fd5b8201601f8101841361151a578182fd5b61152984823560208401611228565b949350505050565b600060208284031215611542578081fd5b813567ffffffffffffffff811115611558578182fd5b611529848285016112f6565b60008060408385031215611576578182fd5b825160208401519092506001600160a01b0381168114611594578182fd5b809150509250929050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b91825264ffffffffff1916602082015260400190565b600085825260208581840152846040840152608060608401528351806080850152825b8181101561161c5785810183015185820160a001528201611600565b8181111561162d578360a083870101525b50601f01601f19169290920160a0019695505050505050565b60208082526049908201527f4e756d626572206f6620737461746520726f6f74732063616e6e6f742065786360408201527f65656420746865206e756d626572206f662063616e6f6e6963616c207472616e60608201526839b0b1ba34b7b7399760b91b608082015260a00190565b60208082526018908201527f496e76616c696420696e636c7573696f6e2070726f6f662e0000000000000000604082015260600190565b6020808252603d908201527f41637475616c20626174636820737461727420696e64657820646f6573206e6f60408201527f74206d6174636820657870656374656420737461727420696e6465782e000000606082015260800190565b60208082526015908201527424b73b30b634b2103130ba31b4103432b0b232b91760591b604082015260600190565b602080825260409082018190527f537461746520626174636865732063616e206f6e6c792062652064656c657465908201527f642077697468696e207468652066726175642070726f6f662077696e646f772e606082015260800190565b6020808252603b908201527f537461746520626174636865732063616e206f6e6c792062652064656c65746560408201527f6420627920746865204f564d5f467261756456657269666965722e0000000000606082015260800190565b60208082526025908201527f4261746368206865616465722074696d657374616d702063616e6e6f74206265604082015264207a65726f60d81b606082015260800190565b60208082526023908201527f43616e6e6f74207375626d697420616e20656d7074792073746174652062617460408201526231b41760e91b606082015260800190565b6020808252602f908201527f50726f706f73657220646f6573206e6f74206861766520656e6f75676820636f60408201526e1b1b185d195c985b081c1bdcdd1959608a1b606082015260800190565b60208082526043908201527f43616e6e6f74207075626c69736820737461746520726f6f747320776974686960408201527f6e207468652073657175656e636572207075626c69636174696f6e2077696e6460608201526237bb9760e91b608082015260a00190565b60208082526014908201527324b73b30b634b2103130ba31b41034b73232bc1760611b604082015260600190565b9182526001600160a01b0316602082015260400190565b60405181810167ffffffffffffffff811182821017156119d457fe5b60405291905056fe4c69625f4d65726b6c65547265653a20496e646578206f7574206f6620626f756e64732e4c69625f4d65726b6c65547265653a2043616e6e6f7420636f6d70757465206365696c286c6f675f3229206f6620302e4c69625f4d65726b6c65547265653a20546f74616c206c6561766573206d7573742062652067726561746572207468616e207a65726f2e4f564d5f436861696e53746f72616765436f6e7461696e65722d5343432d626174636865734c69625f4d65726b6c65547265653a20546f74616c207369626c696e677320646f6573206e6f7420636f72726563746c7920636f72726573706f6e6420746f20746f74616c206c65617665732e4c69625f4d65726b6c65547265653a204d7573742070726f76696465206174206c65617374206f6e65206c65616620686173682ea2646970667358221220fe58eec60e1130e9f94565e6ea97ae3f590e96eeda1a972687d27ab93f7f7df464736f6c63430007060033",deployedBytecode:"",devdoc:{details:"The State Commitment Chain (SCC) contract contains a list of proposed state roots which Proposers assert to be a result of each transaction in the Canonical Transaction Chain (CTC). Elements here have a 1:1 correspondence with transactions in the CTC, and should be the unique state root calculated off-chain by applying the canonical transactions one by one. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{"appendStateBatch(bytes32[],uint256)":{params:{_batch:"Batch of state roots.",_shouldStartAtElement:"Index of the element at which this batch should start."}},"batches()":{returns:{_0:"Reference to the batch storage container."}},constructor:{params:{_libAddressManager:"Address of the Address Manager."}},"deleteStateBatch((uint256,bytes32,uint256,uint256,bytes))":{params:{_batchHeader:"Header of the batch to start deleting from."}},"getLastSequencerTimestamp()":{returns:{_lastSequencerTimestamp:"Last sequencer batch timestamp."}},"getTotalBatches()":{returns:{_totalBatches:"Total submitted batches."}},"getTotalElements()":{returns:{_totalElements:"Total submitted elements."}},"insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes))":{params:{_batchHeader:"Header of the batch to check."},returns:{_inside:"Whether or not the batch is inside the fraud proof window."}},"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}},"verifyStateCommitment(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{params:{_batchHeader:"Header of the batch in which the element was included.",_element:"Hash of the element to verify a proof for.",_proof:"Merkle inclusion proof for the element."}}},title:"OVM_StateCommitmentChain",version:1},userdoc:{kind:"user",methods:{"appendStateBatch(bytes32[],uint256)":{notice:"Appends a batch of state roots to the chain."},"batches()":{notice:"Accesses the batch storage container."},"deleteStateBatch((uint256,bytes32,uint256,uint256,bytes))":{notice:"Deletes all state roots after (and including) a given batch."},"getLastSequencerTimestamp()":{notice:"Retrieves the timestamp of the last batch submitted by the sequencer."},"getTotalBatches()":{notice:"Retrieves the total number of batches submitted."},"getTotalElements()":{notice:"Retrieves the total number of elements submitted."},"insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes))":{notice:"Checks whether a given batch is still inside its fraud proof window."},"resolve(string)":{notice:"Resolves the address associated with a given name."},"verifyStateCommitment(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]))":{notice:"Verifies a batch inclusion proof."}},version:1},storageLayout:{storage:[{astId:15303,contract:"contracts/optimistic-ethereum/OVM/chain/OVM_StateCommitmentChain.sol:OVM_StateCommitmentChain",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15296"},{astId:6159,contract:"contracts/optimistic-ethereum/OVM/chain/OVM_StateCommitmentChain.sol:OVM_StateCommitmentChain",label:"FRAUD_PROOF_WINDOW",offset:0,slot:"1",type:"t_uint256"},{astId:6161,contract:"contracts/optimistic-ethereum/OVM/chain/OVM_StateCommitmentChain.sol:OVM_StateCommitmentChain",label:"SEQUENCER_PUBLISH_WINDOW",offset:0,slot:"2",type:"t_uint256"}],types:{"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"},t_uint256:{encoding:"inplace",label:"uint256",numberOfBytes:"32"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_StateCommitmentChain.json"}],[358,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0xd0e3e318154716BD9d007E1E6B021Eab246ff98d",abi:[{inputs:[{internalType:"address",name:"_owner",type:"address"}],name:"create",outputs:[{internalType:"contract iOVM_StateManager",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}],transactionHash:"0xb836668863e589c68dfa78eaf02f42a94595643b12c7b77de767dc572e073b17",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0xd0e3e318154716BD9d007E1E6B021Eab246ff98d",transactionIndex:52,gasUsed:"1170970",logsBloom:"0xblockHash:"0xbd242fd7b8461a41f603bfa1cf76a2942c634f0eefafe66349c0807a4057ebc8",transactionHash:"0xb836668863e589c68dfa78eaf02f42a94595643b12c7b77de767dc572e073b17",logs:[],blockNumber:12686769,cumulativeGasUsed:"4910141",status:1,byzantium:!0},args:[],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"create","outputs":[{"internalType":"contract iOVM_StateManager","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"The State Manager Factory is called by a State Transitioner\'s init code, to create a new State Manager for use in the Fraud Verification process. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"create(address)":{"params":{"_owner":"Owner of the created contract."},"returns":{"_0":"New OVM_StateManager instance."}}},"title":"OVM_StateManagerFactory","version":1},"userdoc":{"kind":"user","methods":{"create(address)":{"notice":"Creates a new OVM_StateManager"}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/execution/OVM_StateManagerFactory.sol":"OVM_StateManagerFactory"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/optimistic-ethereum/OVM/execution/OVM_StateManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_StateManager } from \\"../../iOVM/execution/iOVM_StateManager.sol\\";\\n\\n/**\\n * @title OVM_StateManager\\n * @dev The State Manager contract holds all storage values for contracts in the OVM. It can only be written to by the\\n * the Execution Manager and State Transitioner. It runs on L1 during the setup and execution of a fraud proof.\\n * The same logic runs on L2, but has been implemented as a precompile in the L2 go-ethereum client\\n * (see https://github.com/ethereum-optimism/go-ethereum/blob/master/core/vm/ovm_state_manager.go).\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_StateManager is iOVM_StateManager {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    bytes32 constant internal EMPTY_ACCOUNT_STORAGE_ROOT = 0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421;\\n    bytes32 constant internal EMPTY_ACCOUNT_CODE_HASH =    0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    bytes32 constant internal STORAGE_XOR_VALUE =          0xFEEDFACECAFEBEEFFEEDFACECAFEBEEFFEEDFACECAFEBEEFFEEDFACECAFEBEEF;\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    address override public owner;\\n    address override public ovmExecutionManager;\\n    mapping (address => Lib_OVMCodec.Account) internal accounts;\\n    mapping (address => mapping (bytes32 => bytes32)) internal contractStorage;\\n    mapping (address => mapping (bytes32 => bool)) internal verifiedContractStorage;\\n    mapping (bytes32 => ItemState) internal itemStates;\\n    uint256 internal totalUncommittedAccounts;\\n    uint256 internal totalUncommittedContractStorage;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _owner Address of the owner of this contract.\\n     */\\n    constructor(\\n        address _owner\\n    )\\n    {\\n        owner = _owner;\\n    }\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Simple authentication, this contract should only be accessible to the owner (which is expected to be the State Transitioner during `PRE_EXECUTION`\\n     * or the OVM_ExecutionManager during transaction execution.\\n     */\\n    modifier authenticated() {\\n        // owner is the State Transitioner\\n        require(\\n            msg.sender == owner || msg.sender == ovmExecutionManager,\\n            \\"Function can only be called by authenticated addresses\\"\\n        );\\n        _;\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Checks whether a given address is allowed to modify this contract.\\n     * @param _address Address to check.\\n     * @return Whether or not the address can modify this contract.\\n     */\\n    function isAuthenticated(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return (_address == owner || _address == ovmExecutionManager);\\n    }\\n\\n    /**\\n     * Sets the address of the OVM_ExecutionManager.\\n     * @param _ovmExecutionManager Address of the OVM_ExecutionManager.\\n     */\\n    function setExecutionManager(\\n        address _ovmExecutionManager\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        ovmExecutionManager = _ovmExecutionManager;\\n    }\\n\\n    /**\\n     * Inserts an account into the state.\\n     * @param _address Address of the account to insert.\\n     * @param _account Account to insert for the given address.\\n     */\\n    function putAccount(\\n        address _address,\\n        Lib_OVMCodec.Account memory _account\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        accounts[_address] = _account;\\n    }\\n\\n    /**\\n     * Marks an account as empty.\\n     * @param _address Address of the account to mark.\\n     */\\n    function putEmptyAccount(\\n        address _address\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        Lib_OVMCodec.Account storage account = accounts[_address];\\n        account.storageRoot = EMPTY_ACCOUNT_STORAGE_ROOT;\\n        account.codeHash = EMPTY_ACCOUNT_CODE_HASH;\\n    }\\n\\n    /**\\n     * Retrieves an account from the state.\\n     * @param _address Address of the account to retrieve.\\n     * @return Account for the given address.\\n     */\\n    function getAccount(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            Lib_OVMCodec.Account memory\\n        )\\n    {\\n        return accounts[_address];\\n    }\\n\\n    /**\\n     * Checks whether the state has a given account.\\n     * @param _address Address of the account to check.\\n     * @return Whether or not the state has the account.\\n     */\\n    function hasAccount(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return accounts[_address].codeHash != bytes32(0);\\n    }\\n\\n    /**\\n     * Checks whether the state has a given known empty account.\\n     * @param _address Address of the account to check.\\n     * @return Whether or not the state has the empty account.\\n     */\\n    function hasEmptyAccount(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return (\\n            accounts[_address].codeHash == EMPTY_ACCOUNT_CODE_HASH\\n            && accounts[_address].nonce == 0\\n        );\\n    }\\n\\n    /**\\n     * Sets the nonce of an account.\\n     * @param _address Address of the account to modify.\\n     * @param _nonce New account nonce.\\n     */\\n    function setAccountNonce(\\n        address _address,\\n        uint256 _nonce\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        accounts[_address].nonce = _nonce;\\n    }\\n\\n    /**\\n     * Gets the nonce of an account.\\n     * @param _address Address of the account to access.\\n     * @return Nonce of the account.\\n     */\\n    function getAccountNonce(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            uint256\\n        )\\n    {\\n        return accounts[_address].nonce;\\n    }\\n\\n    /**\\n     * Retrieves the Ethereum address of an account.\\n     * @param _address Address of the account to access.\\n     * @return Corresponding Ethereum address.\\n     */\\n    function getAccountEthAddress(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return accounts[_address].ethAddress;\\n    }\\n\\n    /**\\n     * Retrieves the storage root of an account.\\n     * @param _address Address of the account to access.\\n     * @return Corresponding storage root.\\n     */\\n    function getAccountStorageRoot(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return accounts[_address].storageRoot;\\n    }\\n\\n    /**\\n     * Initializes a pending account (during CREATE or CREATE2) with the default values.\\n     * @param _address Address of the account to initialize.\\n     */\\n    function initPendingAccount(\\n        address _address\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        Lib_OVMCodec.Account storage account = accounts[_address];\\n        account.nonce = 1;\\n        account.storageRoot = EMPTY_ACCOUNT_STORAGE_ROOT;\\n        account.codeHash = EMPTY_ACCOUNT_CODE_HASH;\\n        account.isFresh = true;\\n    }\\n\\n    /**\\n     * Finalizes the creation of a pending account (during CREATE or CREATE2).\\n     * @param _address Address of the account to finalize.\\n     * @param _ethAddress Address of the account\'s associated contract on Ethereum.\\n     * @param _codeHash Hash of the account\'s code.\\n     */\\n    function commitPendingAccount(\\n        address _address,\\n        address _ethAddress,\\n        bytes32 _codeHash\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        Lib_OVMCodec.Account storage account = accounts[_address];\\n        account.ethAddress = _ethAddress;\\n        account.codeHash = _codeHash;\\n    }\\n\\n    /**\\n     * Checks whether an account has already been retrieved, and marks it as retrieved if not.\\n     * @param _address Address of the account to check.\\n     * @return Whether or not the account was already loaded.\\n     */\\n    function testAndSetAccountLoaded(\\n        address _address\\n    )\\n        override\\n        public\\n        authenticated\\n        returns (\\n            bool\\n        )\\n    {\\n        return _testAndSetItemState(\\n            _getItemHash(_address),\\n            ItemState.ITEM_LOADED\\n        );\\n    }\\n\\n    /**\\n     * Checks whether an account has already been modified, and marks it as modified if not.\\n     * @param _address Address of the account to check.\\n     * @return Whether or not the account was already modified.\\n     */\\n    function testAndSetAccountChanged(\\n        address _address\\n    )\\n        override\\n        public\\n        authenticated\\n        returns (\\n            bool\\n        )\\n    {\\n        return _testAndSetItemState(\\n            _getItemHash(_address),\\n            ItemState.ITEM_CHANGED\\n        );\\n    }\\n\\n    /**\\n     * Attempts to mark an account as committed.\\n     * @param _address Address of the account to commit.\\n     * @return Whether or not the account was committed.\\n     */\\n    function commitAccount(\\n        address _address\\n    )\\n        override\\n        public\\n        authenticated\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 item = _getItemHash(_address);\\n        if (itemStates[item] != ItemState.ITEM_CHANGED) {\\n            return false;\\n        }\\n\\n        itemStates[item] = ItemState.ITEM_COMMITTED;\\n        totalUncommittedAccounts -= 1;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Increments the total number of uncommitted accounts.\\n     */\\n    function incrementTotalUncommittedAccounts()\\n        override\\n        public\\n        authenticated\\n    {\\n        totalUncommittedAccounts += 1;\\n    }\\n\\n    /**\\n     * Gets the total number of uncommitted accounts.\\n     * @return Total uncommitted accounts.\\n     */\\n    function getTotalUncommittedAccounts()\\n        override\\n        public\\n        view\\n        returns (\\n            uint256\\n        )\\n    {\\n        return totalUncommittedAccounts;\\n    }\\n\\n    /**\\n     * Checks whether a given account was changed during execution.\\n     * @param _address Address to check.\\n     * @return Whether or not the account was changed.\\n     */\\n    function wasAccountChanged(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 item = _getItemHash(_address);\\n        return itemStates[item] >= ItemState.ITEM_CHANGED;\\n    }\\n\\n    /**\\n     * Checks whether a given account was committed after execution.\\n     * @param _address Address to check.\\n     * @return Whether or not the account was committed.\\n     */\\n    function wasAccountCommitted(\\n        address _address\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 item = _getItemHash(_address);\\n        return itemStates[item] >= ItemState.ITEM_COMMITTED;\\n    }\\n\\n\\n    /************************************\\n     * Public Functions: Storage Access *\\n     ************************************/\\n\\n    /**\\n     * Changes a contract storage slot value.\\n     * @param _contract Address of the contract to modify.\\n     * @param _key 32 byte storage slot key.\\n     * @param _value 32 byte storage slot value.\\n     */\\n    function putContractStorage(\\n        address _contract,\\n        bytes32 _key,\\n        bytes32 _value\\n    )\\n        override\\n        public\\n        authenticated\\n    {\\n        // A hilarious optimization. `SSTORE`ing a value of `bytes32(0)` is common enough that it\'s\\n        // worth populating this with a non-zero value in advance (during the fraud proof\\n        // initialization phase) to cut the execution-time cost down to 5000 gas.\\n        contractStorage[_contract][_key] = _value ^ STORAGE_XOR_VALUE;\\n\\n        // Only used when initially populating the contract storage. OVM_ExecutionManager will\\n        // perform a `hasContractStorage` INVALID_STATE_ACCESS check before putting any contract\\n        // storage because writing to zero when the actual value is nonzero causes a gas\\n        // discrepancy. Could be moved into a new `putVerifiedContractStorage` function, or\\n        // something along those lines.\\n        if (verifiedContractStorage[_contract][_key] == false) {\\n            verifiedContractStorage[_contract][_key] = true;\\n        }\\n    }\\n\\n    /**\\n     * Retrieves a contract storage slot value.\\n     * @param _contract Address of the contract to access.\\n     * @param _key 32 byte storage slot key.\\n     * @return 32 byte storage slot value.\\n     */\\n    function getContractStorage(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bytes32\\n        )\\n    {\\n        // Storage XOR system doesn\'t work for newly created contracts that haven\'t set this\\n        // storage slot value yet.\\n        if (\\n            verifiedContractStorage[_contract][_key] == false\\n            && accounts[_contract].isFresh\\n        ) {\\n            return bytes32(0);\\n        }\\n\\n        // See `putContractStorage` for more information about the XOR here.\\n        return contractStorage[_contract][_key] ^ STORAGE_XOR_VALUE;\\n    }\\n\\n    /**\\n     * Checks whether a contract storage slot exists in the state.\\n     * @param _contract Address of the contract to access.\\n     * @param _key 32 byte storage slot key.\\n     * @return Whether or not the key was set in the state.\\n     */\\n    function hasContractStorage(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        return verifiedContractStorage[_contract][_key] || accounts[_contract].isFresh;\\n    }\\n\\n    /**\\n     * Checks whether a storage slot has already been retrieved, and marks it as retrieved if not.\\n     * @param _contract Address of the contract to check.\\n     * @param _key 32 byte storage slot key.\\n     * @return Whether or not the slot was already loaded.\\n     */\\n    function testAndSetContractStorageLoaded(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        authenticated\\n        returns (\\n            bool\\n        )\\n    {\\n        return _testAndSetItemState(\\n            _getItemHash(_contract, _key),\\n            ItemState.ITEM_LOADED\\n        );\\n    }\\n\\n    /**\\n     * Checks whether a storage slot has already been modified, and marks it as modified if not.\\n     * @param _contract Address of the contract to check.\\n     * @param _key 32 byte storage slot key.\\n     * @return Whether or not the slot was already modified.\\n     */\\n    function testAndSetContractStorageChanged(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        authenticated\\n        returns (\\n            bool\\n        )\\n    {\\n        return _testAndSetItemState(\\n            _getItemHash(_contract, _key),\\n            ItemState.ITEM_CHANGED\\n        );\\n    }\\n\\n    /**\\n     * Attempts to mark a storage slot as committed.\\n     * @param _contract Address of the account to commit.\\n     * @param _key 32 byte slot key to commit.\\n     * @return Whether or not the slot was committed.\\n     */\\n    function commitContractStorage(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        authenticated\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 item = _getItemHash(_contract, _key);\\n        if (itemStates[item] != ItemState.ITEM_CHANGED) {\\n            return false;\\n        }\\n\\n        itemStates[item] = ItemState.ITEM_COMMITTED;\\n        totalUncommittedContractStorage -= 1;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Increments the total number of uncommitted storage slots.\\n     */\\n    function incrementTotalUncommittedContractStorage()\\n        override\\n        public\\n        authenticated\\n    {\\n        totalUncommittedContractStorage += 1;\\n    }\\n\\n    /**\\n     * Gets the total number of uncommitted storage slots.\\n     * @return Total uncommitted storage slots.\\n     */\\n    function getTotalUncommittedContractStorage()\\n        override\\n        public\\n        view\\n        returns (\\n            uint256\\n        )\\n    {\\n        return totalUncommittedContractStorage;\\n    }\\n\\n    /**\\n     * Checks whether a given storage slot was changed during execution.\\n     * @param _contract Address to check.\\n     * @param _key Key of the storage slot to check.\\n     * @return Whether or not the storage slot was changed.\\n     */\\n    function wasContractStorageChanged(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 item = _getItemHash(_contract, _key);\\n        return itemStates[item] >= ItemState.ITEM_CHANGED;\\n    }\\n\\n    /**\\n     * Checks whether a given storage slot was committed after execution.\\n     * @param _contract Address to check.\\n     * @param _key Key of the storage slot to check.\\n     * @return Whether or not the storage slot was committed.\\n     */\\n    function wasContractStorageCommitted(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        bytes32 item = _getItemHash(_contract, _key);\\n        return itemStates[item] >= ItemState.ITEM_COMMITTED;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Generates a unique hash for an address.\\n     * @param _address Address to generate a hash for.\\n     * @return Unique hash for the given address.\\n     */\\n    function _getItemHash(\\n        address _address\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_address));\\n    }\\n\\n    /**\\n     * Generates a unique hash for an address/key pair.\\n     * @param _contract Address to generate a hash for.\\n     * @param _key Key to generate a hash for.\\n     * @return Unique hash for the given pair.\\n     */\\n    function _getItemHash(\\n        address _contract,\\n        bytes32 _key\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(\\n            _contract,\\n            _key\\n        ));\\n    }\\n\\n    /**\\n     * Checks whether an item is in a particular state (ITEM_LOADED or ITEM_CHANGED) and sets the\\n     * item to the provided state if not.\\n     * @param _item 32 byte item ID to check.\\n     * @param _minItemState Minimum state that must be satisfied by the item.\\n     * @return Whether or not the item was already in the state.\\n     */\\n    function _testAndSetItemState(\\n        bytes32 _item,\\n        ItemState _minItemState\\n    )\\n        internal\\n        returns (\\n            bool\\n        )\\n    {\\n        bool wasItemState = itemStates[_item] >= _minItemState;\\n\\n        if (wasItemState == false) {\\n            itemStates[_item] = _minItemState;\\n        }\\n\\n        return wasItemState;\\n    }\\n}\\n","keccak256":"0x0df9654f9f958038435c2b2a2c7793b20fa16afe866a69cbed32a371aaa4c78b","license":"MIT"},"contracts/optimistic-ethereum/OVM/execution/OVM_StateManagerFactory.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Interface Imports */\\nimport { iOVM_StateManager } from \\"../../iOVM/execution/iOVM_StateManager.sol\\";\\nimport { iOVM_StateManagerFactory } from \\"../../iOVM/execution/iOVM_StateManagerFactory.sol\\";\\n\\n/* Contract Imports */\\nimport { OVM_StateManager } from \\"./OVM_StateManager.sol\\";\\n\\n/**\\n * @title OVM_StateManagerFactory\\n * @dev The State Manager Factory is called by a State Transitioner\'s init code, to create a new\\n * State Manager for use in the Fraud Verification process.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_StateManagerFactory is iOVM_StateManagerFactory {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Creates a new OVM_StateManager\\n     * @param _owner Owner of the created contract.\\n     * @return New OVM_StateManager instance.\\n     */\\n    function create(\\n        address _owner\\n    )\\n        override\\n        public\\n        returns (\\n            iOVM_StateManager\\n        )\\n    {\\n        return new OVM_StateManager(_owner);\\n    }\\n}\\n","keccak256":"0xc557f05b8a82eee7b36a389795fe4acc0803bcf5ae33e15e9cba8226e9ab49fc","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_StateManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateManager\\n */\\ninterface iOVM_StateManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum ItemState {\\n        ITEM_UNTOUCHED,\\n        ITEM_LOADED,\\n        ITEM_CHANGED,\\n        ITEM_COMMITTED\\n    }\\n\\n    /***************************\\n     * Public Functions: Misc *\\n     ***************************/\\n\\n    function isAuthenticated(address _address) external view returns (bool);\\n\\n    /***************************\\n     * Public Functions: Setup *\\n     ***************************/\\n\\n    function owner() external view returns (address _owner);\\n    function ovmExecutionManager() external view returns (address _ovmExecutionManager);\\n    function setExecutionManager(address _ovmExecutionManager) external;\\n\\n\\n    /************************************\\n     * Public Functions: Account Access *\\n     ************************************/\\n\\n    function putAccount(address _address, Lib_OVMCodec.Account memory _account) external;\\n    function putEmptyAccount(address _address) external;\\n    function getAccount(address _address) external view returns (Lib_OVMCodec.Account memory _account);\\n    function hasAccount(address _address) external view returns (bool _exists);\\n    function hasEmptyAccount(address _address) external view returns (bool _exists);\\n    function setAccountNonce(address _address, uint256 _nonce) external;\\n    function getAccountNonce(address _address) external view returns (uint256 _nonce);\\n    function getAccountEthAddress(address _address) external view returns (address _ethAddress);\\n    function getAccountStorageRoot(address _address) external view returns (bytes32 _storageRoot);\\n    function initPendingAccount(address _address) external;\\n    function commitPendingAccount(address _address, address _ethAddress, bytes32 _codeHash) external;\\n    function testAndSetAccountLoaded(address _address) external returns (bool _wasAccountAlreadyLoaded);\\n    function testAndSetAccountChanged(address _address) external returns (bool _wasAccountAlreadyChanged);\\n    function commitAccount(address _address) external returns (bool _wasAccountCommitted);\\n    function incrementTotalUncommittedAccounts() external;\\n    function getTotalUncommittedAccounts() external view returns (uint256 _total);\\n    function wasAccountChanged(address _address) external view returns (bool);\\n    function wasAccountCommitted(address _address) external view returns (bool);\\n\\n\\n    /************************************\\n     * Public Functions: Storage Access *\\n     ************************************/\\n\\n    function putContractStorage(address _contract, bytes32 _key, bytes32 _value) external;\\n    function getContractStorage(address _contract, bytes32 _key) external view returns (bytes32 _value);\\n    function hasContractStorage(address _contract, bytes32 _key) external view returns (bool _exists);\\n    function testAndSetContractStorageLoaded(address _contract, bytes32 _key) external returns (bool _wasContractStorageAlreadyLoaded);\\n    function testAndSetContractStorageChanged(address _contract, bytes32 _key) external returns (bool _wasContractStorageAlreadyChanged);\\n    function commitContractStorage(address _contract, bytes32 _key) external returns (bool _wasContractStorageCommitted);\\n    function incrementTotalUncommittedContractStorage() external;\\n    function getTotalUncommittedContractStorage() external view returns (uint256 _total);\\n    function wasContractStorageChanged(address _contract, bytes32 _key) external view returns (bool);\\n    function wasContractStorageCommitted(address _contract, bytes32 _key) external view returns (bool);\\n}\\n","keccak256":"0x7a11dbd1f61593ba34debe07e39eef59967307f7f372ba9855bee0953585d08d","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_StateManagerFactory.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Contract Imports */\\nimport { iOVM_StateManager } from \\"./iOVM_StateManager.sol\\";\\n\\n/**\\n * @title iOVM_StateManagerFactory\\n */\\ninterface iOVM_StateManagerFactory {\\n\\n    /***************************************\\n     * Public Functions: Contract Creation *\\n     ***************************************/\\n\\n    function create(\\n        address _owner\\n    )\\n        external\\n        returns (\\n            iOVM_StateManager _ovmStateManager\\n        );\\n}\\n","keccak256":"0x27a90fc43889d0c7d1db50f37907ef7386d9b415d15a1e91a0a068cba59afd36","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b50611437806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639ed9331814610030575b600080fd5b6100566004803603602081101561004657600080fd5b50356001600160a01b0316610072565b604080516001600160a01b039092168252519081900360200190f35b600081604051610081906100b5565b6001600160a01b03909116815260405190819003602001906000f0801580156100ae573d6000803e3d6000fd5b5092915050565b61133f806100c38339019056fe608060405234801561001057600080fd5b5060405161133f38038061133f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6112ae806100916000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638f3b96471161010f578063d126199f116100a2578063e90abb8611610071578063e90abb86146103f9578063fb37b31c1461040c578063fbcbc0f11461041f578063fcf149a21461043f576101f0565b8063d126199f146103b8578063d15d4150146103cb578063d54414c8146103de578063d7bd4a2a146103f1576101f0565b8063c3fd9b25116100de578063c3fd9b2514610377578063c7650bf21461037f578063c8e40fbf14610392578063d0a215f2146103a5576101f0565b80638f3b96471461033657806399056ba914610349578063af37b86414610351578063af3dc01114610364576101f0565b806333f94305116101875780636f3c75af116101565780636f3c75af146102f55780637c8ee703146103085780637e86faa81461031b5780638da5cb5b1461032e576101f0565b806333f94305146102b25780635c17d629146102ba5780636b18e4e8146102cd5780636c87ad20146102e0576101f0565b8063167020d2116101c3578063167020d2146102595780631aaf392f1461026c5780631b208a5a1461028c57806326dc5b121461029f576101f0565b806307a12945146101f55780630ad226791461021e57806311b1f790146102315780631381ba4d14610244575b600080fd5b61020861020336600461101d565b610452565b60405161021591906111c4565b60405180910390f35b61020861022c366004611072565b6104ba565b61020861023f36600461101d565b610517565b61025761025236600461101d565b610573565b005b61020861026736600461101d565b6105d4565b61027f61027a366004611072565b610679565b60405161021591906111cf565b61020861029a36600461101d565b610727565b61027f6102ad36600461101d565b61075e565b61025761077d565b6102576102c836600461109b565b6107c7565b6102576102db36600461101d565b61089a565b6102e8610944565b60405161021591906111b0565b610208610303366004611072565b610953565b6102e861031636600461101d565b61098c565b610208610329366004611072565b6109ad565b6102e86109c3565b6102576103443660046110cd565b6109d2565b61027f610a88565b61020861035f366004611072565b610a8e565b610208610372366004611072565b610ae2565b610257610b2f565b61020861038d366004611072565b610b79565b6102086103a036600461101d565b610c20565b6102576103b3366004611037565b610c40565b61027f6103c636600461101d565b610cb9565b6102086103d936600461101d565b610cd4565b6102086103ec36600461101d565b610d01565b61027f610d16565b610257610407366004611072565b610d1c565b61020861041a36600461101d565b610d77565b61043261042d36600461101d565b610dc3565b604051610215919061122e565b61025761044d36600461101d565b610e37565b6001600160a01b0381166000908152600260205260408120600301547fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701480156104b257506001600160a01b038216600090815260026020526040902054155b90505b919050565b6001600160a01b038216600090815260046020908152604080832084845290915281205460ff168061050e57506001600160a01b038316600090815260026020526040902060040154600160a01b900460ff165b90505b92915050565b600080546001600160a01b031633148061053b57506001546001600160a01b031633145b6105605760405162461bcd60e51b8152600401610557906111d8565b60405180910390fd5b6104b261056c83610ef8565b6002610f28565b6000546001600160a01b031633148061059657506001546001600160a01b031633145b6105b25760405162461bcd60e51b8152600401610557906111d8565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314806105f857506001546001600160a01b031633145b6106145760405162461bcd60e51b8152600401610557906111d8565b600061061f83610ef8565b9050600260008281526005602052604090205460ff16600381111561064057fe5b1461064f5760009150506104b5565b6000908152600560205260409020805460ff19166003179055505060068054600019019055600190565b6001600160a01b038216600090815260046020908152604080832084845290915281205460ff161580156106cf57506001600160a01b038316600090815260026020526040902060040154600160a01b900460ff165b156106dc57506000610511565b506001600160a01b0391909116600090815260036020908152604080832093835292905220547ffeedfacecafebeeffeedfacecafebeeffeedfacecafebeeffeedfacecafebeef1890565b60008061073383610ef8565b905060025b60008281526005602052604090205460ff16600381111561075557fe5b10159392505050565b6001600160a01b03166000908152600260208190526040909120015490565b6000546001600160a01b03163314806107a057506001546001600160a01b031633145b6107bc5760405162461bcd60e51b8152600401610557906111d8565b600680546001019055565b6000546001600160a01b03163314806107ea57506001546001600160a01b031633145b6108065760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b038316600081815260036020908152604080832086845282528083207ffeedfacecafebeeffeedfacecafebeeffeedfacecafebeeffeedfacecafebeef86189055928252600481528282208583529052205460ff16610895576001600160a01b03831660009081526004602090815260408083208584529091529020805460ff191660011790555b505050565b6000546001600160a01b03163314806108bd57506001546001600160a01b031633145b6108d95760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b031660009081526002602081905260409091207f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421918101919091557fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470600390910155565b6001546001600160a01b031681565b6000806109608484610f8e565b905060025b60008281526005602052604090205460ff16600381111561098257fe5b1015949350505050565b6001600160a01b039081166000908152600260205260409020600401541690565b6000806109ba8484610f8e565b90506003610965565b6000546001600160a01b031681565b6000546001600160a01b03163314806109f557506001546001600160a01b031633145b610a115760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b039182166000908152600260208181526040928390208451815590840151600182015591830151908201556060820151600382015560808201516004909101805460a0909301516001600160a01b0319909316919093161760ff60a01b1916600160a01b91151591909102179055565b60075490565b600080546001600160a01b0316331480610ab257506001546001600160a01b031633145b610ace5760405162461bcd60e51b8152600401610557906111d8565b61050e610adb8484610f8e565b6001610f28565b600080546001600160a01b0316331480610b0657506001546001600160a01b031633145b610b225760405162461bcd60e51b8152600401610557906111d8565b61050e61056c8484610f8e565b6000546001600160a01b0316331480610b5257506001546001600160a01b031633145b610b6e5760405162461bcd60e51b8152600401610557906111d8565b600780546001019055565b600080546001600160a01b0316331480610b9d57506001546001600160a01b031633145b610bb95760405162461bcd60e51b8152600401610557906111d8565b6000610bc58484610f8e565b9050600260008281526005602052604090205460ff166003811115610be657fe5b14610bf5576000915050610511565b6000908152600560205260409020805460ff1916600317905550506007805460001901905550600190565b6001600160a01b0316600090815260026020526040902060030154151590565b6000546001600160a01b0316331480610c6357506001546001600160a01b031633145b610c7f5760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b0392831660009081526002602052604090206004810180546001600160a01b031916939094169290921790925560030155565b6001600160a01b031660009081526002602052604090205490565b600080546001600160a01b03838116911614806104b25750506001546001600160a01b0390811691161490565b600080610d0d83610ef8565b90506003610738565b60065490565b6000546001600160a01b0316331480610d3f57506001546001600160a01b031633145b610d5b5760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b03909116600090815260026020526040902055565b600080546001600160a01b0316331480610d9b57506001546001600160a01b031633145b610db75760405162461bcd60e51b8152600401610557906111d8565b6104b2610adb83610ef8565b610dcb610fc1565b506001600160a01b03908116600090815260026020818152604092839020835160c08101855281548152600182015492810192909252918201549281019290925260038101546060830152600401549182166080820152600160a01b90910460ff16151560a082015290565b6000546001600160a01b0316331480610e5a57506001546001600160a01b031633145b610e765760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b03166000908152600260208190526040909120600181557f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421918101919091557fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706003820155600401805460ff60a01b1916600160a01b179055565b600081604051602001610f0b9190611171565b604051602081830303815290604052805190602001209050919050565b600080826003811115610f3757fe5b60008581526005602052604090205460ff166003811115610f5457fe5b101590508061050e576000848152600560205260409020805484919060ff19166001836003811115610f8257fe5b02179055509392505050565b60008282604051602001610fa392919061118e565b60405160208183030381529060405280519060200120905092915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b80356001600160a01b03811681146104b557600080fd5b803580151581146104b557600080fd5b60006020828403121561102e578081fd5b61050e82610ff6565b60008060006060848603121561104b578182fd5b61105484610ff6565b925061106260208501610ff6565b9150604084013590509250925092565b60008060408385031215611084578182fd5b61108d83610ff6565b946020939093013593505050565b6000806000606084860312156110af578283fd5b6110b884610ff6565b95602085013595506040909401359392505050565b60008082840360e08112156110e0578283fd5b6110e984610ff6565b925060c0601f19820112156110fc578182fd5b5060405160c0810181811067ffffffffffffffff8211171561111a57fe5b80604052506020840135815260408401356020820152606084013560408201526080840135606082015261115060a08501610ff6565b608082015261116160c0850161100d565b60a0820152809150509250929050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b60208082526036908201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c65642062792061604082015275757468656e746963617465642061646472657373657360501b606082015260800190565b815181526020808301519082015260408083015190820152606080830151908201526080808301516001600160a01b03169082015260a09182015115159181019190915260c0019056fea2646970667358221220831108797bd578e5207b0f7717657875894fce501cf25b4109f65121461461ca64736f6c63430007060033a2646970667358221220c3b6fe114c6da51f019d7729cc2ec959a0decd1375f627f7e6327030359bac6264736f6c63430007060033",deployedBytecode:"0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639ed9331814610030575b600080fd5b6100566004803603602081101561004657600080fd5b50356001600160a01b0316610072565b604080516001600160a01b039092168252519081900360200190f35b600081604051610081906100b5565b6001600160a01b03909116815260405190819003602001906000f0801580156100ae573d6000803e3d6000fd5b5092915050565b61133f806100c38339019056fe608060405234801561001057600080fd5b5060405161133f38038061133f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b6112ae806100916000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638f3b96471161010f578063d126199f116100a2578063e90abb8611610071578063e90abb86146103f9578063fb37b31c1461040c578063fbcbc0f11461041f578063fcf149a21461043f576101f0565b8063d126199f146103b8578063d15d4150146103cb578063d54414c8146103de578063d7bd4a2a146103f1576101f0565b8063c3fd9b25116100de578063c3fd9b2514610377578063c7650bf21461037f578063c8e40fbf14610392578063d0a215f2146103a5576101f0565b80638f3b96471461033657806399056ba914610349578063af37b86414610351578063af3dc01114610364576101f0565b806333f94305116101875780636f3c75af116101565780636f3c75af146102f55780637c8ee703146103085780637e86faa81461031b5780638da5cb5b1461032e576101f0565b806333f94305146102b25780635c17d629146102ba5780636b18e4e8146102cd5780636c87ad20146102e0576101f0565b8063167020d2116101c3578063167020d2146102595780631aaf392f1461026c5780631b208a5a1461028c57806326dc5b121461029f576101f0565b806307a12945146101f55780630ad226791461021e57806311b1f790146102315780631381ba4d14610244575b600080fd5b61020861020336600461101d565b610452565b60405161021591906111c4565b60405180910390f35b61020861022c366004611072565b6104ba565b61020861023f36600461101d565b610517565b61025761025236600461101d565b610573565b005b61020861026736600461101d565b6105d4565b61027f61027a366004611072565b610679565b60405161021591906111cf565b61020861029a36600461101d565b610727565b61027f6102ad36600461101d565b61075e565b61025761077d565b6102576102c836600461109b565b6107c7565b6102576102db36600461101d565b61089a565b6102e8610944565b60405161021591906111b0565b610208610303366004611072565b610953565b6102e861031636600461101d565b61098c565b610208610329366004611072565b6109ad565b6102e86109c3565b6102576103443660046110cd565b6109d2565b61027f610a88565b61020861035f366004611072565b610a8e565b610208610372366004611072565b610ae2565b610257610b2f565b61020861038d366004611072565b610b79565b6102086103a036600461101d565b610c20565b6102576103b3366004611037565b610c40565b61027f6103c636600461101d565b610cb9565b6102086103d936600461101d565b610cd4565b6102086103ec36600461101d565b610d01565b61027f610d16565b610257610407366004611072565b610d1c565b61020861041a36600461101d565b610d77565b61043261042d36600461101d565b610dc3565b604051610215919061122e565b61025761044d36600461101d565b610e37565b6001600160a01b0381166000908152600260205260408120600301547fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701480156104b257506001600160a01b038216600090815260026020526040902054155b90505b919050565b6001600160a01b038216600090815260046020908152604080832084845290915281205460ff168061050e57506001600160a01b038316600090815260026020526040902060040154600160a01b900460ff165b90505b92915050565b600080546001600160a01b031633148061053b57506001546001600160a01b031633145b6105605760405162461bcd60e51b8152600401610557906111d8565b60405180910390fd5b6104b261056c83610ef8565b6002610f28565b6000546001600160a01b031633148061059657506001546001600160a01b031633145b6105b25760405162461bcd60e51b8152600401610557906111d8565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b03163314806105f857506001546001600160a01b031633145b6106145760405162461bcd60e51b8152600401610557906111d8565b600061061f83610ef8565b9050600260008281526005602052604090205460ff16600381111561064057fe5b1461064f5760009150506104b5565b6000908152600560205260409020805460ff19166003179055505060068054600019019055600190565b6001600160a01b038216600090815260046020908152604080832084845290915281205460ff161580156106cf57506001600160a01b038316600090815260026020526040902060040154600160a01b900460ff165b156106dc57506000610511565b506001600160a01b0391909116600090815260036020908152604080832093835292905220547ffeedfacecafebeeffeedfacecafebeeffeedfacecafebeeffeedfacecafebeef1890565b60008061073383610ef8565b905060025b60008281526005602052604090205460ff16600381111561075557fe5b10159392505050565b6001600160a01b03166000908152600260208190526040909120015490565b6000546001600160a01b03163314806107a057506001546001600160a01b031633145b6107bc5760405162461bcd60e51b8152600401610557906111d8565b600680546001019055565b6000546001600160a01b03163314806107ea57506001546001600160a01b031633145b6108065760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b038316600081815260036020908152604080832086845282528083207ffeedfacecafebeeffeedfacecafebeeffeedfacecafebeeffeedfacecafebeef86189055928252600481528282208583529052205460ff16610895576001600160a01b03831660009081526004602090815260408083208584529091529020805460ff191660011790555b505050565b6000546001600160a01b03163314806108bd57506001546001600160a01b031633145b6108d95760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b031660009081526002602081905260409091207f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421918101919091557fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470600390910155565b6001546001600160a01b031681565b6000806109608484610f8e565b905060025b60008281526005602052604090205460ff16600381111561098257fe5b1015949350505050565b6001600160a01b039081166000908152600260205260409020600401541690565b6000806109ba8484610f8e565b90506003610965565b6000546001600160a01b031681565b6000546001600160a01b03163314806109f557506001546001600160a01b031633145b610a115760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b039182166000908152600260208181526040928390208451815590840151600182015591830151908201556060820151600382015560808201516004909101805460a0909301516001600160a01b0319909316919093161760ff60a01b1916600160a01b91151591909102179055565b60075490565b600080546001600160a01b0316331480610ab257506001546001600160a01b031633145b610ace5760405162461bcd60e51b8152600401610557906111d8565b61050e610adb8484610f8e565b6001610f28565b600080546001600160a01b0316331480610b0657506001546001600160a01b031633145b610b225760405162461bcd60e51b8152600401610557906111d8565b61050e61056c8484610f8e565b6000546001600160a01b0316331480610b5257506001546001600160a01b031633145b610b6e5760405162461bcd60e51b8152600401610557906111d8565b600780546001019055565b600080546001600160a01b0316331480610b9d57506001546001600160a01b031633145b610bb95760405162461bcd60e51b8152600401610557906111d8565b6000610bc58484610f8e565b9050600260008281526005602052604090205460ff166003811115610be657fe5b14610bf5576000915050610511565b6000908152600560205260409020805460ff1916600317905550506007805460001901905550600190565b6001600160a01b0316600090815260026020526040902060030154151590565b6000546001600160a01b0316331480610c6357506001546001600160a01b031633145b610c7f5760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b0392831660009081526002602052604090206004810180546001600160a01b031916939094169290921790925560030155565b6001600160a01b031660009081526002602052604090205490565b600080546001600160a01b03838116911614806104b25750506001546001600160a01b0390811691161490565b600080610d0d83610ef8565b90506003610738565b60065490565b6000546001600160a01b0316331480610d3f57506001546001600160a01b031633145b610d5b5760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b03909116600090815260026020526040902055565b600080546001600160a01b0316331480610d9b57506001546001600160a01b031633145b610db75760405162461bcd60e51b8152600401610557906111d8565b6104b2610adb83610ef8565b610dcb610fc1565b506001600160a01b03908116600090815260026020818152604092839020835160c08101855281548152600182015492810192909252918201549281019290925260038101546060830152600401549182166080820152600160a01b90910460ff16151560a082015290565b6000546001600160a01b0316331480610e5a57506001546001600160a01b031633145b610e765760405162461bcd60e51b8152600401610557906111d8565b6001600160a01b03166000908152600260208190526040909120600181557f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421918101919091557fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706003820155600401805460ff60a01b1916600160a01b179055565b600081604051602001610f0b9190611171565b604051602081830303815290604052805190602001209050919050565b600080826003811115610f3757fe5b60008581526005602052604090205460ff166003811115610f5457fe5b101590508061050e576000848152600560205260409020805484919060ff19166001836003811115610f8257fe5b02179055509392505050565b60008282604051602001610fa392919061118e565b60405160208183030381529060405280519060200120905092915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b80356001600160a01b03811681146104b557600080fd5b803580151581146104b557600080fd5b60006020828403121561102e578081fd5b61050e82610ff6565b60008060006060848603121561104b578182fd5b61105484610ff6565b925061106260208501610ff6565b9150604084013590509250925092565b60008060408385031215611084578182fd5b61108d83610ff6565b946020939093013593505050565b6000806000606084860312156110af578283fd5b6110b884610ff6565b95602085013595506040909401359392505050565b60008082840360e08112156110e0578283fd5b6110e984610ff6565b925060c0601f19820112156110fc578182fd5b5060405160c0810181811067ffffffffffffffff8211171561111a57fe5b80604052506020840135815260408401356020820152606084013560408201526080840135606082015261115060a08501610ff6565b608082015261116160c0850161100d565b60a0820152809150509250929050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b60208082526036908201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c65642062792061604082015275757468656e746963617465642061646472657373657360501b606082015260800190565b815181526020808301519082015260408083015190820152606080830151908201526080808301516001600160a01b03169082015260a09182015115159181019190915260c0019056fea2646970667358221220831108797bd578e5207b0f7717657875894fce501cf25b4109f65121461461ca64736f6c63430007060033a2646970667358221220c3b6fe114c6da51f019d7729cc2ec959a0decd1375f627f7e6327030359bac6264736f6c63430007060033",devdoc:{details:"The State Manager Factory is called by a State Transitioner's init code, to create a new State Manager for use in the Fraud Verification process. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{"create(address)":{params:{_owner:"Owner of the created contract."},returns:{_0:"New OVM_StateManager instance."}}},title:"OVM_StateManagerFactory",version:1},userdoc:{kind:"user",methods:{"create(address)":{notice:"Creates a new OVM_StateManager"}},version:1},storageLayout:{storage:[],types:null}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_StateManagerFactory.json"}],[359,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0x38A6ed6fd76035684caDef38cF49a2FffA782B67",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"},{internalType:"uint256",name:"_stateTransitionIndex",type:"uint256"},{internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{internalType:"bytes32",name:"_transactionHash",type:"bytes32"}],name:"create",outputs:[{internalType:"contract iOVM_StateTransitioner",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],transactionHash:"0xccad165e14d16a839e19f77b81be34d3c7b2138d1b9e256447e8a30ae5dfb59d",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0x38A6ed6fd76035684caDef38cF49a2FffA782B67",transactionIndex:141,gasUsed:"4209012",logsBloom:"0xblockHash:"0xa714317a982d5b02a89d09360f459eff63478a084d1fc3b267a50f9e1d8dc264",transactionHash:"0xccad165e14d16a839e19f77b81be34d3c7b2138d1b9e256447e8a30ae5dfb59d",logs:[],blockNumber:12686773,cumulativeGasUsed:"12610571",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F"],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"},{"internalType":"uint256","name":"_stateTransitionIndex","type":"uint256"},{"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"internalType":"bytes32","name":"_transactionHash","type":"bytes32"}],"name":"create","outputs":[{"internalType":"contract iOVM_StateTransitioner","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The State Transitioner Factory is used by the Fraud Verifier to create a new State Transitioner during the initialization of a fraud proof. Compiler used: solc Runtime target: EVM","kind":"dev","methods":{"create(address,uint256,bytes32,bytes32)":{"params":{"_libAddressManager":"Address of the Address Manager.","_preStateRoot":"State root before the transition was executed.","_stateTransitionIndex":"Index of the state transition being verified.","_transactionHash":"Hash of the executed transaction."},"returns":{"_0":"New OVM_StateTransitioner instance."}},"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}}},"title":"OVM_StateTransitionerFactory","version":1},"userdoc":{"kind":"user","methods":{"create(address,uint256,bytes32,bytes32)":{"notice":"Creates a new OVM_StateTransitioner"},"resolve(string)":{"notice":"Resolves the address associated with a given name."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/OVM/verification/OVM_StateTransitionerFactory.sol":"OVM_StateTransitionerFactory"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/OVM/verification/Abs_FraudContributor.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\nimport { iOVM_BondManager } from \\"../../iOVM/verification/iOVM_BondManager.sol\\";\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\n\\n/// Minimal contract to be inherited by contracts consumed by users that provide\\n/// data for fraud proofs\\nabstract contract Abs_FraudContributor is Lib_AddressResolver {\\n    /// Decorate your functions with this modifier to store how much total gas was\\n    /// consumed by the sender, to reward users fairly\\n    modifier contributesToFraudProof(bytes32 preStateRoot, bytes32 txHash) {\\n        uint256 startGas = gasleft();\\n        _;\\n        uint256 gasSpent = startGas - gasleft();\\n        iOVM_BondManager(resolve(\'OVM_BondManager\')).recordGasSpent(preStateRoot, txHash, msg.sender, gasSpent);\\n    }\\n}\\n","keccak256":"0x6c27d089a297103cb93b30f7649ab68691cc6b948c315f1037e5de1fe9bf5903","license":"MIT"},"contracts/optimistic-ethereum/OVM/verification/OVM_StateTransitioner.sol":{"content":"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\nimport { Lib_EthUtils } from \\"../../libraries/utils/Lib_EthUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../../libraries/utils/Lib_Bytes32Utils.sol\\";\\nimport { Lib_BytesUtils } from \\"../../libraries/utils/Lib_BytesUtils.sol\\";\\nimport { Lib_SecureMerkleTrie } from \\"../../libraries/trie/Lib_SecureMerkleTrie.sol\\";\\nimport { Lib_RLPWriter } from \\"../../libraries/rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_RLPReader } from \\"../../libraries/rlp/Lib_RLPReader.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_StateTransitioner } from \\"../../iOVM/verification/iOVM_StateTransitioner.sol\\";\\nimport { iOVM_BondManager } from \\"../../iOVM/verification/iOVM_BondManager.sol\\";\\nimport { iOVM_ExecutionManager } from \\"../../iOVM/execution/iOVM_ExecutionManager.sol\\";\\nimport { iOVM_StateManager } from \\"../../iOVM/execution/iOVM_StateManager.sol\\";\\nimport { iOVM_StateManagerFactory } from \\"../../iOVM/execution/iOVM_StateManagerFactory.sol\\";\\n\\n/* Contract Imports */\\nimport { Abs_FraudContributor } from \\"./Abs_FraudContributor.sol\\";\\n\\n/**\\n * @title OVM_StateTransitioner\\n * @dev The State Transitioner coordinates the execution of a state transition during the evaluation of a\\n * fraud proof. It feeds verified input to the Execution Manager\'s run(), and controls a State Manager (which is\\n * uniquely created for each fraud proof).\\n * Once a fraud proof has been initialized, this contract is provided with the pre-state root and verifies\\n * that the OVM storage slots committed to the State Mangager are contained in that state\\n * This contract controls the State Manager and Execution Manager, and uses them to calculate the\\n * post-state root by applying the transaction. The Fraud Verifier can then check for fraud by comparing\\n * the calculated post-state root with the proposed post-state root.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_StateTransitioner is Lib_AddressResolver, Abs_FraudContributor, iOVM_StateTransitioner {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum TransitionPhase {\\n        PRE_EXECUTION,\\n        POST_EXECUTION,\\n        COMPLETE\\n    }\\n\\n\\n    /*******************************************\\n     * Contract Variables: Contract References *\\n     *******************************************/\\n\\n    iOVM_StateManager public ovmStateManager;\\n\\n\\n    /*******************************************\\n     * Contract Variables: Internal Accounting *\\n     *******************************************/\\n\\n    bytes32 internal preStateRoot;\\n    bytes32 internal postStateRoot;\\n    TransitionPhase public phase;\\n    uint256 internal stateTransitionIndex;\\n    bytes32 internal transactionHash;\\n\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    bytes32 internal constant EMPTY_ACCOUNT_CODE_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    bytes32 internal constant EMPTY_ACCOUNT_STORAGE_ROOT = 0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Address Manager.\\n     * @param _stateTransitionIndex Index of the state transition being verified.\\n     * @param _preStateRoot State root before the transition was executed.\\n     * @param _transactionHash Hash of the executed transaction.\\n     */\\n    constructor(\\n        address _libAddressManager,\\n        uint256 _stateTransitionIndex,\\n        bytes32 _preStateRoot,\\n        bytes32 _transactionHash\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {\\n        stateTransitionIndex = _stateTransitionIndex;\\n        preStateRoot = _preStateRoot;\\n        postStateRoot = _preStateRoot;\\n        transactionHash = _transactionHash;\\n\\n        ovmStateManager = iOVM_StateManagerFactory(resolve(\\"OVM_StateManagerFactory\\")).create(address(this));\\n    }\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Checks that a function is only run during a specific phase.\\n     * @param _phase Phase the function must run within.\\n     */\\n    modifier onlyDuringPhase(\\n        TransitionPhase _phase\\n    ) {\\n        require(\\n            phase == _phase,\\n            \\"Function must be called during the correct phase.\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /**********************************\\n     * Public Functions: State Access *\\n     **********************************/\\n\\n    /**\\n     * Retrieves the state root before execution.\\n     * @return _preStateRoot State root before execution.\\n     */\\n    function getPreStateRoot()\\n        override\\n        external\\n        view\\n        returns (\\n            bytes32 _preStateRoot\\n        )\\n    {\\n        return preStateRoot;\\n    }\\n\\n    /**\\n     * Retrieves the state root after execution.\\n     * @return _postStateRoot State root after execution.\\n     */\\n    function getPostStateRoot()\\n        override\\n        external\\n        view\\n        returns (\\n            bytes32 _postStateRoot\\n        )\\n    {\\n        return postStateRoot;\\n    }\\n\\n    /**\\n     * Checks whether the transitioner is complete.\\n     * @return _complete Whether or not the transition process is finished.\\n     */\\n    function isComplete()\\n        override\\n        external\\n        view\\n        returns (\\n            bool _complete\\n        )\\n    {\\n        return phase == TransitionPhase.COMPLETE;\\n    }\\n\\n\\n    /***********************************\\n     * Public Functions: Pre-Execution *\\n     ***********************************/\\n\\n    /**\\n     * Allows a user to prove the initial state of a contract.\\n     * @param _ovmContractAddress Address of the contract on the OVM.\\n     * @param _ethContractAddress Address of the corresponding contract on L1.\\n     * @param _stateTrieWitness Proof of the account state.\\n     */\\n    function proveContractState(\\n        address _ovmContractAddress,\\n        address _ethContractAddress,\\n        bytes memory _stateTrieWitness\\n    )\\n        override\\n        external\\n        onlyDuringPhase(TransitionPhase.PRE_EXECUTION)\\n        contributesToFraudProof(preStateRoot, transactionHash)\\n    {\\n        // Exit quickly to avoid unnecessary work.\\n        require(\\n            (\\n                ovmStateManager.hasAccount(_ovmContractAddress) == false\\n                && ovmStateManager.hasEmptyAccount(_ovmContractAddress) == false\\n            ),\\n            \\"Account state has already been proven.\\"\\n        );\\n\\n        // Function will fail if the proof is not a valid inclusion or exclusion proof.\\n        (\\n            bool exists,\\n            bytes memory encodedAccount\\n        ) = Lib_SecureMerkleTrie.get(\\n            abi.encodePacked(_ovmContractAddress),\\n            _stateTrieWitness,\\n            preStateRoot\\n        );\\n\\n        if (exists == true) {\\n            // Account exists, this was an inclusion proof.\\n            Lib_OVMCodec.EVMAccount memory account = Lib_OVMCodec.decodeEVMAccount(\\n                encodedAccount\\n            );\\n\\n            address ethContractAddress = _ethContractAddress;\\n            if (account.codeHash == EMPTY_ACCOUNT_CODE_HASH) {\\n                // Use a known empty contract to prevent an attack in which a user provides a\\n                // contract address here and then later deploys code to it.\\n                ethContractAddress = 0x0000000000000000000000000000000000000000;\\n            } else {\\n                // Otherwise, make sure that the code at the provided eth address matches the hash\\n                // of the code stored on L2.\\n                require(\\n                    Lib_EthUtils.getCodeHash(ethContractAddress) == account.codeHash,\\n                    \\"OVM_StateTransitioner: Provided L1 contract code hash does not match L2 contract code hash.\\"\\n                );\\n            }\\n\\n            ovmStateManager.putAccount(\\n                _ovmContractAddress,\\n                Lib_OVMCodec.Account({\\n                    nonce: account.nonce,\\n                    balance: account.balance,\\n                    storageRoot: account.storageRoot,\\n                    codeHash: account.codeHash,\\n                    ethAddress: ethContractAddress,\\n                    isFresh: false\\n                })\\n            );\\n        } else {\\n            // Account does not exist, this was an exclusion proof.\\n            ovmStateManager.putEmptyAccount(_ovmContractAddress);\\n        }\\n    }\\n\\n    /**\\n     * Allows a user to prove the initial state of a contract storage slot.\\n     * @param _ovmContractAddress Address of the contract on the OVM.\\n     * @param _key Claimed account slot key.\\n     * @param _storageTrieWitness Proof of the storage slot.\\n     */\\n    function proveStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes memory _storageTrieWitness\\n    )\\n        override\\n        external\\n        onlyDuringPhase(TransitionPhase.PRE_EXECUTION)\\n        contributesToFraudProof(preStateRoot, transactionHash)\\n    {\\n        // Exit quickly to avoid unnecessary work.\\n        require(\\n            ovmStateManager.hasContractStorage(_ovmContractAddress, _key) == false,\\n            \\"Storage slot has already been proven.\\"\\n        );\\n\\n        require(\\n            ovmStateManager.hasAccount(_ovmContractAddress) == true,\\n            \\"Contract must be verified before proving a storage slot.\\"\\n        );\\n\\n        bytes32 storageRoot = ovmStateManager.getAccountStorageRoot(_ovmContractAddress);\\n        bytes32 value;\\n\\n        if (storageRoot == EMPTY_ACCOUNT_STORAGE_ROOT) {\\n            // Storage trie was empty, so the user is always allowed to insert zero-byte values.\\n            value = bytes32(0);\\n        } else {\\n            // Function will fail if the proof is not a valid inclusion or exclusion proof.\\n            (\\n                bool exists,\\n                bytes memory encodedValue\\n            ) = Lib_SecureMerkleTrie.get(\\n                abi.encodePacked(_key),\\n                _storageTrieWitness,\\n                storageRoot\\n            );\\n\\n            if (exists == true) {\\n                // Inclusion proof.\\n                // Stored values are RLP encoded, with leading zeros removed.\\n                value = Lib_BytesUtils.toBytes32PadLeft(\\n                    Lib_RLPReader.readBytes(encodedValue)\\n                );\\n            } else {\\n                // Exclusion proof, can only be zero bytes.\\n                value = bytes32(0);\\n            }\\n        }\\n\\n        ovmStateManager.putContractStorage(\\n            _ovmContractAddress,\\n            _key,\\n            value\\n        );\\n    }\\n\\n\\n    /*******************************\\n     * Public Functions: Execution *\\n     *******************************/\\n\\n    /**\\n     * Executes the state transition.\\n     * @param _transaction OVM transaction to execute.\\n     */\\n    function applyTransaction(\\n        Lib_OVMCodec.Transaction memory _transaction\\n    )\\n        override\\n        external\\n        onlyDuringPhase(TransitionPhase.PRE_EXECUTION)\\n        contributesToFraudProof(preStateRoot, transactionHash)\\n    {\\n        require(\\n            Lib_OVMCodec.hashTransaction(_transaction) == transactionHash,\\n            \\"Invalid transaction provided.\\"\\n        );\\n\\n        // We require gas to complete the logic here in run() before/after execution,\\n        // But must ensure the full _tx.gasLimit can be given to the ovmCALL (determinism)\\n        // This includes 1/64 of the gas getting lost because of EIP-150 (lost twice--first\\n        // going into EM, then going into the code contract).\\n        require(\\n            gasleft() >= 100000 + _transaction.gasLimit * 1032 / 1000, // 1032/1000 = 1.032 = (64/63)^2 rounded up\\n            \\"Not enough gas to execute transaction deterministically.\\"\\n        );\\n\\n        iOVM_ExecutionManager ovmExecutionManager = iOVM_ExecutionManager(resolve(\\"OVM_ExecutionManager\\"));\\n\\n        // We call `setExecutionManager` right before `run` (and not earlier) just in case the\\n        // OVM_ExecutionManager address was updated between the time when this contract was created\\n        // and when `applyTransaction` was called.\\n        ovmStateManager.setExecutionManager(address(ovmExecutionManager));\\n\\n        // `run` always succeeds *unless* the user hasn\'t provided enough gas to `applyTransaction`\\n        // or an INVALID_STATE_ACCESS flag was triggered. Either way, we won\'t get beyond this line\\n        // if that\'s the case.\\n        ovmExecutionManager.run(_transaction, address(ovmStateManager));\\n\\n        // Prevent the Execution Manager from calling this SM again.\\n        ovmStateManager.setExecutionManager(address(0));\\n        phase = TransitionPhase.POST_EXECUTION;\\n    }\\n\\n\\n    /************************************\\n     * Public Functions: Post-Execution *\\n     ************************************/\\n\\n    /**\\n     * Allows a user to commit the final state of a contract.\\n     * @param _ovmContractAddress Address of the contract on the OVM.\\n     * @param _stateTrieWitness Proof of the account state.\\n     */\\n    function commitContractState(\\n        address _ovmContractAddress,\\n        bytes memory _stateTrieWitness\\n    )\\n        override\\n        external\\n        onlyDuringPhase(TransitionPhase.POST_EXECUTION)\\n        contributesToFraudProof(preStateRoot, transactionHash)\\n    {\\n        require(\\n            ovmStateManager.getTotalUncommittedContractStorage() == 0,\\n            \\"All storage must be committed before committing account states.\\"\\n        );\\n\\n        require (\\n            ovmStateManager.commitAccount(_ovmContractAddress) == true,\\n            \\"Account state wasn\'t changed or has already been committed.\\"\\n        );\\n\\n        Lib_OVMCodec.Account memory account = ovmStateManager.getAccount(_ovmContractAddress);\\n\\n        postStateRoot = Lib_SecureMerkleTrie.update(\\n            abi.encodePacked(_ovmContractAddress),\\n            Lib_OVMCodec.encodeEVMAccount(\\n                Lib_OVMCodec.toEVMAccount(account)\\n            ),\\n            _stateTrieWitness,\\n            postStateRoot\\n        );\\n\\n        // Emit an event to help clients figure out the proof ordering.\\n        emit AccountCommitted(\\n            _ovmContractAddress\\n        );\\n    }\\n\\n    /**\\n     * Allows a user to commit the final state of a contract storage slot.\\n     * @param _ovmContractAddress Address of the contract on the OVM.\\n     * @param _key Claimed account slot key.\\n     * @param _storageTrieWitness Proof of the storage slot.\\n     */\\n    function commitStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes memory _storageTrieWitness\\n    )\\n        override\\n        external\\n        onlyDuringPhase(TransitionPhase.POST_EXECUTION)\\n        contributesToFraudProof(preStateRoot, transactionHash)\\n    {\\n        require(\\n            ovmStateManager.commitContractStorage(_ovmContractAddress, _key) == true,\\n            \\"Storage slot value wasn\'t changed or has already been committed.\\"\\n        );\\n\\n        Lib_OVMCodec.Account memory account = ovmStateManager.getAccount(_ovmContractAddress);\\n        bytes32 value = ovmStateManager.getContractStorage(_ovmContractAddress, _key);\\n\\n        account.storageRoot = Lib_SecureMerkleTrie.update(\\n            abi.encodePacked(_key),\\n            Lib_RLPWriter.writeBytes(\\n                Lib_Bytes32Utils.removeLeadingZeros(value)\\n            ),\\n            _storageTrieWitness,\\n            account.storageRoot\\n        );\\n\\n        ovmStateManager.putAccount(_ovmContractAddress, account);\\n\\n        // Emit an event to help clients figure out the proof ordering.\\n        emit ContractStorageCommitted(\\n            _ovmContractAddress,\\n            _key\\n        );\\n    }\\n\\n\\n    /**********************************\\n     * Public Functions: Finalization *\\n     **********************************/\\n\\n    /**\\n     * Finalizes the transition process.\\n     */\\n    function completeTransition()\\n        override\\n        external\\n        onlyDuringPhase(TransitionPhase.POST_EXECUTION)\\n    {\\n        require(\\n            ovmStateManager.getTotalUncommittedAccounts() == 0,\\n            \\"All accounts must be committed before completing a transition.\\"\\n        );\\n\\n        require(\\n            ovmStateManager.getTotalUncommittedContractStorage() == 0,\\n            \\"All storage must be committed before completing a transition.\\"\\n        );\\n\\n        phase = TransitionPhase.COMPLETE;\\n    }\\n}\\n","keccak256":"0x53231f64d413623b2b8c4ba1b596c9cbbe4712c9b406a42198aeaa8387a293d9","license":"MIT"},"contracts/optimistic-ethereum/OVM/verification/OVM_StateTransitionerFactory.sol":{"content":"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_StateTransitioner } from \\"../../iOVM/verification/iOVM_StateTransitioner.sol\\";\\nimport { iOVM_StateTransitionerFactory } from \\"../../iOVM/verification/iOVM_StateTransitionerFactory.sol\\";\\nimport { iOVM_FraudVerifier } from \\"../../iOVM/verification/iOVM_FraudVerifier.sol\\";\\n\\n/* Contract Imports */\\nimport { OVM_StateTransitioner } from \\"./OVM_StateTransitioner.sol\\";\\n\\n/**\\n * @title OVM_StateTransitionerFactory\\n * @dev The State Transitioner Factory is used by the Fraud Verifier to create a new State\\n * Transitioner during the initialization of a fraud proof.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_StateTransitionerFactory is iOVM_StateTransitionerFactory, Lib_AddressResolver {\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(\\n        address _libAddressManager\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {}\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Creates a new OVM_StateTransitioner\\n     * @param _libAddressManager Address of the Address Manager.\\n     * @param _stateTransitionIndex Index of the state transition being verified.\\n     * @param _preStateRoot State root before the transition was executed.\\n     * @param _transactionHash Hash of the executed transaction.\\n     * @return New OVM_StateTransitioner instance.\\n     */\\n    function create(\\n        address _libAddressManager,\\n        uint256 _stateTransitionIndex,\\n        bytes32 _preStateRoot,\\n        bytes32 _transactionHash\\n    )\\n        override\\n        public\\n        returns (\\n            iOVM_StateTransitioner\\n        )\\n    {\\n        require(\\n            msg.sender == resolve(\\"OVM_FraudVerifier\\"),\\n            \\"Create can only be done by the OVM_FraudVerifier.\\"\\n        );\\n\\n        return new OVM_StateTransitioner(\\n            _libAddressManager,\\n            _stateTransitionIndex,\\n            _preStateRoot,\\n            _transactionHash\\n        );\\n    }\\n}\\n","keccak256":"0x65ef11334a2d6931b6d3a85e7b29c39c774d19443e7040e132a58be505e3b52c","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_ExecutionManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\ninterface iOVM_ExecutionManager {\\n    /**********\\n     * Enums *\\n     *********/\\n\\n    enum RevertFlag {\\n        OUT_OF_GAS,\\n        INTENTIONAL_REVERT,\\n        EXCEEDS_NUISANCE_GAS,\\n        INVALID_STATE_ACCESS,\\n        UNSAFE_BYTECODE,\\n        CREATE_COLLISION,\\n        STATIC_VIOLATION,\\n        CREATOR_NOT_ALLOWED\\n    }\\n\\n    enum GasMetadataKey {\\n        CURRENT_EPOCH_START_TIMESTAMP,\\n        CUMULATIVE_SEQUENCER_QUEUE_GAS,\\n        CUMULATIVE_L1TOL2_QUEUE_GAS,\\n        PREV_EPOCH_SEQUENCER_QUEUE_GAS,\\n        PREV_EPOCH_L1TOL2_QUEUE_GAS\\n    }\\n\\n    enum MessageType {\\n        ovmCALL,\\n        ovmSTATICCALL,\\n        ovmDELEGATECALL,\\n        ovmCREATE,\\n        ovmCREATE2\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct GasMeterConfig {\\n        uint256 minTransactionGasLimit;\\n        uint256 maxTransactionGasLimit;\\n        uint256 maxGasPerQueuePerEpoch;\\n        uint256 secondsPerEpoch;\\n    }\\n\\n    struct GlobalContext {\\n        uint256 ovmCHAINID;\\n    }\\n\\n    struct TransactionContext {\\n        Lib_OVMCodec.QueueOrigin ovmL1QUEUEORIGIN;\\n        uint256 ovmTIMESTAMP;\\n        uint256 ovmNUMBER;\\n        uint256 ovmGASLIMIT;\\n        uint256 ovmTXGASLIMIT;\\n        address ovmL1TXORIGIN;\\n    }\\n\\n    struct TransactionRecord {\\n        uint256 ovmGasRefund;\\n    }\\n\\n    struct MessageContext {\\n        address ovmCALLER;\\n        address ovmADDRESS;\\n        uint256 ovmCALLVALUE;\\n        bool isStatic;\\n    }\\n\\n    struct MessageRecord {\\n        uint256 nuisanceGasLeft;\\n    }\\n\\n\\n    /************************************\\n     * Transaction Execution Entrypoint *\\n     ************************************/\\n\\n    function run(\\n        Lib_OVMCodec.Transaction calldata _transaction,\\n        address _txStateManager\\n    ) external returns (bytes memory);\\n\\n\\n    /*******************\\n     * Context Opcodes *\\n     *******************/\\n\\n    function ovmCALLER() external view returns (address _caller);\\n    function ovmADDRESS() external view returns (address _address);\\n    function ovmCALLVALUE() external view returns (uint _callValue);\\n    function ovmTIMESTAMP() external view returns (uint256 _timestamp);\\n    function ovmNUMBER() external view returns (uint256 _number);\\n    function ovmGASLIMIT() external view returns (uint256 _gasLimit);\\n    function ovmCHAINID() external view returns (uint256 _chainId);\\n\\n\\n    /**********************\\n     * L2 Context Opcodes *\\n     **********************/\\n\\n    function ovmL1QUEUEORIGIN() external view returns (Lib_OVMCodec.QueueOrigin _queueOrigin);\\n    function ovmL1TXORIGIN() external view returns (address _l1TxOrigin);\\n\\n\\n    /*******************\\n     * Halting Opcodes *\\n     *******************/\\n\\n    function ovmREVERT(bytes memory _data) external;\\n\\n\\n    /*****************************\\n     * Contract Creation Opcodes *\\n     *****************************/\\n\\n    function ovmCREATE(bytes memory _bytecode) external returns (address _contract, bytes memory _revertdata);\\n    function ovmCREATE2(bytes memory _bytecode, bytes32 _salt) external returns (address _contract, bytes memory _revertdata);\\n\\n\\n    /*******************************\\n     * Account Abstraction Opcodes *\\n     ******************************/\\n\\n    function ovmGETNONCE() external returns (uint256 _nonce);\\n    function ovmINCREMENTNONCE() external;\\n    function ovmCREATEEOA(bytes32 _messageHash, uint8 _v, bytes32 _r, bytes32 _s) external;\\n\\n\\n    /****************************\\n     * Contract Calling Opcodes *\\n     ****************************/\\n\\n    // Valueless ovmCALL for maintaining backwards compatibility with legacy OVM bytecode.\\n    function ovmCALL(uint256 _gasLimit, address _address, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n    function ovmCALL(uint256 _gasLimit, address _address, uint256 _value, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n    function ovmSTATICCALL(uint256 _gasLimit, address _address, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n    function ovmDELEGATECALL(uint256 _gasLimit, address _address, bytes memory _calldata) external returns (bool _success, bytes memory _returndata);\\n\\n\\n    /****************************\\n     * Contract Storage Opcodes *\\n     ****************************/\\n\\n    function ovmSLOAD(bytes32 _key) external returns (bytes32 _value);\\n    function ovmSSTORE(bytes32 _key, bytes32 _value) external;\\n\\n\\n    /*************************\\n     * Contract Code Opcodes *\\n     *************************/\\n\\n    function ovmEXTCODECOPY(address _contract, uint256 _offset, uint256 _length) external returns (bytes memory _code);\\n    function ovmEXTCODESIZE(address _contract) external returns (uint256 _size);\\n    function ovmEXTCODEHASH(address _contract) external returns (bytes32 _hash);\\n\\n\\n    /*********************\\n     * ETH Value Opcodes *\\n     *********************/\\n\\n    function ovmBALANCE(address _contract) external returns (uint256 _balance);\\n    function ovmSELFBALANCE() external returns (uint256 _balance);\\n\\n\\n    /***************************************\\n     * Public Functions: Execution Context *\\n     ***************************************/\\n\\n    function getMaxTransactionGasLimit() external view returns (uint _maxTransactionGasLimit);\\n}\\n","keccak256":"0x87a056425696719488dbd06adbbf89280d86651e75e1f77d9e96b0632c8634cc","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_StateManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateManager\\n */\\ninterface iOVM_StateManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum ItemState {\\n        ITEM_UNTOUCHED,\\n        ITEM_LOADED,\\n        ITEM_CHANGED,\\n        ITEM_COMMITTED\\n    }\\n\\n    /***************************\\n     * Public Functions: Misc *\\n     ***************************/\\n\\n    function isAuthenticated(address _address) external view returns (bool);\\n\\n    /***************************\\n     * Public Functions: Setup *\\n     ***************************/\\n\\n    function owner() external view returns (address _owner);\\n    function ovmExecutionManager() external view returns (address _ovmExecutionManager);\\n    function setExecutionManager(address _ovmExecutionManager) external;\\n\\n\\n    /************************************\\n     * Public Functions: Account Access *\\n     ************************************/\\n\\n    function putAccount(address _address, Lib_OVMCodec.Account memory _account) external;\\n    function putEmptyAccount(address _address) external;\\n    function getAccount(address _address) external view returns (Lib_OVMCodec.Account memory _account);\\n    function hasAccount(address _address) external view returns (bool _exists);\\n    function hasEmptyAccount(address _address) external view returns (bool _exists);\\n    function setAccountNonce(address _address, uint256 _nonce) external;\\n    function getAccountNonce(address _address) external view returns (uint256 _nonce);\\n    function getAccountEthAddress(address _address) external view returns (address _ethAddress);\\n    function getAccountStorageRoot(address _address) external view returns (bytes32 _storageRoot);\\n    function initPendingAccount(address _address) external;\\n    function commitPendingAccount(address _address, address _ethAddress, bytes32 _codeHash) external;\\n    function testAndSetAccountLoaded(address _address) external returns (bool _wasAccountAlreadyLoaded);\\n    function testAndSetAccountChanged(address _address) external returns (bool _wasAccountAlreadyChanged);\\n    function commitAccount(address _address) external returns (bool _wasAccountCommitted);\\n    function incrementTotalUncommittedAccounts() external;\\n    function getTotalUncommittedAccounts() external view returns (uint256 _total);\\n    function wasAccountChanged(address _address) external view returns (bool);\\n    function wasAccountCommitted(address _address) external view returns (bool);\\n\\n\\n    /************************************\\n     * Public Functions: Storage Access *\\n     ************************************/\\n\\n    function putContractStorage(address _contract, bytes32 _key, bytes32 _value) external;\\n    function getContractStorage(address _contract, bytes32 _key) external view returns (bytes32 _value);\\n    function hasContractStorage(address _contract, bytes32 _key) external view returns (bool _exists);\\n    function testAndSetContractStorageLoaded(address _contract, bytes32 _key) external returns (bool _wasContractStorageAlreadyLoaded);\\n    function testAndSetContractStorageChanged(address _contract, bytes32 _key) external returns (bool _wasContractStorageAlreadyChanged);\\n    function commitContractStorage(address _contract, bytes32 _key) external returns (bool _wasContractStorageCommitted);\\n    function incrementTotalUncommittedContractStorage() external;\\n    function getTotalUncommittedContractStorage() external view returns (uint256 _total);\\n    function wasContractStorageChanged(address _contract, bytes32 _key) external view returns (bool);\\n    function wasContractStorageCommitted(address _contract, bytes32 _key) external view returns (bool);\\n}\\n","keccak256":"0x7a11dbd1f61593ba34debe07e39eef59967307f7f372ba9855bee0953585d08d","license":"MIT"},"contracts/optimistic-ethereum/iOVM/execution/iOVM_StateManagerFactory.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Contract Imports */\\nimport { iOVM_StateManager } from \\"./iOVM_StateManager.sol\\";\\n\\n/**\\n * @title iOVM_StateManagerFactory\\n */\\ninterface iOVM_StateManagerFactory {\\n\\n    /***************************************\\n     * Public Functions: Contract Creation *\\n     ***************************************/\\n\\n    function create(\\n        address _owner\\n    )\\n        external\\n        returns (\\n            iOVM_StateManager _ovmStateManager\\n        );\\n}\\n","keccak256":"0x27a90fc43889d0c7d1db50f37907ef7386d9b415d15a1e91a0a068cba59afd36","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_BondManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\ninterface ERC20 {\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n}\\n\\n/// All the errors which may be encountered on the bond manager\\nlibrary Errors {\\n    string constant ERC20_ERR = \\"BondManager: Could not post bond\\";\\n    string constant ALREADY_FINALIZED = \\"BondManager: Fraud proof for this pre-state root has already been finalized\\";\\n    string constant SLASHED = \\"BondManager: Cannot finalize withdrawal, you probably got slashed\\";\\n    string constant WRONG_STATE = \\"BondManager: Wrong bond state for proposer\\";\\n    string constant CANNOT_CLAIM = \\"BondManager: Cannot claim yet. Dispute must be finalized first\\";\\n\\n    string constant WITHDRAWAL_PENDING = \\"BondManager: Withdrawal already pending\\";\\n    string constant TOO_EARLY = \\"BondManager: Too early to finalize your withdrawal\\";\\n\\n    string constant ONLY_TRANSITIONER = \\"BondManager: Only the transitioner for this pre-state root may call this function\\";\\n    string constant ONLY_FRAUD_VERIFIER = \\"BondManager: Only the fraud verifier may call this function\\";\\n    string constant ONLY_STATE_COMMITMENT_CHAIN = \\"BondManager: Only the state commitment chain may call this function\\";\\n    string constant WAIT_FOR_DISPUTES = \\"BondManager: Wait for other potential disputes\\";\\n}\\n\\n/**\\n * @title iOVM_BondManager\\n */\\ninterface iOVM_BondManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    /// The lifecycle of a proposer\'s bond\\n    enum State {\\n        // Before depositing or after getting slashed, a user is uncollateralized\\n        NOT_COLLATERALIZED,\\n        // After depositing, a user is collateralized\\n        COLLATERALIZED,\\n        // After a user has initiated a withdrawal\\n        WITHDRAWING\\n    }\\n\\n    /// A bond posted by a proposer\\n    struct Bond {\\n        // The user\'s state\\n        State state;\\n        // The timestamp at which a proposer issued their withdrawal request\\n        uint32 withdrawalTimestamp;\\n        // The time when the first disputed was initiated for this bond\\n        uint256 firstDisputeAt;\\n        // The earliest observed state root for this bond which has had fraud\\n        bytes32 earliestDisputedStateRoot;\\n        // The state root\'s timestamp\\n        uint256 earliestTimestamp;\\n    }\\n\\n    // Per pre-state root, store the number of state provisions that were made\\n    // and how many of these calls were made by each user. Payouts will then be\\n    // claimed by users proportionally for that dispute.\\n    struct Rewards {\\n        // Flag to check if rewards for a fraud proof are claimable\\n        bool canClaim;\\n        // Total number of `recordGasSpent` calls made\\n        uint256 total;\\n        // The gas spent by each user to provide witness data. The sum of all\\n        // values inside this map MUST be equal to the value of `total`\\n        mapping(address => uint256) gasSpent;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function recordGasSpent(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash,\\n        address _who,\\n        uint256 _gasSpent\\n    ) external;\\n\\n    function finalize(\\n        bytes32 _preStateRoot,\\n        address _publisher,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function deposit() external;\\n\\n    function startWithdrawal() external;\\n\\n    function finalizeWithdrawal() external;\\n\\n    function claim(\\n        address _who\\n    ) external;\\n\\n    function isCollateralized(\\n        address _who\\n    ) external view returns (bool);\\n\\n    function getGasSpent(\\n        bytes32 _preStateRoot,\\n        address _who\\n    ) external view returns (uint256);\\n}\\n","keccak256":"0x3c2a8a399487857158649db1896749d86e39cba545a8aeb2e2bb0f3bdfa7a5b1","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_FraudVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/* Interface Imports */\\nimport { iOVM_StateTransitioner } from \\"./iOVM_StateTransitioner.sol\\";\\n\\n/**\\n * @title iOVM_FraudVerifier\\n */\\ninterface iOVM_FraudVerifier {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event FraudProofInitialized(\\n        bytes32 _preStateRoot,\\n        uint256 _preStateRootIndex,\\n        bytes32 _transactionHash,\\n        address _who\\n    );\\n\\n    event FraudProofFinalized(\\n        bytes32 _preStateRoot,\\n        uint256 _preStateRootIndex,\\n        bytes32 _transactionHash,\\n        address _who\\n    );\\n\\n\\n    /***************************************\\n     * Public Functions: Transition Status *\\n     ***************************************/\\n\\n    function getStateTransitioner(bytes32 _preStateRoot, bytes32 _txHash) external view returns (iOVM_StateTransitioner _transitioner);\\n\\n\\n    /****************************************\\n     * Public Functions: Fraud Verification *\\n     ****************************************/\\n\\n    function initializeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof,\\n        Lib_OVMCodec.Transaction calldata _transaction,\\n        Lib_OVMCodec.TransactionChainElement calldata _txChainElement,\\n        Lib_OVMCodec.ChainBatchHeader calldata _transactionBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _transactionProof\\n    ) external;\\n\\n    function finalizeFraudVerification(\\n        bytes32 _preStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _preStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _preStateRootProof,\\n        bytes32 _txHash,\\n        bytes32 _postStateRoot,\\n        Lib_OVMCodec.ChainBatchHeader calldata _postStateRootBatchHeader,\\n        Lib_OVMCodec.ChainInclusionProof calldata _postStateRootProof\\n    ) external;\\n}\\n","keccak256":"0x5efd7bb18164bbd3e9d58379e8203fbf2a7ee802b1a48dff3ceaaec1523b1751","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_StateTransitioner.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\"../../libraries/codec/Lib_OVMCodec.sol\\";\\n\\n/**\\n * @title iOVM_StateTransitioner\\n */\\ninterface iOVM_StateTransitioner {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AccountCommitted(\\n        address _address\\n    );\\n\\n    event ContractStorageCommitted(\\n        address _address,\\n        bytes32 _key\\n    );\\n\\n\\n    /**********************************\\n     * Public Functions: State Access *\\n     **********************************/\\n\\n    function getPreStateRoot() external view returns (bytes32 _preStateRoot);\\n    function getPostStateRoot() external view returns (bytes32 _postStateRoot);\\n    function isComplete() external view returns (bool _complete);\\n\\n\\n    /***********************************\\n     * Public Functions: Pre-Execution *\\n     ***********************************/\\n\\n    function proveContractState(\\n        address _ovmContractAddress,\\n        address _ethContractAddress,\\n        bytes calldata _stateTrieWitness\\n    ) external;\\n\\n    function proveStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes calldata _storageTrieWitness\\n    ) external;\\n\\n\\n    /*******************************\\n     * Public Functions: Execution *\\n     *******************************/\\n\\n    function applyTransaction(\\n        Lib_OVMCodec.Transaction calldata _transaction\\n    ) external;\\n\\n\\n    /************************************\\n     * Public Functions: Post-Execution *\\n     ************************************/\\n\\n    function commitContractState(\\n        address _ovmContractAddress,\\n        bytes calldata _stateTrieWitness\\n    ) external;\\n\\n    function commitStorageSlot(\\n        address _ovmContractAddress,\\n        bytes32 _key,\\n        bytes calldata _storageTrieWitness\\n    ) external;\\n\\n\\n    /**********************************\\n     * Public Functions: Finalization *\\n     **********************************/\\n\\n    function completeTransition() external;\\n}\\n","keccak256":"0x3d044ac0a3bb6ad3d529f904b3191117511f9c379678ca03010e1ebdfcb5c34b","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_StateTransitionerFactory.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Contract Imports */\\nimport { iOVM_StateTransitioner } from \\"./iOVM_StateTransitioner.sol\\";\\n\\n/**\\n * @title iOVM_StateTransitionerFactory\\n */\\ninterface iOVM_StateTransitionerFactory {\\n\\n    /***************************************\\n     * Public Functions: Contract Creation *\\n     ***************************************/\\n\\n    function create(\\n        address _proxyManager,\\n        uint256 _stateTransitionIndex,\\n        bytes32 _preStateRoot,\\n        bytes32 _transactionHash\\n    )\\n        external\\n        returns (\\n            iOVM_StateTransitioner _ovmStateTransitioner\\n        );\\n}\\n","keccak256":"0x60a0f0c104e4c0c7863268a93005762e8146d393f9cfddfdd6a2d6585c5911fc","license":"MIT"},"contracts/optimistic-ethereum/libraries/codec/Lib_OVMCodec.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_Bytes32Utils } from \\"../utils/Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct Account {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n        address ethAddress;\\n        bool isFresh;\\n    }\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex;  // QUEUED TX ONLY\\n        uint256 timestamp;   // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData;        // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return abi.encodePacked(\\n            _transaction.timestamp,\\n            _transaction.blockNumber,\\n            _transaction.l1QueueOrigin,\\n            _transaction.l1TxOrigin,\\n            _transaction.entrypoint,\\n            _transaction.gasLimit,\\n            _transaction.data\\n        );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(\\n        Transaction memory _transaction\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * Converts an OVM account to an EVM account.\\n     * @param _in OVM account to convert.\\n     * @return Converted EVM account.\\n     */\\n    function toEVMAccount(\\n        Account memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        return EVMAccount({\\n            nonce: _in.nonce,\\n            balance: _in.balance,\\n            storageRoot: _in.storageRoot,\\n            codeHash: _in.codeHash\\n        });\\n    }\\n\\n    /**\\n     * @notice RLP-encodes an account state struct.\\n     * @param _account Account state struct.\\n     * @return RLP-encoded account state.\\n     */\\n    function encodeEVMAccount(\\n        EVMAccount memory _account\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](4);\\n\\n        // Unfortunately we can\'t create this array outright because\\n        // Lib_RLPWriter.writeList will reject fixed-size arrays. Assigning\\n        // index-by-index circumvents this issue.\\n        raw[0] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.nonce)\\n            )\\n        );\\n        raw[1] = Lib_RLPWriter.writeBytes(\\n            Lib_Bytes32Utils.removeLeadingZeros(\\n                bytes32(_account.balance)\\n            )\\n        );\\n        raw[2] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.storageRoot));\\n        raw[3] = Lib_RLPWriter.writeBytes(abi.encodePacked(_account.codeHash));\\n\\n        return Lib_RLPWriter.writeList(raw);\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(\\n        bytes memory _encoded\\n    )\\n        internal\\n        pure\\n        returns (\\n            EVMAccount memory\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return EVMAccount({\\n            nonce: Lib_RLPReader.readUint256(accountState[0]),\\n            balance: Lib_RLPReader.readUint256(accountState[1]),\\n            storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n            codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n        });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(\\n            abi.encode(\\n                _batchHeader.batchRoot,\\n                _batchHeader.batchSize,\\n                _batchHeader.prevTotalElements,\\n                _batchHeader.extraData\\n            )\\n        );\\n    }\\n}\\n","keccak256":"0xd85ba2066057a2677926f484b938c7c2ef33ff3853f3b71cda252f4a54f30e05","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPReader.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\"RLPReader\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 constant internal MAX_LIST_LENGTH = 32;\\n\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem memory\\n        )\\n    {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({\\n            length: _in.length,\\n            ptr: ptr\\n        });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        (\\n            uint256 listOffset,\\n            ,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.LIST_ITEM,\\n            \\"Invalid RLP list value.\\"\\n        );\\n\\n        // Solidity in-memory arrays can\'t be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can\'t know the number of RLP items without looping over\\n        // the entire input, we\'d have to loop twice to accurately size this array. It\'s easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(\\n                itemCount < MAX_LIST_LENGTH,\\n                \\"Provided RLP list exceeds max list length.\\"\\n            );\\n\\n            (\\n                uint256 itemOffset,\\n                uint256 itemLength,\\n            ) = _decodeLength(RLPItem({\\n                length: _in.length - offset,\\n                ptr: _in.ptr + offset\\n            }));\\n\\n            out[itemCount] = RLPItem({\\n                length: itemLength + itemOffset,\\n                ptr: _in.ptr + offset\\n            });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            RLPItem[] memory\\n        )\\n    {\\n        return readList(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes value.\\"\\n        );\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return readBytes(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory\\n        )\\n    {\\n        return readString(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        require(\\n            _in.length <= 33,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        (\\n            uint256 itemOffset,\\n            uint256 itemLength,\\n            RLPItemType itemType\\n        ) = _decodeLength(_in);\\n\\n        require(\\n            itemType == RLPItemType.DATA_ITEM,\\n            \\"Invalid RLP bytes32 value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return readBytes32(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return readUint256(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        require(\\n            _in.length == 1,\\n            \\"Invalid RLP boolean value.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(\\n            out == 0 || out == 1,\\n            \\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\"\\n        );\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return readBool(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(\\n            _in.length == 21,\\n            \\"Invalid RLP address value.\\"\\n        );\\n\\n        return address(readUint256(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return readAddress(\\n            toRLPItem(_in)\\n        );\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(\\n        RLPItem memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(\\n            _in.length > 0,\\n            \\"RLP item cannot be null.\\"\\n        );\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(\\n                _in.length > strLen,\\n                \\"Invalid RLP short string.\\"\\n            );\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(\\n                _in.length > lenOfStrLen,\\n                \\"Invalid RLP long string length.\\"\\n            );\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfStrLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfStrLen + strLen,\\n                \\"Invalid RLP long string.\\"\\n            );\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(\\n                _in.length > listLen,\\n                \\"Invalid RLP short list.\\"\\n            );\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(\\n                _in.length > lenOfListLen,\\n                \\"Invalid RLP long list length.\\"\\n            );\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(\\n                    mload(add(ptr, 1)),\\n                    exp(256, sub(32, lenOfListLen))\\n                )\\n            }\\n\\n            require(\\n                _in.length > lenOfListLen + listLen,\\n                \\"Invalid RLP long list.\\"\\n            );\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask = 256 ** (32 - (_length % 32)) - 1;\\n        assembly {\\n            mstore(\\n                dest,\\n                or(\\n                    and(mload(src), not(mask)),\\n                    and(mload(dest), mask)\\n                )\\n            )\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        RLPItem memory _in\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n","keccak256":"0x829174c61216dce35fdb888383b6022e0365eb7fbdc71ad79d98b108091969fe","license":"MIT"},"contracts/optimistic-ethereum/libraries/rlp/Lib_RLPWriter.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(\\n        bytes memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(\\n        bytes[] memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(\\n        string memory _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bytes32 value.\\n     * @param _in The bytes32 to encode.\\n     * @return _out The RLP encoded bytes32 in bytes.\\n     */\\n    function writeBytes32(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory _out\\n        )\\n    {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(\\n        uint256 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(\\n        uint256 _len,\\n        uint256 _offset\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = byte(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = byte(uint8(lenLen) + uint8(_offset) + 55);\\n            for(i = 1; i <= lenLen; i++) {\\n                encoded[i] = byte(uint8((_len / (256**(lenLen-i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(\\n        uint256 _x\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    )\\n        private\\n        pure\\n    {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(\\n        bytes[] memory _list\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n","keccak256":"0xb60ee4b03ad372c3deff21d454ab714dd0c18ee3e6f9d45532e209fc59d5a54d","license":"MIT"},"contracts/optimistic-ethereum/libraries/trie/Lib_MerkleTrie.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_BytesUtils } from \\"../utils/Lib_BytesUtils.sol\\";\\nimport { Lib_RLPReader } from \\"../rlp/Lib_RLPReader.sol\\";\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\n\\n/**\\n * @title Lib_MerkleTrie\\n */\\nlibrary Lib_MerkleTrie {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    enum NodeType {\\n        BranchNode,\\n        ExtensionNode,\\n        LeafNode\\n    }\\n\\n    struct TrieNode {\\n        bytes encoded;\\n        Lib_RLPReader.RLPItem[] decoded;\\n    }\\n\\n\\n    /**********************\\n     * Contract Constants *\\n     **********************/\\n\\n    // TREE_RADIX determines the number of elements per branch node.\\n    uint256 constant TREE_RADIX = 16;\\n    // Branch nodes have TREE_RADIX elements plus an additional `value` slot.\\n    uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;\\n    // Leaf nodes and extension nodes always have two elements, a `path` and a `value`.\\n    uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;\\n\\n    // Prefixes are prepended to the `path` within a leaf or extension node and\\n    // allow us to differentiate between the two node types. `ODD` or `EVEN` is\\n    // determined by the number of nibbles within the unprefixed `path`. If the\\n    // number of nibbles if even, we need to insert an extra padding nibble so\\n    // the resulting prefixed `path` has an even number of nibbles.\\n    uint8 constant PREFIX_EXTENSION_EVEN = 0;\\n    uint8 constant PREFIX_EXTENSION_ODD = 1;\\n    uint8 constant PREFIX_LEAF_EVEN = 2;\\n    uint8 constant PREFIX_LEAF_ODD = 3;\\n\\n    // Just a utility constant. RLP represents `NULL` as 0x80.\\n    bytes1 constant RLP_NULL = bytes1(0x80);\\n    bytes constant RLP_NULL_BYTES = hex\'80\';\\n    bytes32 constant internal KECCAK256_RLP_NULL_BYTES = keccak256(RLP_NULL_BYTES);\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Verifies a proof that a given key/value pair is present in the\\n     * Merkle trie.\\n     * @param _key Key of the node to search for, as a hex string.\\n     * @param _value Value of the node to search for, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n     * traditional Merkle trees, this proof is executed top-down and consists\\n     * of a list of RLP-encoded nodes that make a path down to the target node.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n     */\\n    function verifyInclusionProof(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _verified\\n        )\\n    {\\n        (\\n            bool exists,\\n            bytes memory value\\n        ) = get(_key, _proof, _root);\\n\\n        return (\\n            exists && Lib_BytesUtils.equal(_value, value)\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates a Merkle trie and returns a new root hash.\\n     * @param _key Key of the node to update, as a hex string.\\n     * @param _value Value of the node to update, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the node *nearest* the\\n     * target node. If the key exists, we can simply update the value.\\n     * Otherwise, we need to modify the trie to handle the new k/v pair.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _updatedRoot Root hash of the newly constructed trie.\\n     */\\n    function update(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        // Special case when inserting the very first node.\\n        if (_root == KECCAK256_RLP_NULL_BYTES) {\\n            return getSingleNodeRootHash(_key, _value);\\n        }\\n\\n        TrieNode[] memory proof = _parseProof(_proof);\\n        (uint256 pathLength, bytes memory keyRemainder, ) = _walkNodePath(proof, _key, _root);\\n        TrieNode[] memory newPath = _getNewPath(proof, pathLength, _key, keyRemainder, _value);\\n\\n        return _getUpdatedTrieRoot(newPath, _key);\\n    }\\n\\n    /**\\n     * @notice Retrieves the value associated with a given key.\\n     * @param _key Key to search for, as hex bytes.\\n     * @param _proof Merkle trie inclusion proof for the key.\\n     * @param _root Known root of the Merkle trie.\\n     * @return _exists Whether or not the key exists.\\n     * @return _value Value of the key if it exists.\\n     */\\n    function get(\\n        bytes memory _key,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _exists,\\n            bytes memory _value\\n        )\\n    {\\n        TrieNode[] memory proof = _parseProof(_proof);\\n        (uint256 pathLength, bytes memory keyRemainder, bool isFinalNode) = _walkNodePath(proof, _key, _root);\\n\\n        bool exists = keyRemainder.length == 0;\\n\\n        require(\\n            exists || isFinalNode,\\n            \\"Provided proof is invalid.\\"\\n        );\\n\\n        bytes memory value = exists ? _getNodeValue(proof[pathLength - 1]) : bytes(\'\');\\n\\n        return (\\n            exists,\\n            value\\n        );\\n    }\\n\\n    /**\\n     * Computes the root hash for a trie with a single node.\\n     * @param _key Key for the single node.\\n     * @param _value Value for the single node.\\n     * @return _updatedRoot Hash of the trie.\\n     */\\n    function getSingleNodeRootHash(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        return keccak256(_makeLeafNode(\\n            Lib_BytesUtils.toNibbles(_key),\\n            _value\\n        ).encoded);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * @notice Walks through a proof using a provided key.\\n     * @param _proof Inclusion proof to walk through.\\n     * @param _key Key to use for the walk.\\n     * @param _root Known root of the trie.\\n     * @return _pathLength Length of the final path\\n     * @return _keyRemainder Portion of the key remaining after the walk.\\n     * @return _isFinalNode Whether or not we\'ve hit a dead end.\\n     */\\n    function _walkNodePath(\\n        TrieNode[] memory _proof,\\n        bytes memory _key,\\n        bytes32 _root\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 _pathLength,\\n            bytes memory _keyRemainder,\\n            bool _isFinalNode\\n        )\\n    {\\n        uint256 pathLength = 0;\\n        bytes memory key = Lib_BytesUtils.toNibbles(_key);\\n\\n        bytes32 currentNodeID = _root;\\n        uint256 currentKeyIndex = 0;\\n        uint256 currentKeyIncrement = 0;\\n        TrieNode memory currentNode;\\n\\n        // Proof is top-down, so we start at the first element (root).\\n        for (uint256 i = 0; i < _proof.length; i++) {\\n            currentNode = _proof[i];\\n            currentKeyIndex += currentKeyIncrement;\\n\\n            // Keep track of the proof elements we actually need.\\n            // It\'s expensive to resize arrays, so this simply reduces gas costs.\\n            pathLength += 1;\\n\\n            if (currentKeyIndex == 0) {\\n                // First proof element is always the root node.\\n                require(\\n                    keccak256(currentNode.encoded) == currentNodeID,\\n                    \\"Invalid root hash\\"\\n                );\\n            } else if (currentNode.encoded.length >= 32) {\\n                // Nodes 32 bytes or larger are hashed inside branch nodes.\\n                require(\\n                    keccak256(currentNode.encoded) == currentNodeID,\\n                    \\"Invalid large internal hash\\"\\n                );\\n            } else {\\n                // Nodes smaller than 31 bytes aren\'t hashed.\\n                require(\\n                    Lib_BytesUtils.toBytes32(currentNode.encoded) == currentNodeID,\\n                    \\"Invalid internal node hash\\"\\n                );\\n            }\\n\\n            if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {\\n                if (currentKeyIndex == key.length) {\\n                    // We\'ve hit the end of the key, meaning the value should be within this branch node.\\n                    break;\\n                } else {\\n                    // We\'re not at the end of the key yet.\\n                    // Figure out what the next node ID should be and continue.\\n                    uint8 branchKey = uint8(key[currentKeyIndex]);\\n                    Lib_RLPReader.RLPItem memory nextNode = currentNode.decoded[branchKey];\\n                    currentNodeID = _getNodeID(nextNode);\\n                    currentKeyIncrement = 1;\\n                    continue;\\n                }\\n            } else if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {\\n                bytes memory path = _getNodePath(currentNode);\\n                uint8 prefix = uint8(path[0]);\\n                uint8 offset = 2 - prefix % 2;\\n                bytes memory pathRemainder = Lib_BytesUtils.slice(path, offset);\\n                bytes memory keyRemainder = Lib_BytesUtils.slice(key, currentKeyIndex);\\n                uint256 sharedNibbleLength = _getSharedNibbleLength(pathRemainder, keyRemainder);\\n\\n                if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {\\n                    if (\\n                        pathRemainder.length == sharedNibbleLength &&\\n                        keyRemainder.length == sharedNibbleLength\\n                    ) {\\n                        // The key within this leaf matches our key exactly.\\n                        // Increment the key index to reflect that we have no remainder.\\n                        currentKeyIndex += sharedNibbleLength;\\n                    }\\n\\n                    // We\'ve hit a leaf node, so our next node should be NULL.\\n                    currentNodeID = bytes32(RLP_NULL);\\n                    break;\\n                } else if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {\\n                    if (sharedNibbleLength != pathRemainder.length) {\\n                        // Our extension node is not identical to the remainder.\\n                        // We\'ve hit the end of this path, updates will need to modify this extension.\\n                        currentNodeID = bytes32(RLP_NULL);\\n                        break;\\n                    } else {\\n                        // Our extension shares some nibbles.\\n                        // Carry on to the next node.\\n                        currentNodeID = _getNodeID(currentNode.decoded[1]);\\n                        currentKeyIncrement = sharedNibbleLength;\\n                        continue;\\n                    }\\n                } else {\\n                    revert(\\"Received a node with an unknown prefix\\");\\n                }\\n            } else {\\n                revert(\\"Received an unparseable node.\\");\\n            }\\n        }\\n\\n        // If our node ID is NULL, then we\'re at a dead end.\\n        bool isFinalNode = currentNodeID == bytes32(RLP_NULL);\\n        return (pathLength, Lib_BytesUtils.slice(key, currentKeyIndex), isFinalNode);\\n    }\\n\\n    /**\\n     * @notice Creates new nodes to support a k/v pair insertion into a given Merkle trie path.\\n     * @param _path Path to the node nearest the k/v pair.\\n     * @param _pathLength Length of the path. Necessary because the provided path may include\\n     *  additional nodes (e.g., it comes directly from a proof) and we can\'t resize in-memory\\n     *  arrays without costly duplication.\\n     * @param _key Full original key.\\n     * @param _keyRemainder Portion of the initial key that must be inserted into the trie.\\n     * @param _value Value to insert at the given key.\\n     * @return _newPath A new path with the inserted k/v pair and extra supporting nodes.\\n     */\\n    function _getNewPath(\\n        TrieNode[] memory _path,\\n        uint256 _pathLength,\\n        bytes memory _key,\\n        bytes memory _keyRemainder,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode[] memory _newPath\\n        )\\n    {\\n        bytes memory keyRemainder = _keyRemainder;\\n\\n        // Most of our logic depends on the status of the last node in the path.\\n        TrieNode memory lastNode = _path[_pathLength - 1];\\n        NodeType lastNodeType = _getNodeType(lastNode);\\n\\n        // Create an array for newly created nodes.\\n        // We need up to three new nodes, depending on the contents of the last node.\\n        // Since array resizing is expensive, we\'ll keep track of the size manually.\\n        // We\'re using an explicit `totalNewNodes += 1` after insertions for clarity.\\n        TrieNode[] memory newNodes = new TrieNode[](3);\\n        uint256 totalNewNodes = 0;\\n\\n        // Reference: https://github.com/ethereumjs/merkle-patricia-tree/blob/c0a10395aab37d42c175a47114ebfcbd7efcf059/src/baseTrie.ts#L294-L313\\n        bool matchLeaf = false;\\n        if (lastNodeType == NodeType.LeafNode) {\\n            uint256 l = 0;\\n            if (_path.length > 0) {\\n                for (uint256 i = 0; i < _path.length - 1; i++) {\\n                    if (_getNodeType(_path[i]) == NodeType.BranchNode) {\\n                        l++;\\n                    } else {\\n                        l += _getNodeKey(_path[i]).length;\\n                    }\\n                }\\n            }\\n\\n            if (\\n                _getSharedNibbleLength(\\n                    _getNodeKey(lastNode),\\n                    Lib_BytesUtils.slice(Lib_BytesUtils.toNibbles(_key), l)\\n                ) == _getNodeKey(lastNode).length\\n                && keyRemainder.length == 0\\n            ) {\\n                matchLeaf = true;\\n            }\\n        }\\n\\n        if (matchLeaf) {\\n            // We\'ve found a leaf node with the given key.\\n            // Simply need to update the value of the node to match.\\n            newNodes[totalNewNodes] = _makeLeafNode(_getNodeKey(lastNode), _value);\\n            totalNewNodes += 1;\\n        } else if (lastNodeType == NodeType.BranchNode) {\\n            if (keyRemainder.length == 0) {\\n                // We\'ve found a branch node with the given key.\\n                // Simply need to update the value of the node to match.\\n                newNodes[totalNewNodes] = _editBranchValue(lastNode, _value);\\n                totalNewNodes += 1;\\n            } else {\\n                // We\'ve found a branch node, but it doesn\'t contain our key.\\n                // Reinsert the old branch for now.\\n                newNodes[totalNewNodes] = lastNode;\\n                totalNewNodes += 1;\\n                // Create a new leaf node, slicing our remainder since the first byte points\\n                // to our branch node.\\n                newNodes[totalNewNodes] = _makeLeafNode(Lib_BytesUtils.slice(keyRemainder, 1), _value);\\n                totalNewNodes += 1;\\n            }\\n        } else {\\n            // Our last node is either an extension node or a leaf node with a different key.\\n            bytes memory lastNodeKey = _getNodeKey(lastNode);\\n            uint256 sharedNibbleLength = _getSharedNibbleLength(lastNodeKey, keyRemainder);\\n\\n            if (sharedNibbleLength != 0) {\\n                // We\'ve got some shared nibbles between the last node and our key remainder.\\n                // We\'ll need to insert an extension node that covers these shared nibbles.\\n                bytes memory nextNodeKey = Lib_BytesUtils.slice(lastNodeKey, 0, sharedNibbleLength);\\n                newNodes[totalNewNodes] = _makeExtensionNode(nextNodeKey, _getNodeHash(_value));\\n                totalNewNodes += 1;\\n\\n                // Cut down the keys since we\'ve just covered these shared nibbles.\\n                lastNodeKey = Lib_BytesUtils.slice(lastNodeKey, sharedNibbleLength);\\n                keyRemainder = Lib_BytesUtils.slice(keyRemainder, sharedNibbleLength);\\n            }\\n\\n            // Create an empty branch to fill in.\\n            TrieNode memory newBranch = _makeEmptyBranchNode();\\n\\n            if (lastNodeKey.length == 0) {\\n                // Key remainder was larger than the key for our last node.\\n                // The value within our last node is therefore going to be shifted into\\n                // a branch value slot.\\n                newBranch = _editBranchValue(newBranch, _getNodeValue(lastNode));\\n            } else {\\n                // Last node key was larger than the key remainder.\\n                // We\'re going to modify some index of our branch.\\n                uint8 branchKey = uint8(lastNodeKey[0]);\\n                // Move on to the next nibble.\\n                lastNodeKey = Lib_BytesUtils.slice(lastNodeKey, 1);\\n\\n                if (lastNodeType == NodeType.LeafNode) {\\n                    // We\'re dealing with a leaf node.\\n                    // We\'ll modify the key and insert the old leaf node into the branch index.\\n                    TrieNode memory modifiedLastNode = _makeLeafNode(lastNodeKey, _getNodeValue(lastNode));\\n                    newBranch = _editBranchIndex(newBranch, branchKey, _getNodeHash(modifiedLastNode.encoded));\\n                } else if (lastNodeKey.length != 0) {\\n                    // We\'re dealing with a shrinking extension node.\\n                    // We need to modify the node to decrease the size of the key.\\n                    TrieNode memory modifiedLastNode = _makeExtensionNode(lastNodeKey, _getNodeValue(lastNode));\\n                    newBranch = _editBranchIndex(newBranch, branchKey, _getNodeHash(modifiedLastNode.encoded));\\n                } else {\\n                    // We\'re dealing with an unnecessary extension node.\\n                    // We\'re going to delete the node entirely.\\n                    // Simply insert its current value into the branch index.\\n                    newBranch = _editBranchIndex(newBranch, branchKey, _getNodeValue(lastNode));\\n                }\\n            }\\n\\n            if (keyRemainder.length == 0) {\\n                // We\'ve got nothing left in the key remainder.\\n                // Simply insert the value into the branch value slot.\\n                newBranch = _editBranchValue(newBranch, _value);\\n                // Push the branch into the list of new nodes.\\n                newNodes[totalNewNodes] = newBranch;\\n                totalNewNodes += 1;\\n            } else {\\n                // We\'ve got some key remainder to work with.\\n                // We\'ll be inserting a leaf node into the trie.\\n                // First, move on to the next nibble.\\n                keyRemainder = Lib_BytesUtils.slice(keyRemainder, 1);\\n                // Push the branch into the list of new nodes.\\n                newNodes[totalNewNodes] = newBranch;\\n                totalNewNodes += 1;\\n                // Push a new leaf node for our k/v pair.\\n                newNodes[totalNewNodes] = _makeLeafNode(keyRemainder, _value);\\n                totalNewNodes += 1;\\n            }\\n        }\\n\\n        // Finally, join the old path with our newly created nodes.\\n        // Since we\'re overwriting the last node in the path, we use `_pathLength - 1`.\\n        return _joinNodeArrays(_path, _pathLength - 1, newNodes, totalNewNodes);\\n    }\\n\\n    /**\\n     * @notice Computes the trie root from a given path.\\n     * @param _nodes Path to some k/v pair.\\n     * @param _key Key for the k/v pair.\\n     * @return _updatedRoot Root hash for the updated trie.\\n     */\\n    function _getUpdatedTrieRoot(\\n        TrieNode[] memory _nodes,\\n        bytes memory _key\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        bytes memory key = Lib_BytesUtils.toNibbles(_key);\\n\\n        // Some variables to keep track of during iteration.\\n        TrieNode memory currentNode;\\n        NodeType currentNodeType;\\n        bytes memory previousNodeHash;\\n\\n        // Run through the path backwards to rebuild our root hash.\\n        for (uint256 i = _nodes.length; i > 0; i--) {\\n            // Pick out the current node.\\n            currentNode = _nodes[i - 1];\\n            currentNodeType = _getNodeType(currentNode);\\n\\n            if (currentNodeType == NodeType.LeafNode) {\\n                // Leaf nodes are already correctly encoded.\\n                // Shift the key over to account for the nodes key.\\n                bytes memory nodeKey = _getNodeKey(currentNode);\\n                key = Lib_BytesUtils.slice(key, 0, key.length - nodeKey.length);\\n            } else if (currentNodeType == NodeType.ExtensionNode) {\\n                // Shift the key over to account for the nodes key.\\n                bytes memory nodeKey = _getNodeKey(currentNode);\\n                key = Lib_BytesUtils.slice(key, 0, key.length - nodeKey.length);\\n\\n                // If this node is the last element in the path, it\'ll be correctly encoded\\n                // and we can skip this part.\\n                if (previousNodeHash.length > 0) {\\n                    // Re-encode the node based on the previous node.\\n                    currentNode = _editExtensionNodeValue(currentNode, previousNodeHash);\\n                }\\n            } else if (currentNodeType == NodeType.BranchNode) {\\n                // If this node is the last element in the path, it\'ll be correctly encoded\\n                // and we can skip this part.\\n                if (previousNodeHash.length > 0) {\\n                    // Re-encode the node based on the previous node.\\n                    uint8 branchKey = uint8(key[key.length - 1]);\\n                    key = Lib_BytesUtils.slice(key, 0, key.length - 1);\\n                    currentNode = _editBranchIndex(currentNode, branchKey, previousNodeHash);\\n                }\\n            }\\n\\n            // Compute the node hash for the next iteration.\\n            previousNodeHash = _getNodeHash(currentNode.encoded);\\n        }\\n\\n        // Current node should be the root at this point.\\n        // Simply return the hash of its encoding.\\n        return keccak256(currentNode.encoded);\\n    }\\n\\n    /**\\n     * @notice Parses an RLP-encoded proof into something more useful.\\n     * @param _proof RLP-encoded proof to parse.\\n     * @return _parsed Proof parsed into easily accessible structs.\\n     */\\n    function _parseProof(\\n        bytes memory _proof\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode[] memory _parsed\\n        )\\n    {\\n        Lib_RLPReader.RLPItem[] memory nodes = Lib_RLPReader.readList(_proof);\\n        TrieNode[] memory proof = new TrieNode[](nodes.length);\\n\\n        for (uint256 i = 0; i < nodes.length; i++) {\\n            bytes memory encoded = Lib_RLPReader.readBytes(nodes[i]);\\n            proof[i] = TrieNode({\\n                encoded: encoded,\\n                decoded: Lib_RLPReader.readList(encoded)\\n            });\\n        }\\n\\n        return proof;\\n    }\\n\\n    /**\\n     * @notice Picks out the ID for a node. Node ID is referred to as the\\n     * \\"hash\\" within the specification, but nodes < 32 bytes are not actually\\n     * hashed.\\n     * @param _node Node to pull an ID for.\\n     * @return _nodeID ID for the node, depending on the size of its contents.\\n     */\\n    function _getNodeID(\\n        Lib_RLPReader.RLPItem memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes32 _nodeID\\n        )\\n    {\\n        bytes memory nodeID;\\n\\n        if (_node.length < 32) {\\n            // Nodes smaller than 32 bytes are RLP encoded.\\n            nodeID = Lib_RLPReader.readRawBytes(_node);\\n        } else {\\n            // Nodes 32 bytes or larger are hashed.\\n            nodeID = Lib_RLPReader.readBytes(_node);\\n        }\\n\\n        return Lib_BytesUtils.toBytes32(nodeID);\\n    }\\n\\n    /**\\n     * @notice Gets the path for a leaf or extension node.\\n     * @param _node Node to get a path for.\\n     * @return _path Node path, converted to an array of nibbles.\\n     */\\n    function _getNodePath(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _path\\n        )\\n    {\\n        return Lib_BytesUtils.toNibbles(Lib_RLPReader.readBytes(_node.decoded[0]));\\n    }\\n\\n    /**\\n     * @notice Gets the key for a leaf or extension node. Keys are essentially\\n     * just paths without any prefix.\\n     * @param _node Node to get a key for.\\n     * @return _key Node key, converted to an array of nibbles.\\n     */\\n    function _getNodeKey(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _key\\n        )\\n    {\\n        return _removeHexPrefix(_getNodePath(_node));\\n    }\\n\\n    /**\\n     * @notice Gets the path for a node.\\n     * @param _node Node to get a value for.\\n     * @return _value Node value, as hex bytes.\\n     */\\n    function _getNodeValue(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _value\\n        )\\n    {\\n        return Lib_RLPReader.readBytes(_node.decoded[_node.decoded.length - 1]);\\n    }\\n\\n    /**\\n     * @notice Computes the node hash for an encoded node. Nodes < 32 bytes\\n     * are not hashed, all others are keccak256 hashed.\\n     * @param _encoded Encoded node to hash.\\n     * @return _hash Hash of the encoded node. Simply the input if < 32 bytes.\\n     */\\n    function _getNodeHash(\\n        bytes memory _encoded\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _hash\\n        )\\n    {\\n        if (_encoded.length < 32) {\\n            return _encoded;\\n        } else {\\n            return abi.encodePacked(keccak256(_encoded));\\n        }\\n    }\\n\\n    /**\\n     * @notice Determines the type for a given node.\\n     * @param _node Node to determine a type for.\\n     * @return _type Type of the node; BranchNode/ExtensionNode/LeafNode.\\n     */\\n    function _getNodeType(\\n        TrieNode memory _node\\n    )\\n        private\\n        pure\\n        returns (\\n            NodeType _type\\n        )\\n    {\\n        if (_node.decoded.length == BRANCH_NODE_LENGTH) {\\n            return NodeType.BranchNode;\\n        } else if (_node.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {\\n            bytes memory path = _getNodePath(_node);\\n            uint8 prefix = uint8(path[0]);\\n\\n            if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {\\n                return NodeType.LeafNode;\\n            } else if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {\\n                return NodeType.ExtensionNode;\\n            }\\n        }\\n\\n        revert(\\"Invalid node type\\");\\n    }\\n\\n    /**\\n     * @notice Utility; determines the number of nibbles shared between two\\n     * nibble arrays.\\n     * @param _a First nibble array.\\n     * @param _b Second nibble array.\\n     * @return _shared Number of shared nibbles.\\n     */\\n    function _getSharedNibbleLength(\\n        bytes memory _a,\\n        bytes memory _b\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256 _shared\\n        )\\n    {\\n        uint256 i = 0;\\n        while (_a.length > i && _b.length > i && _a[i] == _b[i]) {\\n            i++;\\n        }\\n        return i;\\n    }\\n\\n    /**\\n     * @notice Utility; converts an RLP-encoded node into our nice struct.\\n     * @param _raw RLP-encoded node to convert.\\n     * @return _node Node as a TrieNode struct.\\n     */\\n    function _makeNode(\\n        bytes[] memory _raw\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes memory encoded = Lib_RLPWriter.writeList(_raw);\\n\\n        return TrieNode({\\n            encoded: encoded,\\n            decoded: Lib_RLPReader.readList(encoded)\\n        });\\n    }\\n\\n    /**\\n     * @notice Utility; converts an RLP-decoded node into our nice struct.\\n     * @param _items RLP-decoded node to convert.\\n     * @return _node Node as a TrieNode struct.\\n     */\\n    function _makeNode(\\n        Lib_RLPReader.RLPItem[] memory _items\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](_items.length);\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            raw[i] = Lib_RLPReader.readRawBytes(_items[i]);\\n        }\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Creates a new extension node.\\n     * @param _key Key for the extension node, unprefixed.\\n     * @param _value Value for the extension node.\\n     * @return _node New extension node with the given k/v pair.\\n     */\\n    function _makeExtensionNode(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](2);\\n        bytes memory key = _addHexPrefix(_key, false);\\n        raw[0] = Lib_RLPWriter.writeBytes(Lib_BytesUtils.fromNibbles(key));\\n        raw[1] = Lib_RLPWriter.writeBytes(_value);\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * Creates a new extension node with the same key but a different value.\\n     * @param _node Extension node to copy and modify.\\n     * @param _value New value for the extension node.\\n     * @return New node with the same key and different value.\\n     */\\n    function _editExtensionNodeValue(\\n        TrieNode memory _node,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](2);\\n        bytes memory key = _addHexPrefix(_getNodeKey(_node), false);\\n        raw[0] = Lib_RLPWriter.writeBytes(Lib_BytesUtils.fromNibbles(key));\\n        if (_value.length < 32) {\\n            raw[1] = _value;\\n        } else {\\n            raw[1] = Lib_RLPWriter.writeBytes(_value);\\n        }\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Creates a new leaf node.\\n     * @dev This function is essentially identical to `_makeExtensionNode`.\\n     * Although we could route both to a single method with a flag, it\'s\\n     * more gas efficient to keep them separate and duplicate the logic.\\n     * @param _key Key for the leaf node, unprefixed.\\n     * @param _value Value for the leaf node.\\n     * @return _node New leaf node with the given k/v pair.\\n     */\\n    function _makeLeafNode(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](2);\\n        bytes memory key = _addHexPrefix(_key, true);\\n        raw[0] = Lib_RLPWriter.writeBytes(Lib_BytesUtils.fromNibbles(key));\\n        raw[1] = Lib_RLPWriter.writeBytes(_value);\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Creates an empty branch node.\\n     * @return _node Empty branch node as a TrieNode struct.\\n     */\\n    function _makeEmptyBranchNode()\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _node\\n        )\\n    {\\n        bytes[] memory raw = new bytes[](BRANCH_NODE_LENGTH);\\n        for (uint256 i = 0; i < raw.length; i++) {\\n            raw[i] = RLP_NULL_BYTES;\\n        }\\n        return _makeNode(raw);\\n    }\\n\\n    /**\\n     * @notice Modifies the value slot for a given branch.\\n     * @param _branch Branch node to modify.\\n     * @param _value Value to insert into the branch.\\n     * @return _updatedNode Modified branch node.\\n     */\\n    function _editBranchValue(\\n        TrieNode memory _branch,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _updatedNode\\n        )\\n    {\\n        bytes memory encoded = Lib_RLPWriter.writeBytes(_value);\\n        _branch.decoded[_branch.decoded.length - 1] = Lib_RLPReader.toRLPItem(encoded);\\n        return _makeNode(_branch.decoded);\\n    }\\n\\n    /**\\n     * @notice Modifies a slot at an index for a given branch.\\n     * @param _branch Branch node to modify.\\n     * @param _index Slot index to modify.\\n     * @param _value Value to insert into the slot.\\n     * @return _updatedNode Modified branch node.\\n     */\\n    function _editBranchIndex(\\n        TrieNode memory _branch,\\n        uint8 _index,\\n        bytes memory _value\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode memory _updatedNode\\n        )\\n    {\\n        bytes memory encoded = _value.length < 32 ? _value : Lib_RLPWriter.writeBytes(_value);\\n        _branch.decoded[_index] = Lib_RLPReader.toRLPItem(encoded);\\n        return _makeNode(_branch.decoded);\\n    }\\n\\n    /**\\n     * @notice Utility; adds a prefix to a key.\\n     * @param _key Key to prefix.\\n     * @param _isLeaf Whether or not the key belongs to a leaf.\\n     * @return _prefixedKey Prefixed key.\\n     */\\n    function _addHexPrefix(\\n        bytes memory _key,\\n        bool _isLeaf\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _prefixedKey\\n        )\\n    {\\n        uint8 prefix = _isLeaf ? uint8(0x02) : uint8(0x00);\\n        uint8 offset = uint8(_key.length % 2);\\n        bytes memory prefixed = new bytes(2 - offset);\\n        prefixed[0] = bytes1(prefix + offset);\\n        return abi.encodePacked(prefixed, _key);\\n    }\\n\\n    /**\\n     * @notice Utility; removes a prefix from a path.\\n     * @param _path Path to remove the prefix from.\\n     * @return _unprefixedKey Unprefixed key.\\n     */\\n    function _removeHexPrefix(\\n        bytes memory _path\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _unprefixedKey\\n        )\\n    {\\n        if (uint8(_path[0]) % 2 == 0) {\\n            return Lib_BytesUtils.slice(_path, 2);\\n        } else {\\n            return Lib_BytesUtils.slice(_path, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Utility; combines two node arrays. Array lengths are required\\n     * because the actual lengths may be longer than the filled lengths.\\n     * Array resizing is extremely costly and should be avoided.\\n     * @param _a First array to join.\\n     * @param _aLength Length of the first array.\\n     * @param _b Second array to join.\\n     * @param _bLength Length of the second array.\\n     * @return _joined Combined node array.\\n     */\\n    function _joinNodeArrays(\\n        TrieNode[] memory _a,\\n        uint256 _aLength,\\n        TrieNode[] memory _b,\\n        uint256 _bLength\\n    )\\n        private\\n        pure\\n        returns (\\n            TrieNode[] memory _joined\\n        )\\n    {\\n        TrieNode[] memory ret = new TrieNode[](_aLength + _bLength);\\n\\n        // Copy elements from the first array.\\n        for (uint256 i = 0; i < _aLength; i++) {\\n            ret[i] = _a[i];\\n        }\\n\\n        // Copy elements from the second array.\\n        for (uint256 i = 0; i < _bLength; i++) {\\n            ret[i + _aLength] = _b[i];\\n        }\\n\\n        return ret;\\n    }\\n}\\n","keccak256":"0x4bb09d0b4f965b57cdc6b3ace49967bcfe7f2580fa0b7863dfe288081247d876","license":"MIT"},"contracts/optimistic-ethereum/libraries/trie/Lib_SecureMerkleTrie.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_MerkleTrie } from \\"./Lib_MerkleTrie.sol\\";\\n\\n/**\\n * @title Lib_SecureMerkleTrie\\n */\\nlibrary Lib_SecureMerkleTrie {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Verifies a proof that a given key/value pair is present in the\\n     * Merkle trie.\\n     * @param _key Key of the node to search for, as a hex string.\\n     * @param _value Value of the node to search for, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n     * traditional Merkle trees, this proof is executed top-down and consists\\n     * of a list of RLP-encoded nodes that make a path down to the target node.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n     */\\n    function verifyInclusionProof(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _verified\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.verifyInclusionProof(key, _value, _proof, _root);\\n    }\\n\\n    /**\\n     * @notice Updates a Merkle trie and returns a new root hash.\\n     * @param _key Key of the node to update, as a hex string.\\n     * @param _value Value of the node to update, as a hex string.\\n     * @param _proof Merkle trie inclusion proof for the node *nearest* the\\n     * target node. If the key exists, we can simply update the value.\\n     * Otherwise, we need to modify the trie to handle the new k/v pair.\\n     * @param _root Known root of the Merkle trie. Used to verify that the\\n     * included proof is correctly constructed.\\n     * @return _updatedRoot Root hash of the newly constructed trie.\\n     */\\n    function update(\\n        bytes memory _key,\\n        bytes memory _value,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.update(key, _value, _proof, _root);\\n    }\\n\\n    /**\\n     * @notice Retrieves the value associated with a given key.\\n     * @param _key Key to search for, as hex bytes.\\n     * @param _proof Merkle trie inclusion proof for the key.\\n     * @param _root Known root of the Merkle trie.\\n     * @return _exists Whether or not the key exists.\\n     * @return _value Value of the key if it exists.\\n     */\\n    function get(\\n        bytes memory _key,\\n        bytes memory _proof,\\n        bytes32 _root\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool _exists,\\n            bytes memory _value\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.get(key, _proof, _root);\\n    }\\n\\n    /**\\n     * Computes the root hash for a trie with a single node.\\n     * @param _key Key for the single node.\\n     * @param _value Value for the single node.\\n     * @return _updatedRoot Hash of the trie.\\n     */\\n    function getSingleNodeRootHash(\\n        bytes memory _key,\\n        bytes memory _value\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32 _updatedRoot\\n        )\\n    {\\n        bytes memory key = _getSecureKey(_key);\\n        return Lib_MerkleTrie.getSingleNodeRootHash(key, _value);\\n    }\\n\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Computes the secure counterpart to a key.\\n     * @param _key Key to get a secure key from.\\n     * @return _secureKey Secure version of the key.\\n     */\\n    function _getSecureKey(\\n        bytes memory _key\\n    )\\n        private\\n        pure\\n        returns (\\n            bytes memory _secureKey\\n        )\\n    {\\n        return abi.encodePacked(keccak256(_key));\\n    }\\n}","keccak256":"0xbbdd600165307d2131340599afa9dc0991f8f63727ba3a834bca5a3d7f501da8","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_Bytes32Utils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\"true.\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(\\n        bool _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(\\n        address _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return bytes32(uint256(_in));\\n    }\\n\\n    /**\\n     * Removes the leading zeros from a bytes32 value and returns a new (smaller) bytes value.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 without any leading zeros.\\n     */\\n    function removeLeadingZeros(\\n        bytes32 _in\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory out;\\n\\n        assembly {\\n            // Figure out how many leading zero bytes to remove.\\n            let shift := 0\\n            for { let i := 0 } and(lt(i, 32), eq(byte(i, _in), 0)) { i := add(i, 1) } {\\n                shift := add(shift, 1)\\n            }\\n\\n            // Reserve some space for our output and fix the free memory pointer.\\n            out := mload(0x40)\\n            mstore(0x40, add(out, 0x40))\\n\\n            // Shift the value and store it into the output bytes.\\n            mstore(add(out, 0x20), shl(mul(shift, 8), _in))\\n\\n            // Store the new size (with leading zero bytes removed) in the output byte size.\\n            mstore(out, sub(32, shift))\\n        }\\n\\n        return out;\\n    }\\n}\\n","keccak256":"0xfa2def593e3fc56a31852c3744aefdaa93cec74e721bfcfeb1e5d166c7c60b64","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_BytesUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        require(_length + 31 >= _length, \\"slice_overflow\\");\\n        require(_start + _length >= _start, \\"slice_overflow\\");\\n        require(_bytes.length >= _start + _length, \\"slice_outOfBounds\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don\'t care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we\'re done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin\'s length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let\'s just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        if (_start >= _bytes.length) {\\n            return bytes(\'\');\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32PadLeft(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 ret;\\n        uint256 len = _bytes.length <= 32 ? _bytes.length : 32;\\n        assembly {\\n            ret := shr(mul(sub(32, len), 8), mload(add(_bytes, 32)))\\n        }\\n        return ret;\\n    }\\n\\n    function toBytes32(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes,(bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toUint24(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint24\\n        )\\n    {\\n        require(_start + 3 >= _start, \\"toUint24_overflow\\");\\n        require(_bytes.length >= _start + 3 , \\"toUint24_outOfBounds\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint8(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint8\\n        )\\n    {\\n        require(_start + 1 >= _start, \\"toUint8_overflow\\");\\n        require(_bytes.length >= _start + 1 , \\"toUint8_outOfBounds\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        require(_start + 20 >= _start, \\"toAddress_overflow\\");\\n        require(_bytes.length >= _start + 20, \\"toAddress_outOfBounds\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(\\n        bytes memory _bytes\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(\\n        bytes memory _bytes,\\n        bytes memory _other\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n","keccak256":"0xd27e37973f1e0f64798725b7a0de12989dac992fba0d72970249d7e1f70e17c5","license":"MIT"},"contracts/optimistic-ethereum/libraries/utils/Lib_EthUtils.sol":{"content":"// SPDX-License-Identifier: MIT\\n// @unsupported: ovm\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Library Imports */\\nimport { Lib_RLPWriter } from \\"../rlp/Lib_RLPWriter.sol\\";\\nimport { Lib_Bytes32Utils } from \\"./Lib_Bytes32Utils.sol\\";\\n\\n/**\\n * @title Lib_EthUtils\\n */\\nlibrary Lib_EthUtils {\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Gets the code for a given address.\\n     * @param _address Address to get code for.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Code read from the contract.\\n     */\\n    function getCode(\\n        address _address,\\n        uint256 _offset,\\n        uint256 _length\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        bytes memory code;\\n        assembly {\\n            code := mload(0x40)\\n            mstore(0x40, add(code, add(_length, 0x20)))\\n            mstore(code, _length)\\n            extcodecopy(_address, add(code, 0x20), _offset, _length)\\n        }\\n\\n        return code;\\n    }\\n\\n    /**\\n     * Gets the full code for a given address.\\n     * @param _address Address to get code for.\\n     * @return Full code of the contract.\\n     */\\n    function getCode(\\n        address _address\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes memory\\n        )\\n    {\\n        return getCode(\\n            _address,\\n            0,\\n            getCodeSize(_address)\\n        );\\n    }\\n\\n    /**\\n     * Gets the size of a contract\'s code in bytes.\\n     * @param _address Address to get code size for.\\n     * @return Size of the contract\'s code in bytes.\\n     */\\n    function getCodeSize(\\n        address _address\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256\\n        )\\n    {\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(_address)\\n        }\\n\\n        return codeSize;\\n    }\\n\\n    /**\\n     * Gets the hash of a contract\'s code.\\n     * @param _address Address to get a code hash for.\\n     * @return Hash of the contract\'s code.\\n     */\\n    function getCodeHash(\\n        address _address\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_address)\\n        }\\n\\n        return codeHash;\\n    }\\n\\n    /**\\n     * Creates a contract with some given initialization code.\\n     * @param _code Contract initialization code.\\n     * @return Address of the created contract.\\n     */\\n    function createContract(\\n        bytes memory _code\\n    )\\n        internal\\n        returns (\\n            address\\n        )\\n    {\\n        address created;\\n        assembly {\\n            created := create(\\n                0,\\n                add(_code, 0x20),\\n                mload(_code)\\n            )\\n        }\\n\\n        return created;\\n    }\\n\\n    /**\\n     * Computes the address that would be generated by CREATE.\\n     * @param _creator Address creating the contract.\\n     * @param _nonce Creator\'s nonce.\\n     * @return Address to be generated by CREATE.\\n     */\\n    function getAddressForCREATE(\\n        address _creator,\\n        uint256 _nonce\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        bytes[] memory encoded = new bytes[](2);\\n        encoded[0] = Lib_RLPWriter.writeAddress(_creator);\\n        encoded[1] = Lib_RLPWriter.writeUint(_nonce);\\n\\n        bytes memory encodedList = Lib_RLPWriter.writeList(encoded);\\n        return Lib_Bytes32Utils.toAddress(keccak256(encodedList));\\n    }\\n\\n    /**\\n     * Computes the address that would be generated by CREATE2.\\n     * @param _creator Address creating the contract.\\n     * @param _bytecode Bytecode of the contract to be created.\\n     * @param _salt 32 byte salt value mixed into the hash.\\n     * @return Address to be generated by CREATE2.\\n     */\\n    function getAddressForCREATE2(\\n        address _creator,\\n        bytes memory _bytecode,\\n        bytes32 _salt\\n    )\\n        internal\\n        pure\\n        returns (\\n            address\\n        )\\n    {\\n        bytes32 hashedData = keccak256(abi.encodePacked(\\n            byte(0xff),\\n            _creator,\\n            _salt,\\n            keccak256(_bytecode)\\n        ));\\n\\n        return Lib_Bytes32Utils.toAddress(hashedData);\\n    }\\n}\\n","keccak256":"0xf29a67d78e61cb472d524b779b32cfcb39a587f4096500d5419e6425ed367d49","license":"MIT"}},"version":1}',bytecode:"",deployedBytecode:"",devdoc:{details:"The State Transitioner Factory is used by the Fraud Verifier to create a new State Transitioner during the initialization of a fraud proof. Compiler used: solc Runtime target: EVM",kind:"dev",methods:{"create(address,uint256,bytes32,bytes32)":{params:{_libAddressManager:"Address of the Address Manager.",_preStateRoot:"State root before the transition was executed.",_stateTransitionIndex:"Index of the state transition being verified.",_transactionHash:"Hash of the executed transaction."},returns:{_0:"New OVM_StateTransitioner instance."}},"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}}},title:"OVM_StateTransitionerFactory",version:1},userdoc:{kind:"user",methods:{"create(address,uint256,bytes32,bytes32)":{notice:"Creates a new OVM_StateTransitioner"},"resolve(string)":{notice:"Resolves the address associated with a given name."}},version:1},storageLayout:{storage:[{astId:15303,contract:"contracts/optimistic-ethereum/OVM/verification/OVM_StateTransitionerFactory.sol:OVM_StateTransitionerFactory",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15296"}],types:{"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/OVM_StateTransitionerFactory.json"}],[360,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"},{internalType:"string",name:"_implementationName",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{stateMutability:"payable",type:"fallback"}],transactionHash:"0x3061bc0332ef45e8809cee450c3c487eba2520084c71ff38da85459aee6b9a1d",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",transactionIndex:153,gasUsed:"225024",logsBloom:"0xblockHash:"0xd4ac3db2a7b6711dabac13ef84b398e86c647e5a24f0ffdd3458b3c66ab6cef1",transactionHash:"0x3061bc0332ef45e8809cee450c3c487eba2520084c71ff38da85459aee6b9a1d",logs:[],blockNumber:12686757,cumulativeGasUsed:"11815865",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F","OVM_L1CrossDomainMessenger"],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"},{"internalType":"string","name":"_implementationName","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"payable","type":"fallback"}],"devdoc":{"kind":"dev","methods":{"constructor":{"params":{"_implementationName":"implementationName of the contract to proxy to.","_libAddressManager":"Address of the Lib_AddressManager."}}},"title":"Lib_ResolvedDelegateProxy","version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/libraries/resolver/Lib_ResolvedDelegateProxy.sol":"Lib_ResolvedDelegateProxy"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_ResolvedDelegateProxy.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_ResolvedDelegateProxy\\n */\\ncontract Lib_ResolvedDelegateProxy {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Using mappings to store fields to avoid overwriting storage slots in the\\n    // implementation contract. For example, instead of storing these fields at\\n    // storage slot `0` & `1`, they are stored at `keccak256(key + slot)`.\\n    // See: https://solidity.readthedocs.io/en/v0.7.0/internals/layout_in_storage.html\\n    // NOTE: Do not use this code in your own contract system.\\n    //      There is a known flaw in this contract, and we will remove it from the repository\\n    //      in the near future. Due to the very limited way that we are using it, this flaw is\\n    //      not an issue in our system.\\n    mapping (address => string) private implementationName;\\n    mapping (address => Lib_AddressManager) private addressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     * @param _implementationName implementationName of the contract to proxy to.\\n     */\\n    constructor(\\n        address _libAddressManager,\\n        string memory _implementationName\\n    ) {\\n        addressManager[address(this)] = Lib_AddressManager(_libAddressManager);\\n        implementationName[address(this)] = _implementationName;\\n    }\\n\\n\\n    /*********************\\n     * Fallback Function *\\n     *********************/\\n\\n    fallback()\\n        external\\n        payable\\n    {\\n        address target = addressManager[address(this)].getAddress(\\n            (implementationName[address(this)])\\n        );\\n\\n        require(\\n            target != address(0),\\n            \\"Target address must be initialized.\\"\\n        );\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(msg.data);\\n\\n        if (success == true) {\\n            assembly {\\n                return(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            assembly {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        }\\n    }\\n}\\n","keccak256":"0xfaecb051b37f1d87d588cafb17a575723cbdf7c3c2079772110f33e747e05027","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506040516104083803806104088339818101604052604081101561003357600080fd5b81516020830180516040519294929383019291908464010000000082111561005a57600080fd5b90830190602082018581111561006f57600080fd5b825164010000000081118282018810171561008957600080fd5b82525081516020918201929091019080838360005b838110156100b657818101518382015260200161009e565b50505050905090810190601f1680156100e35780820380516001836020036101000a031916815260200191505b5060409081523060009081526001602090815282822080546001600160a01b0319166001600160a01b038a16179055818152919020855161012c95509093509085019150610134565b5050506101d5565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261016a57600085556101b0565b82601f1061018357805160ff19168380011785556101b0565b828001600101855582156101b0579182015b828111156101b0578251825591602001919060010190610195565b506101bc9291506101c0565b5090565b5b808211156101bc57600081556001016101c1565b610224806101e46000396000f3fe60806040818152306000908152600160208181528383205483825293832063bf40fac160e01b909552608490815284546002610100938216159390930260001901169190910460a481905291936001600160a01b039093169263bf40fac192909190819060c490849080156100b55780601f1061008a576101008083540402835291602001916100b5565b820191906000526020600020905b81548152906001019060200180831161009857829003601f168201915b50509250505060206040518083038186803b1580156100d357600080fd5b505afa1580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b505190506001600160a01b0381166101465760405162461bcd60e51b81526004018080602001828103825260238152602001806101cc6023913960400191505060405180910390fd5b600080826001600160a01b03166000366040518083838082843760405192019450600093509091505080830381855af49150503d80600081146101a5576040519150601f19603f3d011682016040523d82523d6000602084013e6101aa565b606091505b509092509050600182151514156101c357805160208201f35b805160208201fdfe5461726765742061646472657373206d75737420626520696e697469616c697a65642ea2646970667358221220d96dd78b72a44c11bfa8efb98d29ee53776a02c67052599da176325fcbf95b6464736f6c63430007060033",deployedBytecode:"0x60806040818152306000908152600160208181528383205483825293832063bf40fac160e01b909552608490815284546002610100938216159390930260001901169190910460a481905291936001600160a01b039093169263bf40fac192909190819060c490849080156100b55780601f1061008a576101008083540402835291602001916100b5565b820191906000526020600020905b81548152906001019060200180831161009857829003601f168201915b50509250505060206040518083038186803b1580156100d357600080fd5b505afa1580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b505190506001600160a01b0381166101465760405162461bcd60e51b81526004018080602001828103825260238152602001806101cc6023913960400191505060405180910390fd5b600080826001600160a01b03166000366040518083838082843760405192019450600093509091505080830381855af49150503d80600081146101a5576040519150601f19603f3d011682016040523d82523d6000602084013e6101aa565b606091505b509092509050600182151514156101c357805160208201f35b805160208201fdfe5461726765742061646472657373206d75737420626520696e697469616c697a65642ea2646970667358221220d96dd78b72a44c11bfa8efb98d29ee53776a02c67052599da176325fcbf95b6464736f6c63430007060033",devdoc:{kind:"dev",methods:{constructor:{params:{_implementationName:"implementationName of the contract to proxy to.",_libAddressManager:"Address of the Lib_AddressManager."}}},title:"Lib_ResolvedDelegateProxy",version:1},userdoc:{kind:"user",methods:{},version:1},storageLayout:{storage:[{astId:15340,contract:"contracts/optimistic-ethereum/libraries/resolver/Lib_ResolvedDelegateProxy.sol:Lib_ResolvedDelegateProxy",label:"implementationName",offset:0,slot:"0",type:"t_mapping(t_address,t_string_storage)"},{astId:15344,contract:"contracts/optimistic-ethereum/libraries/resolver/Lib_ResolvedDelegateProxy.sol:Lib_ResolvedDelegateProxy",label:"addressManager",offset:0,slot:"1",type:"t_mapping(t_address,t_contract(Lib_AddressManager)15296)"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"},"t_mapping(t_address,t_contract(Lib_AddressManager)15296)":{encoding:"mapping",key:"t_address",label:"mapping(address => contract Lib_AddressManager)",numberOfBytes:"32",value:"t_contract(Lib_AddressManager)15296"},"t_mapping(t_address,t_string_storage)":{encoding:"mapping",key:"t_address",label:"mapping(address => string)",numberOfBytes:"32",value:"t_string_storage"},t_string_storage:{encoding:"bytes",label:"string",numberOfBytes:"32"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/Proxy__OVM_L1CrossDomainMessenger.json"}],[361,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",abi:[{inputs:[{internalType:"address",name:"_owner",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{stateMutability:"payable",type:"fallback"},{inputs:[],name:"getImplementation",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"_code",type:"bytes"}],name:"setCode",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_owner",type:"address"}],name:"setOwner",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_key",type:"bytes32"},{internalType:"bytes32",name:"_value",type:"bytes32"}],name:"setStorage",outputs:[],stateMutability:"nonpayable",type:"function"}],transactionHash:"0x3fb736def76e27e507bc4e451e5498f1f1beee3e82e6aa67ecef434c638a04ac",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",transactionIndex:70,gasUsed:"471232",logsBloom:"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",blockHash:"0xb6578d9e60cce4713437b5cf0898dd7040c9284e178aadfb7dfbb590f4f083af",transactionHash:"0x3fb736def76e27e507bc4e451e5498f1f1beee3e82e6aa67ecef434c638a04ac",logs:[],blockNumber:12686786,cumulativeGasUsed:"6551653",status:1,byzantium:!0},args:["0x9996571372066A1545D3435C6935e3F9593A7eF5"],solcInputHash:"7531d7762a77038a37e7490a7b4b176f",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"getImplementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_code","type":"bytes"}],"name":"setCode","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"bytes32","name":"_value","type":"bytes32"}],"name":"setStorage","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added functions `setCode` and `setStorage` for changing the code or storage of the contract. Nifty! Note for future developers: do NOT make anything in this contract \'public\' unless you know what you\'re doing. Anything public can potentially have a function signature that conflicts with a signature attached to the implementation contract. Public functions SHOULD always have the \'proxyCallIfNotOwner\' modifier unless there\'s some *really* good reason not to have that modifier. And there almost certainly is not a good reason to not have that modifier. Beware!","kind":"dev","methods":{"constructor":{"params":{"_owner":"Address of the initial contract owner."}},"getImplementation()":{"returns":{"_0":"Implementation address."}},"getOwner()":{"returns":{"_0":"Owner address."}},"setCode(bytes)":{"params":{"_code":"New contract code to run inside this contract."}},"setOwner(address)":{"params":{"_owner":"New owner of the proxy contract."}},"setStorage(bytes32,bytes32)":{"params":{"_key":"Storage key to modify.","_value":"New value for the storage key."}}},"title":"L1ChugSplashProxy","version":1},"userdoc":{"kind":"user","methods":{"getImplementation()":{"notice":"Queries the implementation address. Can only be called by the owner OR by making an eth_call and setting the \\"from\\" address to address(0)."},"getOwner()":{"notice":"Queries the owner of the proxy contract. Can only be called by the owner OR by making an eth_call and setting the \\"from\\" address to address(0)."},"setCode(bytes)":{"notice":"Sets the code that should be running behind this proxy. Note that this scheme is a bit different from the standard proxy scheme where one would typically deploy the code separately and then set the implementation address. We\'re doing it this way because it gives us a lot more freedom on the client side. Can only be triggered by the contract owner."},"setOwner(address)":{"notice":"Changes the owner of the proxy contract. Only callable by the owner."},"setStorage(bytes32,bytes32)":{"notice":"Modifies some storage slot within the proxy contract. Gives us a lot of power to perform upgrades in a more transparent way. Only callable by the owner."}},"version":1}},"settings":{"compilationTarget":{"contracts/chugsplash/L1ChugSplashProxy.sol":"L1ChugSplashProxy"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/chugsplash/L1ChugSplashProxy.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\nimport { iL1ChugSplashDeployer } from \\"./interfaces/iL1ChugSplashDeployer.sol\\";\\n\\n/**\\n * @title L1ChugSplashProxy\\n * @dev Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added\\n * functions `setCode` and `setStorage` for changing the code or storage of the contract. Nifty!\\n *\\n * Note for future developers: do NOT make anything in this contract \'public\' unless you know what\\n * you\'re doing. Anything public can potentially have a function signature that conflicts with a\\n * signature attached to the implementation contract. Public functions SHOULD always have the\\n * \'proxyCallIfNotOwner\' modifier unless there\'s some *really* good reason not to have that\\n * modifier. And there almost certainly is not a good reason to not have that modifier. Beware!\\n */\\ncontract L1ChugSplashProxy {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    // \\"Magic\\" prefix. When prepended to some arbitrary bytecode and used to create a contract, the\\n    // appended bytecode will be deployed as given.\\n    bytes13 constant internal DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;\\n\\n    // bytes32(uint256(keccak256(\'eip1967.proxy.implementation\')) - 1)\\n    bytes32 constant internal IMPLEMENTATION_KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    // bytes32(uint256(keccak256(\'eip1967.proxy.admin\')) - 1)\\n    bytes32 constant internal OWNER_KEY = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n    \\n    /**\\n     * @param _owner Address of the initial contract owner.\\n     */\\n    constructor(\\n        address _owner\\n    ) {\\n        _setOwner(_owner);\\n    }\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Blocks a function from being called when the parent signals that the system should be paused\\n     * via an isUpgrading function.\\n     */\\n    modifier onlyWhenNotPaused() {\\n        address owner = _getOwner();\\n\\n        // We do a low-level call because there\'s no guarantee that the owner actually *is* an\\n        // L1ChugSplashDeployer contract and Solidity will throw errors if we do a normal call and\\n        // it turns out that it isn\'t the right type of contract.\\n        (bool success, bytes memory returndata) = owner.staticcall(\\n            abi.encodeWithSelector(\\n                iL1ChugSplashDeployer.isUpgrading.selector\\n            )\\n        );\\n\\n        // If the call was unsuccessful then we assume that there\'s no \\"isUpgrading\\" method and we\\n        // can just continue as normal. We also expect that the return value is exactly 32 bytes\\n        // long. If this isn\'t the case then we can safely ignore the result.\\n        if (success && returndata.length == 32) {\\n            // Although the expected value is a *boolean*, it\'s safer to decode as a uint256 in the\\n            // case that the isUpgrading function returned something other than 0 or 1. But we only\\n            // really care about the case where this value is 0 (= false).\\n            uint256 ret = abi.decode(returndata, (uint256));\\n            require(\\n                ret == 0,\\n                \\"L1ChugSplashProxy: system is currently being upgraded\\"\\n            );\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * Makes a proxy call instead of triggering the given function when the caller is either the\\n     * owner or the zero address. Caller can only ever be the zero address if this function is\\n     * being called off-chain via eth_call, which is totally fine and can be convenient for\\n     * client-side tooling. Avoids situations where the proxy and implementation share a sighash\\n     * and the proxy function ends up being called instead of the implementation one.\\n     *\\n     * Note: msg.sender == address(0) can ONLY be triggered off-chain via eth_call. If there\'s a\\n     * way for someone to send a transaction with msg.sender == address(0) in any real context then\\n     * we have much bigger problems. Primary reason to include this additional allowed sender is\\n     * because the owner address can be changed dynamically and we do not want clients to have to\\n     * keep track of the current owner in order to make an eth_call that doesn\'t trigger the\\n     * proxied contract.\\n     */\\n    modifier proxyCallIfNotOwner() {\\n        if (msg.sender == _getOwner() || msg.sender == address(0)) {\\n            _;\\n        } else {\\n            // This WILL halt the call frame on completion.\\n            _doProxyCall();\\n        }\\n    }\\n\\n\\n    /*********************\\n     * Fallback Function *\\n     *********************/\\n\\n    fallback()\\n        external\\n        payable\\n    {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the code that should be running behind this proxy. Note that this scheme is a bit\\n     * different from the standard proxy scheme where one would typically deploy the code\\n     * separately and then set the implementation address. We\'re doing it this way because it gives\\n     * us a lot more freedom on the client side. Can only be triggered by the contract owner.\\n     * @param _code New contract code to run inside this contract.\\n     */\\n    function setCode(\\n        bytes memory _code\\n    )\\n        proxyCallIfNotOwner\\n        public\\n    {\\n        // Get the code hash of the current implementation.\\n        address implementation = _getImplementation();\\n\\n        // If the code hash matches the new implementation then we return early.\\n        if (keccak256(_code) == _getAccountCodeHash(implementation)) {\\n            return;\\n        }\\n\\n        // Create the deploycode by appending the magic prefix.\\n        bytes memory deploycode = abi.encodePacked(\\n            DEPLOY_CODE_PREFIX,\\n            _code\\n        );\\n\\n        // Deploy the code and set the new implementation address.\\n        address newImplementation;\\n        assembly {\\n            newImplementation := create(0x0, add(deploycode, 0x20), mload(deploycode))\\n        }\\n\\n        // Check that the code was actually deployed correctly. I\'m not sure if you can ever\\n        // actually fail this check. Should only happen if the contract creation from above runs\\n        // out of gas but this parent execution thread does NOT run out of gas. Seems like we\\n        // should be doing this check anyway though.\\n        require(\\n            _getAccountCodeHash(newImplementation) == keccak256(_code),\\n            \\"L1ChugSplashProxy: code was not correctly deployed.\\"\\n        );\\n\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**\\n     * Modifies some storage slot within the proxy contract. Gives us a lot of power to perform\\n     * upgrades in a more transparent way. Only callable by the owner.\\n     * @param _key Storage key to modify.\\n     * @param _value New value for the storage key.\\n     */\\n    function setStorage(\\n        bytes32 _key,\\n        bytes32 _value\\n    )\\n        proxyCallIfNotOwner\\n        public\\n    {\\n        assembly {\\n            sstore(_key, _value)\\n        }\\n    }\\n\\n    /**\\n     * Changes the owner of the proxy contract. Only callable by the owner.\\n     * @param _owner New owner of the proxy contract.\\n     */\\n    function setOwner(\\n        address _owner\\n    )\\n        proxyCallIfNotOwner\\n        public\\n    {\\n        _setOwner(_owner);\\n    }\\n\\n    /**\\n     * Queries the owner of the proxy contract. Can only be called by the owner OR by making an\\n     * eth_call and setting the \\"from\\" address to address(0).\\n     * @return Owner address.\\n     */\\n    function getOwner()\\n        proxyCallIfNotOwner\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        return _getOwner();\\n    }\\n\\n    /**\\n     * Queries the implementation address. Can only be called by the owner OR by making an\\n     * eth_call and setting the \\"from\\" address to address(0).\\n     * @return Implementation address.\\n     */\\n    function getImplementation()\\n        proxyCallIfNotOwner\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        return _getImplementation();\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Sets the implementation address.\\n     * @param _implementation New implementation address.\\n     */\\n    function _setImplementation(\\n        address _implementation\\n    )\\n        internal\\n    {\\n        assembly {\\n            sstore(IMPLEMENTATION_KEY, _implementation)\\n        }\\n    }\\n\\n    /**\\n     * Queries the implementation address.\\n     * @return Implementation address.\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        address implementation;\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_KEY)\\n        }\\n        return implementation;\\n    }\\n\\n    /**\\n     * Changes the owner of the proxy contract.\\n     * @param _owner New owner of the proxy contract.\\n     */\\n    function _setOwner(\\n        address _owner\\n    )\\n        internal\\n    {\\n        assembly {\\n            sstore(OWNER_KEY, _owner)\\n        }\\n    }\\n\\n    /**\\n     * Queries the owner of the proxy contract.\\n     * @return Owner address.\\n     */\\n    function _getOwner()\\n        internal\\n        view \\n        returns (\\n            address\\n        )\\n    {\\n        address owner;\\n        assembly {\\n            owner := sload(OWNER_KEY)\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * Gets the code hash for a given account.\\n     * @param _account Address of the account to get a code hash for.\\n     * @return Code hash for the account.\\n     */\\n    function _getAccountCodeHash(\\n        address _account\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_account)\\n        }\\n        return codeHash;\\n    }\\n\\n    /**\\n     * Performs the proxy call via a delegatecall.\\n     */\\n    function _doProxyCall()\\n        onlyWhenNotPaused\\n        internal\\n    {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation != address(0),\\n            \\"L1ChugSplashProxy: implementation is not set yet\\"\\n        );\\n\\n        assembly {\\n            // Copy calldata into memory at 0x0....calldatasize.\\n            calldatacopy(0x0, 0x0, calldatasize())\\n\\n            // Perform the delegatecall, make sure to pass all available gas.\\n            let success := delegatecall(gas(), implementation, 0x0, calldatasize(), 0x0, 0x0)\\n\\n            // Copy returndata into memory at 0x0....returndatasize. Note that this *will*\\n            // overwrite the calldata that we just copied into memory but that doesn\'t really\\n            // matter because we\'ll be returning in a second anyway.\\n            returndatacopy(0x0, 0x0, returndatasize())\\n            \\n            // Success == 0 means a revert. We\'ll revert too and pass the data up.\\n            if iszero(success) {\\n                revert(0x0, returndatasize())\\n            }\\n\\n            // Otherwise we\'ll just return and pass the data up.\\n            return(0x0, returndatasize())\\n        }\\n    }\\n}\\n","keccak256":"0x654af4f1d1aab76467c49fcce992eaf3522040ed806d656d98735c50ac235eeb","license":"MIT"},"contracts/chugsplash/interfaces/iL1ChugSplashDeployer.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iL1ChugSplashDeployer\\n */\\ninterface iL1ChugSplashDeployer {\\n    function isUpgrading()\\n        external\\n        view\\n        returns (\\n            bool\\n        );\\n}\\n","keccak256":"0xdab3ecb1ce03376523cd2f2ce5f991389c388829c56907987da01d99d3fc44c7","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506040516107983803806107988339818101604052602081101561003357600080fd5b505161003e81610044565b50610068565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b610721806100776000396000f3fe60806040526004361061004a5760003560e01c806313af4035146100545780636c5d4ad014610087578063893d20e81461013a5780639b0b0fda1461016b578063aaf10f421461019b575b6100526101b0565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661036c565b34801561009357600080fd5b50610052600480360360208110156100aa57600080fd5b8101906020810181356401000000008111156100c557600080fd5b8201836020820111156100d757600080fd5b803590602001918460018302840111640100000000831117156100f957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103af945050505050565b34801561014657600080fd5b5061014f610505565b604080516001600160a01b039092168252519081900360200190f35b34801561017757600080fd5b506100526004803603604081101561018e57600080fd5b508035906020013561054b565b3480156101a757600080fd5b5061014f610589565b60006101ba6105bd565b60408051600481526024810182526020810180516001600160e01b0316635bca393160e11b1781529151815193945060009384936001600160a01b0387169392918291908083835b602083106102215780518252601f199092019160209182019101610202565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610281576040519150601f19603f3d011682016040523d82523d6000602084013e610286565b606091505b5091509150818015610299575080516020145b156102f85760008180602001905160208110156102b557600080fd5b5051905080156102f65760405162461bcd60e51b81526004018080602001828103825260358152602001806106b76035913960400191505060405180910390fd5b505b60006103026105e2565b90506001600160a01b0381166103495760405162461bcd60e51b81526004018080602001828103825260308152602001806106546030913960400191505060405180910390fd5b3660008037600080366000845af43d6000803e80610366573d6000fd5b503d6000f35b6103746105bd565b6001600160a01b0316336001600160a01b03161480610391575033155b156103a45761039f81610607565b6103ac565b6103ac6101b0565b50565b6103b76105bd565b6001600160a01b0316336001600160a01b031614806103d4575033155b156103a45760006103e36105e2565b90506103ee8161062b565b825160208401201415610401575061039f565b60006c600d380380600d6000396000f360981b83604051602001808372ffffffffffffffffffffffffffffffffffffff19168152600d0182805190602001908083835b602083106104635780518252601f199092019160209182019101610444565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905060008151602083016000f0905083805190602001206104b88261062b565b146104f45760405162461bcd60e51b81526004018080602001828103825260338152602001806106846033913960400191505060405180910390fd5b6104fd8161062f565b5050506103ac565b600061050f6105bd565b6001600160a01b0316336001600160a01b0316148061052c575033155b15610540576105396105bd565b9050610548565b6105486101b0565b90565b6105536105bd565b6001600160a01b0316336001600160a01b03161480610570575033155b1561057d57808255610585565b6105856101b0565b5050565b60006105936105bd565b6001600160a01b0316336001600160a01b031614806105b0575033155b15610540576105396105e2565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b3f90565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe4c314368756753706c61736850726f78793a20696d706c656d656e746174696f6e206973206e6f7420736574207965744c314368756753706c61736850726f78793a20636f646520776173206e6f7420636f72726563746c79206465706c6f7965642e4c314368756753706c61736850726f78793a2073797374656d2069732063757272656e746c79206265696e67207570677261646564a26469706673582212202e20c1d0062b5a698d49624edce72a713b117e88f4cd70877869b53519c1d1f964736f6c63430007060033",deployedBytecode:"0x60806040526004361061004a5760003560e01c806313af4035146100545780636c5d4ad014610087578063893d20e81461013a5780639b0b0fda1461016b578063aaf10f421461019b575b6100526101b0565b005b34801561006057600080fd5b506100526004803603602081101561007757600080fd5b50356001600160a01b031661036c565b34801561009357600080fd5b50610052600480360360208110156100aa57600080fd5b8101906020810181356401000000008111156100c557600080fd5b8201836020820111156100d757600080fd5b803590602001918460018302840111640100000000831117156100f957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103af945050505050565b34801561014657600080fd5b5061014f610505565b604080516001600160a01b039092168252519081900360200190f35b34801561017757600080fd5b506100526004803603604081101561018e57600080fd5b508035906020013561054b565b3480156101a757600080fd5b5061014f610589565b60006101ba6105bd565b60408051600481526024810182526020810180516001600160e01b0316635bca393160e11b1781529151815193945060009384936001600160a01b0387169392918291908083835b602083106102215780518252601f199092019160209182019101610202565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610281576040519150601f19603f3d011682016040523d82523d6000602084013e610286565b606091505b5091509150818015610299575080516020145b156102f85760008180602001905160208110156102b557600080fd5b5051905080156102f65760405162461bcd60e51b81526004018080602001828103825260358152602001806106b76035913960400191505060405180910390fd5b505b60006103026105e2565b90506001600160a01b0381166103495760405162461bcd60e51b81526004018080602001828103825260308152602001806106546030913960400191505060405180910390fd5b3660008037600080366000845af43d6000803e80610366573d6000fd5b503d6000f35b6103746105bd565b6001600160a01b0316336001600160a01b03161480610391575033155b156103a45761039f81610607565b6103ac565b6103ac6101b0565b50565b6103b76105bd565b6001600160a01b0316336001600160a01b031614806103d4575033155b156103a45760006103e36105e2565b90506103ee8161062b565b825160208401201415610401575061039f565b60006c600d380380600d6000396000f360981b83604051602001808372ffffffffffffffffffffffffffffffffffffff19168152600d0182805190602001908083835b602083106104635780518252601f199092019160209182019101610444565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905060008151602083016000f0905083805190602001206104b88261062b565b146104f45760405162461bcd60e51b81526004018080602001828103825260338152602001806106846033913960400191505060405180910390fd5b6104fd8161062f565b5050506103ac565b600061050f6105bd565b6001600160a01b0316336001600160a01b0316148061052c575033155b15610540576105396105bd565b9050610548565b6105486101b0565b90565b6105536105bd565b6001600160a01b0316336001600160a01b03161480610570575033155b1561057d57808255610585565b6105856101b0565b5050565b60006105936105bd565b6001600160a01b0316336001600160a01b031614806105b0575033155b15610540576105396105e2565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355565b3f90565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe4c314368756753706c61736850726f78793a20696d706c656d656e746174696f6e206973206e6f7420736574207965744c314368756753706c61736850726f78793a20636f646520776173206e6f7420636f72726563746c79206465706c6f7965642e4c314368756753706c61736850726f78793a2073797374656d2069732063757272656e746c79206265696e67207570677261646564a26469706673582212202e20c1d0062b5a698d49624edce72a713b117e88f4cd70877869b53519c1d1f964736f6c63430007060033",devdoc:{details:"Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added functions `setCode` and `setStorage` for changing the code or storage of the contract. Nifty! Note for future developers: do NOT make anything in this contract 'public' unless you know what you're doing. Anything public can potentially have a function signature that conflicts with a signature attached to the implementation contract. Public functions SHOULD always have the 'proxyCallIfNotOwner' modifier unless there's some *really* good reason not to have that modifier. And there almost certainly is not a good reason to not have that modifier. Beware!",kind:"dev",methods:{constructor:{params:{_owner:"Address of the initial contract owner."}},"getImplementation()":{returns:{_0:"Implementation address."}},"getOwner()":{returns:{_0:"Owner address."}},"setCode(bytes)":{params:{_code:"New contract code to run inside this contract."}},"setOwner(address)":{params:{_owner:"New owner of the proxy contract."}},"setStorage(bytes32,bytes32)":{params:{_key:"Storage key to modify.",_value:"New value for the storage key."}}},title:"L1ChugSplashProxy",version:1},userdoc:{kind:"user",methods:{"getImplementation()":{notice:'Queries the implementation address. Can only be called by the owner OR by making an eth_call and setting the "from" address to address(0).'},"getOwner()":{notice:'Queries the owner of the proxy contract. Can only be called by the owner OR by making an eth_call and setting the "from" address to address(0).'},"setCode(bytes)":{notice:"Sets the code that should be running behind this proxy. Note that this scheme is a bit different from the standard proxy scheme where one would typically deploy the code separately and then set the implementation address. We're doing it this way because it gives us a lot more freedom on the client side. Can only be triggered by the contract owner."},"setOwner(address)":{notice:"Changes the owner of the proxy contract. Only callable by the owner."},"setStorage(bytes32,bytes32)":{notice:"Modifies some storage slot within the proxy contract. Gives us a lot of power to perform upgrades in a more transparent way. Only callable by the owner."}},version:1},storageLayout:{storage:[],types:null}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/Proxy__OVM_L1StandardBridge.json"}],[362,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={address:"0xCd76de5C57004d47d0216ec7dAbd3c72D8c49057",abi:[{inputs:[{internalType:"address",name:"_libAddressManager",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"_who",type:"address"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{internalType:"address",name:"_publisher",type:"address"},{internalType:"uint256",name:"_timestamp",type:"uint256"}],name:"finalize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"finalizeWithdrawal",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"},{internalType:"address",name:"",type:"address"}],name:"getGasSpent",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"address",name:"_who",type:"address"}],name:"isCollateralized",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"libAddressManager",outputs:[{internalType:"contract Lib_AddressManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"_preStateRoot",type:"bytes32"},{internalType:"bytes32",name:"_txHash",type:"bytes32"},{internalType:"address",name:"_who",type:"address"},{internalType:"uint256",name:"_gasSpent",type:"uint256"}],name:"recordGasSpent",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"_name",type:"string"}],name:"resolve",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"startWithdrawal",outputs:[],stateMutability:"nonpayable",type:"function"}],transactionHash:"0x9f307c40b374512c9051b2c2f84df57638556e4f04c1ba45e3894085dbff0126",receipt:{to:null,from:"0x9996571372066A1545D3435C6935e3F9593A7eF5",contractAddress:"0xCd76de5C57004d47d0216ec7dAbd3c72D8c49057",transactionIndex:79,gasUsed:"298498",logsBloom:"0xblockHash:"0xb3f35390f14261d39b131b06ef5f9e29f94cb484be935149e3743b947ba9d398",transactionHash:"0x9f307c40b374512c9051b2c2f84df57638556e4f04c1ba45e3894085dbff0126",logs:[],blockNumber:12686751,cumulativeGasUsed:"7524620",status:1,byzantium:!0},args:["0xdE1FCfB0851916CA5101820A69b13a4E276bd81F"],solcInputHash:"ef3f334bac4d7e77d91b457a0d89ab0a",metadata:'{"compiler":{"version":"0.7.6+commit.7338295f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_libAddressManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"internalType":"address","name":"_publisher","type":"address"},{"internalType":"uint256","name":"_timestamp","type":"uint256"}],"name":"finalize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finalizeWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"name":"getGasSpent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_who","type":"address"}],"name":"isCollateralized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"libAddressManager","outputs":[{"internalType":"contract Lib_AddressManager","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_preStateRoot","type":"bytes32"},{"internalType":"bytes32","name":"_txHash","type":"bytes32"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"uint256","name":"_gasSpent","type":"uint256"}],"name":"recordGasSpent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"name":"resolve","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"startWithdrawal","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"resolve(string)":{"params":{"_name":"Name to resolve an address for."},"returns":{"_0":"Address associated with the given name."}}},"title":"mockOVM_BondManager","version":1},"userdoc":{"kind":"user","methods":{"resolve(string)":{"notice":"Resolves the address associated with a given name."}},"version":1}},"settings":{"compilationTarget":{"contracts/optimistic-ethereum/mockOVM/verification/mockOVM_BondManager.sol":"mockOVM_BondManager"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\"../utils/Context.sol\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\"Ownable: caller is not the owner\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\"Ownable: new owner is the zero address\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n","keccak256":"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d","license":"MIT"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n","keccak256":"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0","license":"MIT"},"contracts/optimistic-ethereum/iOVM/verification/iOVM_BondManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\ninterface ERC20 {\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n}\\n\\n/// All the errors which may be encountered on the bond manager\\nlibrary Errors {\\n    string constant ERC20_ERR = \\"BondManager: Could not post bond\\";\\n    string constant ALREADY_FINALIZED = \\"BondManager: Fraud proof for this pre-state root has already been finalized\\";\\n    string constant SLASHED = \\"BondManager: Cannot finalize withdrawal, you probably got slashed\\";\\n    string constant WRONG_STATE = \\"BondManager: Wrong bond state for proposer\\";\\n    string constant CANNOT_CLAIM = \\"BondManager: Cannot claim yet. Dispute must be finalized first\\";\\n\\n    string constant WITHDRAWAL_PENDING = \\"BondManager: Withdrawal already pending\\";\\n    string constant TOO_EARLY = \\"BondManager: Too early to finalize your withdrawal\\";\\n\\n    string constant ONLY_TRANSITIONER = \\"BondManager: Only the transitioner for this pre-state root may call this function\\";\\n    string constant ONLY_FRAUD_VERIFIER = \\"BondManager: Only the fraud verifier may call this function\\";\\n    string constant ONLY_STATE_COMMITMENT_CHAIN = \\"BondManager: Only the state commitment chain may call this function\\";\\n    string constant WAIT_FOR_DISPUTES = \\"BondManager: Wait for other potential disputes\\";\\n}\\n\\n/**\\n * @title iOVM_BondManager\\n */\\ninterface iOVM_BondManager {\\n\\n    /*******************\\n     * Data Structures *\\n     *******************/\\n\\n    /// The lifecycle of a proposer\'s bond\\n    enum State {\\n        // Before depositing or after getting slashed, a user is uncollateralized\\n        NOT_COLLATERALIZED,\\n        // After depositing, a user is collateralized\\n        COLLATERALIZED,\\n        // After a user has initiated a withdrawal\\n        WITHDRAWING\\n    }\\n\\n    /// A bond posted by a proposer\\n    struct Bond {\\n        // The user\'s state\\n        State state;\\n        // The timestamp at which a proposer issued their withdrawal request\\n        uint32 withdrawalTimestamp;\\n        // The time when the first disputed was initiated for this bond\\n        uint256 firstDisputeAt;\\n        // The earliest observed state root for this bond which has had fraud\\n        bytes32 earliestDisputedStateRoot;\\n        // The state root\'s timestamp\\n        uint256 earliestTimestamp;\\n    }\\n\\n    // Per pre-state root, store the number of state provisions that were made\\n    // and how many of these calls were made by each user. Payouts will then be\\n    // claimed by users proportionally for that dispute.\\n    struct Rewards {\\n        // Flag to check if rewards for a fraud proof are claimable\\n        bool canClaim;\\n        // Total number of `recordGasSpent` calls made\\n        uint256 total;\\n        // The gas spent by each user to provide witness data. The sum of all\\n        // values inside this map MUST be equal to the value of `total`\\n        mapping(address => uint256) gasSpent;\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function recordGasSpent(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash,\\n        address _who,\\n        uint256 _gasSpent\\n    ) external;\\n\\n    function finalize(\\n        bytes32 _preStateRoot,\\n        address _publisher,\\n        uint256 _timestamp\\n    ) external;\\n\\n    function deposit() external;\\n\\n    function startWithdrawal() external;\\n\\n    function finalizeWithdrawal() external;\\n\\n    function claim(\\n        address _who\\n    ) external;\\n\\n    function isCollateralized(\\n        address _who\\n    ) external view returns (bool);\\n\\n    function getGasSpent(\\n        bytes32 _preStateRoot,\\n        address _who\\n    ) external view returns (uint256);\\n}\\n","keccak256":"0x3c2a8a399487857158649db1896749d86e39cba545a8aeb2e2bb0f3bdfa7a5b1","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* External Imports */\\nimport { Ownable } from \\"@openzeppelin/contracts/access/Ownable.sol\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n","keccak256":"0x636defb785a5c6650d101def6790d9104724cc7570e0d875138624d069eed257","license":"MIT"},"contracts/optimistic-ethereum/libraries/resolver/Lib_AddressResolver.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\"./Lib_AddressManager.sol\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(\\n        address _libAddressManager\\n    ) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(\\n        string memory _name\\n    )\\n        public\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n","keccak256":"0x65981feeabff6a81783ea97d44baf988a18a86c8cb374c46fdb71819cbacc7c0","license":"MIT"},"contracts/optimistic-ethereum/mockOVM/verification/mockOVM_BondManager.sol":{"content":"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Interface Imports */\\nimport { iOVM_BondManager } from \\"../../iOVM/verification/iOVM_BondManager.sol\\";\\n\\n/* Contract Imports */\\nimport { Lib_AddressResolver } from \\"../../libraries/resolver/Lib_AddressResolver.sol\\";\\n\\n/**\\n * @title mockOVM_BondManager\\n */\\ncontract mockOVM_BondManager is iOVM_BondManager, Lib_AddressResolver {\\n    constructor(\\n        address _libAddressManager\\n    )\\n        Lib_AddressResolver(_libAddressManager)\\n    {}\\n\\n    function recordGasSpent(\\n        bytes32 _preStateRoot,\\n        bytes32 _txHash,\\n        address _who,\\n        uint256 _gasSpent\\n    )\\n        override\\n        public\\n    {}\\n\\n    function finalize(\\n        bytes32 _preStateRoot,\\n        address _publisher,\\n        uint256 _timestamp\\n    )\\n        override\\n        public\\n    {}\\n\\n    function deposit()\\n        override\\n        public\\n    {}\\n\\n    function startWithdrawal()\\n        override\\n        public\\n    {}\\n\\n    function finalizeWithdrawal()\\n        override\\n        public\\n    {}\\n\\n    function claim(\\n        address _who\\n    )\\n        override\\n        public\\n    {}\\n\\n    function isCollateralized(\\n        address _who\\n    )\\n        override\\n        public\\n        view\\n        returns (\\n            bool\\n        )\\n    {\\n        // Only authenticate sequencer to submit state root batches.\\n        return _who == resolve(\\"OVM_Proposer\\");\\n    }\\n\\n    function getGasSpent(\\n        bytes32, // _preStateRoot,\\n        address // _who\\n    )\\n        override\\n        public\\n        pure\\n        returns (\\n            uint256\\n        )\\n    {\\n        return 0;\\n    }\\n}\\n","keccak256":"0xe649b49573ba5babca407f116e97dc13f24bf677cbcd03824a2eb98a7750c4e8","license":"MIT"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506040516104673803806104678339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610402806100656000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063abfbbe1311610066578063abfbbe1314610207578063bc2f8dd814610239578063c5b6aa2f14610239578063d0e30db014610239578063dc6453dc146102415761009e565b806302ad4d2a146100a35780631e16e92f146100dd5780631e83409a14610117578063299ca4781461013d578063461a447814610161575b600080fd5b6100c9600480360360208110156100b957600080fd5b50356001600160a01b031661027f565b604080519115158252519081900360200190f35b610115600480360360808110156100f357600080fd5b508035906020810135906001600160a01b0360408201351690606001356102c9565b005b6101156004803603602081101561012d57600080fd5b50356001600160a01b03166102cf565b6101456102d2565b604080516001600160a01b039092168252519081900360200190f35b6101456004803603602081101561017757600080fd5b81019060208101813564010000000081111561019257600080fd5b8201836020820111156101a457600080fd5b803590602001918460018302840111640100000000831117156101c657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102e1945050505050565b6101156004803603606081101561021d57600080fd5b508035906001600160a01b0360208201351690604001356103bd565b6101156103c2565b61026d6004803603604081101561025757600080fd5b50803590602001356001600160a01b03166103c4565b60408051918252519081900360200190f35b60006102ae6040518060400160405280600c81526020016b27ab26afa83937b837b9b2b960a11b8152506102e1565b6001600160a01b0316826001600160a01b0316149050919050565b50505050565b50565b6000546001600160a01b031681565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b83811015610341578181015183820152602001610329565b50505050905090810190601f16801561036e5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561038b57600080fd5b505afa15801561039f573d6000803e3d6000fd5b505050506040513d60208110156103b557600080fd5b505192915050565b505050565b565b60009291505056fea2646970667358221220c19aac7427cb83d5b9d44589a9b54252aad926befab3c327ae2aebfd25184a9464736f6c63430007060033",deployedBytecode:"0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063abfbbe1311610066578063abfbbe1314610207578063bc2f8dd814610239578063c5b6aa2f14610239578063d0e30db014610239578063dc6453dc146102415761009e565b806302ad4d2a146100a35780631e16e92f146100dd5780631e83409a14610117578063299ca4781461013d578063461a447814610161575b600080fd5b6100c9600480360360208110156100b957600080fd5b50356001600160a01b031661027f565b604080519115158252519081900360200190f35b610115600480360360808110156100f357600080fd5b508035906020810135906001600160a01b0360408201351690606001356102c9565b005b6101156004803603602081101561012d57600080fd5b50356001600160a01b03166102cf565b6101456102d2565b604080516001600160a01b039092168252519081900360200190f35b6101456004803603602081101561017757600080fd5b81019060208101813564010000000081111561019257600080fd5b8201836020820111156101a457600080fd5b803590602001918460018302840111640100000000831117156101c657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102e1945050505050565b6101156004803603606081101561021d57600080fd5b508035906001600160a01b0360208201351690604001356103bd565b6101156103c2565b61026d6004803603604081101561025757600080fd5b50803590602001356001600160a01b03166103c4565b60408051918252519081900360200190f35b60006102ae6040518060400160405280600c81526020016b27ab26afa83937b837b9b2b960a11b8152506102e1565b6001600160a01b0316826001600160a01b0316149050919050565b50505050565b50565b6000546001600160a01b031681565b6000805460405163bf40fac160e01b81526020600482018181528551602484015285516001600160a01b039094169363bf40fac19387938392604490920191908501908083838b5b83811015610341578181015183820152602001610329565b50505050905090810190601f16801561036e5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561038b57600080fd5b505afa15801561039f573d6000803e3d6000fd5b505050506040513d60208110156103b557600080fd5b505192915050565b505050565b565b60009291505056fea2646970667358221220c19aac7427cb83d5b9d44589a9b54252aad926befab3c327ae2aebfd25184a9464736f6c63430007060033",devdoc:{kind:"dev",methods:{"resolve(string)":{params:{_name:"Name to resolve an address for."},returns:{_0:"Address associated with the given name."}}},title:"mockOVM_BondManager",version:1},userdoc:{kind:"user",methods:{"resolve(string)":{notice:"Resolves the address associated with a given name."}},version:1},storageLayout:{storage:[{astId:15303,contract:"contracts/optimistic-ethereum/mockOVM/verification/mockOVM_BondManager.sol:mockOVM_BondManager",label:"libAddressManager",offset:0,slot:"0",type:"t_contract(Lib_AddressManager)15296"}],types:{"t_contract(Lib_AddressManager)15296":{encoding:"inplace",label:"contract Lib_AddressManager",numberOfBytes:"20"}}}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/deployments/mainnet/mockOVM_BondManager.json"}],[363,{"./contract-artifacts":364,"./contract-deployed-artifacts":366,"./predeploys":368,"@ethersproject/abstract-provider":427,ethers:2545},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.connectL2Contracts=t.connectL1Contracts=void 0;const a=e("ethers"),r=e("@ethersproject/abstract-provider"),s=e("./contract-artifacts"),o=e("./contract-deployed-artifacts"),i=e("./predeploys"),d=e=>{if(!e)throw Error("signerOrProvider argument is undefined");if(!r.Provider.isProvider(e)&&!a.Signer.isSigner(e))throw Error("signerOrProvider argument is the wrong type")};t.connectL1Contracts=async(e,n)=>{if(d(e),!["mainnet","kovan","goerli"].includes(n))throw Error("Must specify network: mainnet, kovan, or goerli.");const t=t=>{const r=o.getDeployedContractArtifact(t,n);return new a.Contract(r.address,r.abi,e)};return{addressManager:t("Lib_AddressManager"),canonicalTransactionChain:t("CanonicalTransactionChain"),stateCommitmentChain:t("StateCommitmentChain"),xDomainMessengerProxy:t("Proxy__L1CrossDomainMessenger"),bondManager:t("mockBondManager")}};t.connectL2Contracts=async e=>{d(e);const n=(n,t)=>{const r=s.getContractArtifact(t||n),o=i.predeploys[n];return new a.Contract(o,r.abi,e)};return{eth:n("OVM_ETH"),xDomainMessenger:n("L2CrossDomainMessenger"),messagePasser:n("OVM_L2ToL1MessagePasser"),deployerWhiteList:n("OVM_DeployerWhitelist")}}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/dist/connect-contracts.js"}],[364,{"../artifacts/contracts/L1/messaging/IL1CrossDomainMessenger.sol/IL1CrossDomainMessenger.json":266,"../artifacts/contracts/L1/messaging/IL1ERC20Bridge.sol/IL1ERC20Bridge.json":267,"../artifacts/contracts/L1/messaging/IL1StandardBridge.sol/IL1StandardBridge.json":268,"../artifacts/contracts/L1/messaging/L1CrossDomainMessenger.sol/L1CrossDomainMessenger.json":269,"../artifacts/contracts/L1/messaging/L1StandardBridge.sol/L1StandardBridge.json":270,"../artifacts/contracts/L1/rollup/CanonicalTransactionChain.sol/CanonicalTransactionChain.json":271,"../artifacts/contracts/L1/rollup/ChainStorageContainer.sol/ChainStorageContainer.json":272,"../artifacts/contracts/L1/rollup/ICanonicalTransactionChain.sol/ICanonicalTransactionChain.json":273,"../artifacts/contracts/L1/rollup/IChainStorageContainer.sol/IChainStorageContainer.json":274,"../artifacts/contracts/L1/rollup/IStateCommitmentChain.sol/IStateCommitmentChain.json":275,"../artifacts/contracts/L1/rollup/StateCommitmentChain.sol/StateCommitmentChain.json":276,"../artifacts/contracts/L1/verification/BondManager.sol/BondManager.json":277,"../artifacts/contracts/L1/verification/IBondManager.sol/IBondManager.json":278,"../artifacts/contracts/L2/messaging/IL2CrossDomainMessenger.sol/IL2CrossDomainMessenger.json":279,"../artifacts/contracts/L2/messaging/IL2ERC20Bridge.sol/IL2ERC20Bridge.json":280,"../artifacts/contracts/L2/messaging/L2CrossDomainMessenger.sol/L2CrossDomainMessenger.json":281,"../artifacts/contracts/L2/messaging/L2StandardBridge.sol/L2StandardBridge.json":282,"../artifacts/contracts/L2/messaging/L2StandardTokenFactory.sol/L2StandardTokenFactory.json":283,"../artifacts/contracts/L2/predeploys/OVM_DeployerWhitelist.sol/OVM_DeployerWhitelist.json":284,"../artifacts/contracts/L2/predeploys/OVM_ETH.sol/OVM_ETH.json":285,"../artifacts/contracts/L2/predeploys/OVM_GasPriceOracle.sol/OVM_GasPriceOracle.json":286,"../artifacts/contracts/L2/predeploys/OVM_L2ToL1MessagePasser.sol/OVM_L2ToL1MessagePasser.json":287,"../artifacts/contracts/L2/predeploys/OVM_SequencerFeeVault.sol/OVM_SequencerFeeVault.json":288,"../artifacts/contracts/L2/predeploys/WETH9.sol/WETH9.json":289,"../artifacts/contracts/L2/predeploys/iOVM_L1BlockNumber.sol/iOVM_L1BlockNumber.json":290,"../artifacts/contracts/L2/predeploys/iOVM_L2ToL1MessagePasser.sol/iOVM_L2ToL1MessagePasser.json":291,"../artifacts/contracts/chugsplash/L1ChugSplashProxy.sol/L1ChugSplashProxy.json":292,"../artifacts/contracts/chugsplash/interfaces/iL1ChugSplashDeployer.sol/iL1ChugSplashDeployer.json":293,"../artifacts/contracts/libraries/bridge/CrossDomainEnabled.sol/CrossDomainEnabled.json":294,"../artifacts/contracts/libraries/bridge/ICrossDomainMessenger.sol/ICrossDomainMessenger.json":295,"../artifacts/contracts/libraries/bridge/Lib_CrossDomainUtils.sol/Lib_CrossDomainUtils.json":296,"../artifacts/contracts/libraries/codec/Lib_OVMCodec.sol/Lib_OVMCodec.json":297,"../artifacts/contracts/libraries/constants/Lib_DefaultValues.sol/Lib_DefaultValues.json":298,"../artifacts/contracts/libraries/constants/Lib_PredeployAddresses.sol/Lib_PredeployAddresses.json":299,"../artifacts/contracts/libraries/resolver/Lib_AddressManager.sol/Lib_AddressManager.json":300,"../artifacts/contracts/libraries/resolver/Lib_AddressResolver.sol/Lib_AddressResolver.json":301,"../artifacts/contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol/Lib_ResolvedDelegateProxy.json":302,"../artifacts/contracts/libraries/rlp/Lib_RLPReader.sol/Lib_RLPReader.json":303,"../artifacts/contracts/libraries/rlp/Lib_RLPWriter.sol/Lib_RLPWriter.json":304,"../artifacts/contracts/libraries/trie/Lib_MerkleTrie.sol/Lib_MerkleTrie.json":305,"../artifacts/contracts/libraries/trie/Lib_SecureMerkleTrie.sol/Lib_SecureMerkleTrie.json":306,"../artifacts/contracts/libraries/utils/Lib_Buffer.sol/Lib_Buffer.json":307,"../artifacts/contracts/libraries/utils/Lib_Bytes32Utils.sol/Lib_Bytes32Utils.json":308,"../artifacts/contracts/libraries/utils/Lib_BytesUtils.sol/Lib_BytesUtils.json":309,"../artifacts/contracts/libraries/utils/Lib_MerkleTree.sol/Lib_MerkleTree.json":310,"../artifacts/contracts/standards/AddressAliasHelper.sol/AddressAliasHelper.json":311,"../artifacts/contracts/standards/IL2StandardERC20.sol/IL2StandardERC20.json":312,"../artifacts/contracts/standards/L2StandardERC20.sol/L2StandardERC20.json":313,"../artifacts/contracts/test-helpers/Helper_GasMeasurer.sol/Helper_GasMeasurer.json":314,"../artifacts/contracts/test-helpers/Helper_SimpleProxy.sol/Helper_SimpleProxy.json":315,"../artifacts/contracts/test-helpers/TestERC20.sol/TestERC20.json":316,"../artifacts/contracts/test-libraries/codec/TestLib_OVMCodec.sol/TestLib_OVMCodec.json":317,"../artifacts/contracts/test-libraries/rlp/TestLib_RLPReader.sol/TestLib_RLPReader.json":318,"../artifacts/contracts/test-libraries/rlp/TestLib_RLPWriter.sol/TestLib_RLPWriter.json":319,"../artifacts/contracts/test-libraries/standards/TestLib_AddressAliasHelper.sol/TestLib_AddressAliasHelper.json":320,"../artifacts/contracts/test-libraries/trie/TestLib_MerkleTrie.sol/TestLib_MerkleTrie.json":321,"../artifacts/contracts/test-libraries/trie/TestLib_SecureMerkleTrie.sol/TestLib_SecureMerkleTrie.json":322,"../artifacts/contracts/test-libraries/utils/TestLib_Buffer.sol/TestLib_Buffer.json":323,"../artifacts/contracts/test-libraries/utils/TestLib_Bytes32Utils.sol/TestLib_Bytes32Utils.json":324,"../artifacts/contracts/test-libraries/utils/TestLib_BytesUtils.sol/TestLib_BytesUtils.json":325,"../artifacts/contracts/test-libraries/utils/TestLib_MerkleTree.sol/TestLib_MerkleTree.json":326},function(){with(this)return function(){"use strict";return function(e,n,t){let a,r,s,o,i,d,c,b,f,u,l,m,h,p,y,_,g,v,L,w,T,x,M,C,E,R,A,S,O,P,I,k,N,V,B,D,H,F,U,j,z,G,q,W,X,K,Q,Y,Z,J,$,ee,ne,te,ae,re,se,oe,ie,de,ce;Object.defineProperty(t,"__esModule",{value:!0}),t.getContractArtifact=void 0;try{a=e("../artifacts/contracts/chugsplash/interfaces/iL1ChugSplashDeployer.sol/iL1ChugSplashDeployer.json")}catch(e){}try{r=e("../artifacts/contracts/chugsplash/L1ChugSplashProxy.sol/L1ChugSplashProxy.json")}catch(e){}try{s=e("../artifacts/contracts/L1/messaging/IL1CrossDomainMessenger.sol/IL1CrossDomainMessenger.json")}catch(e){}try{o=e("../artifacts/contracts/L1/messaging/IL1ERC20Bridge.sol/IL1ERC20Bridge.json")}catch(e){}try{i=e("../artifacts/contracts/L1/messaging/IL1StandardBridge.sol/IL1StandardBridge.json")}catch(e){}try{d=e("../artifacts/contracts/L1/messaging/L1CrossDomainMessenger.sol/L1CrossDomainMessenger.json")}catch(e){}try{c=e("../artifacts/contracts/L1/messaging/L1StandardBridge.sol/L1StandardBridge.json")}catch(e){}try{b=e("../artifacts/contracts/L1/rollup/CanonicalTransactionChain.sol/CanonicalTransactionChain.json")}catch(e){}try{f=e("../artifacts/contracts/L1/rollup/ChainStorageContainer.sol/ChainStorageContainer.json")}catch(e){}try{u=e("../artifacts/contracts/L1/rollup/ICanonicalTransactionChain.sol/ICanonicalTransactionChain.json")}catch(e){}try{l=e("../artifacts/contracts/L1/rollup/IChainStorageContainer.sol/IChainStorageContainer.json")}catch(e){}try{m=e("../artifacts/contracts/L1/rollup/IStateCommitmentChain.sol/IStateCommitmentChain.json")}catch(e){}try{h=e("../artifacts/contracts/L1/rollup/StateCommitmentChain.sol/StateCommitmentChain.json")}catch(e){}try{p=e("../artifacts/contracts/L1/verification/BondManager.sol/BondManager.json")}catch(e){}try{y=e("../artifacts/contracts/L1/verification/IBondManager.sol/IBondManager.json")}catch(e){}try{_=e("../artifacts/contracts/L2/messaging/IL2CrossDomainMessenger.sol/IL2CrossDomainMessenger.json")}catch(e){}try{g=e("../artifacts/contracts/L2/messaging/IL2ERC20Bridge.sol/IL2ERC20Bridge.json")}catch(e){}try{v=e("../artifacts/contracts/L2/messaging/L2CrossDomainMessenger.sol/L2CrossDomainMessenger.json")}catch(e){}try{L=e("../artifacts/contracts/L2/messaging/L2StandardBridge.sol/L2StandardBridge.json")}catch(e){}try{w=e("../artifacts/contracts/L2/messaging/L2StandardTokenFactory.sol/L2StandardTokenFactory.json")}catch(e){}try{T=e("../artifacts/contracts/L2/predeploys/iOVM_L1BlockNumber.sol/iOVM_L1BlockNumber.json")}catch(e){}try{x=e("../artifacts/contracts/L2/predeploys/iOVM_L2ToL1MessagePasser.sol/iOVM_L2ToL1MessagePasser.json")}catch(e){}try{M=e("../artifacts/contracts/L2/predeploys/OVM_DeployerWhitelist.sol/OVM_DeployerWhitelist.json")}catch(e){}try{C=e("../artifacts/contracts/L2/predeploys/OVM_ETH.sol/OVM_ETH.json")}catch(e){}try{E=e("../artifacts/contracts/L2/predeploys/OVM_GasPriceOracle.sol/OVM_GasPriceOracle.json")}catch(e){}try{R=e("../artifacts/contracts/L2/predeploys/OVM_L2ToL1MessagePasser.sol/OVM_L2ToL1MessagePasser.json")}catch(e){}try{A=e("../artifacts/contracts/L2/predeploys/OVM_SequencerFeeVault.sol/OVM_SequencerFeeVault.json")}catch(e){}try{S=e("../artifacts/contracts/L2/predeploys/WETH9.sol/WETH9.json")}catch(e){}try{O=e("../artifacts/contracts/libraries/bridge/CrossDomainEnabled.sol/CrossDomainEnabled.json")}catch(e){}try{P=e("../artifacts/contracts/libraries/bridge/ICrossDomainMessenger.sol/ICrossDomainMessenger.json")}catch(e){}try{I=e("../artifacts/contracts/libraries/bridge/Lib_CrossDomainUtils.sol/Lib_CrossDomainUtils.json")}catch(e){}try{k=e("../artifacts/contracts/libraries/codec/Lib_OVMCodec.sol/Lib_OVMCodec.json")}catch(e){}try{N=e("../artifacts/contracts/libraries/constants/Lib_DefaultValues.sol/Lib_DefaultValues.json")}catch(e){}try{V=e("../artifacts/contracts/libraries/constants/Lib_PredeployAddresses.sol/Lib_PredeployAddresses.json")}catch(e){}try{B=e("../artifacts/contracts/libraries/resolver/Lib_AddressManager.sol/Lib_AddressManager.json")}catch(e){}try{D=e("../artifacts/contracts/libraries/resolver/Lib_AddressResolver.sol/Lib_AddressResolver.json")}catch(e){}try{H=e("../artifacts/contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol/Lib_ResolvedDelegateProxy.json")}catch(e){}try{F=e("../artifacts/contracts/libraries/rlp/Lib_RLPReader.sol/Lib_RLPReader.json")}catch(e){}try{U=e("../artifacts/contracts/libraries/rlp/Lib_RLPWriter.sol/Lib_RLPWriter.json")}catch(e){}try{j=e("../artifacts/contracts/libraries/trie/Lib_MerkleTrie.sol/Lib_MerkleTrie.json")}catch(e){}try{z=e("../artifacts/contracts/libraries/trie/Lib_SecureMerkleTrie.sol/Lib_SecureMerkleTrie.json")}catch(e){}try{G=e("../artifacts/contracts/libraries/utils/Lib_Buffer.sol/Lib_Buffer.json")}catch(e){}try{q=e("../artifacts/contracts/libraries/utils/Lib_Bytes32Utils.sol/Lib_Bytes32Utils.json")}catch(e){}try{W=e("../artifacts/contracts/libraries/utils/Lib_BytesUtils.sol/Lib_BytesUtils.json")}catch(e){}try{X=e("../artifacts/contracts/libraries/utils/Lib_MerkleTree.sol/Lib_MerkleTree.json")}catch(e){}try{K=e("../artifacts/contracts/standards/AddressAliasHelper.sol/AddressAliasHelper.json")}catch(e){}try{Q=e("../artifacts/contracts/standards/IL2StandardERC20.sol/IL2StandardERC20.json")}catch(e){}try{Y=e("../artifacts/contracts/standards/L2StandardERC20.sol/L2StandardERC20.json")}catch(e){}try{Z=e("../artifacts/contracts/test-helpers/Helper_GasMeasurer.sol/Helper_GasMeasurer.json")}catch(e){}try{J=e("../artifacts/contracts/test-helpers/Helper_SimpleProxy.sol/Helper_SimpleProxy.json")}catch(e){}try{$=e("../artifacts/contracts/test-helpers/TestERC20.sol/TestERC20.json")}catch(e){}try{ee=e("../artifacts/contracts/test-libraries/codec/TestLib_OVMCodec.sol/TestLib_OVMCodec.json")}catch(e){}try{ne=e("../artifacts/contracts/test-libraries/rlp/TestLib_RLPReader.sol/TestLib_RLPReader.json")}catch(e){}try{te=e("../artifacts/contracts/test-libraries/rlp/TestLib_RLPWriter.sol/TestLib_RLPWriter.json")}catch(e){}try{ae=e("../artifacts/contracts/test-libraries/standards/TestLib_AddressAliasHelper.sol/TestLib_AddressAliasHelper.json")}catch(e){}try{re=e("../artifacts/contracts/test-libraries/trie/TestLib_MerkleTrie.sol/TestLib_MerkleTrie.json")}catch(e){}try{se=e("../artifacts/contracts/test-libraries/trie/TestLib_SecureMerkleTrie.sol/TestLib_SecureMerkleTrie.json")}catch(e){}try{oe=e("../artifacts/contracts/test-libraries/utils/TestLib_Buffer.sol/TestLib_Buffer.json")}catch(e){}try{ie=e("../artifacts/contracts/test-libraries/utils/TestLib_Bytes32Utils.sol/TestLib_Bytes32Utils.json")}catch(e){}try{de=e("../artifacts/contracts/test-libraries/utils/TestLib_BytesUtils.sol/TestLib_BytesUtils.json")}catch(e){}try{ce=e("../artifacts/contracts/test-libraries/utils/TestLib_MerkleTree.sol/TestLib_MerkleTree.json")}catch(e){}t.getContractArtifact=e=>({iL1ChugSplashDeployer:a,L1ChugSplashProxy:r,IL1CrossDomainMessenger:s,IL1ERC20Bridge:o,IL1StandardBridge:i,L1CrossDomainMessenger:d,L1StandardBridge:c,CanonicalTransactionChain:b,ChainStorageContainer:f,ICanonicalTransactionChain:u,IChainStorageContainer:l,IStateCommitmentChain:m,StateCommitmentChain:h,BondManager:p,IBondManager:y,IL2CrossDomainMessenger:_,IL2ERC20Bridge:g,L2CrossDomainMessenger:v,L2StandardBridge:L,L2StandardTokenFactory:w,iOVM_L1BlockNumber:T,iOVM_L2ToL1MessagePasser:x,OVM_DeployerWhitelist:M,OVM_ETH:C,OVM_GasPriceOracle:E,OVM_L2ToL1MessagePasser:R,OVM_SequencerFeeVault:A,WETH9:S,CrossDomainEnabled:O,ICrossDomainMessenger:P,Lib_CrossDomainUtils:I,Lib_OVMCodec:k,Lib_DefaultValues:N,Lib_PredeployAddresses:V,Lib_AddressManager:B,Lib_AddressResolver:D,Lib_ResolvedDelegateProxy:H,Lib_RLPReader:F,Lib_RLPWriter:U,Lib_MerkleTrie:j,Lib_SecureMerkleTrie:z,Lib_Buffer:G,Lib_Bytes32Utils:q,Lib_BytesUtils:W,Lib_MerkleTree:X,AddressAliasHelper:K,IL2StandardERC20:Q,L2StandardERC20:Y,Helper_GasMeasurer:Z,Helper_SimpleProxy:J,TestERC20:$,TestLib_OVMCodec:ee,TestLib_RLPReader:ne,TestLib_RLPWriter:te,TestLib_AddressAliasHelper:ae,TestLib_MerkleTrie:re,TestLib_SecureMerkleTrie:se,TestLib_Buffer:oe,TestLib_Bytes32Utils:ie,TestLib_BytesUtils:de,TestLib_MerkleTree:ce}[e])}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/dist/contract-artifacts.js"}],[365,{"./contract-artifacts":364,ethers:2545},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.loadContractFromManager=t.loadContract=t.getContractFactory=t.getContractInterface=t.getContractDefinition=void 0;const a=e("ethers");t.getContractDefinition=n=>{const{getContractArtifact:t}=e("./contract-artifacts"),a=t(n);if(a===undefined)throw new Error(`Unable to find artifact for contract: ${n}`);return a};t.getContractInterface=e=>{const n=t.getContractDefinition(e);return new a.ethers.utils.Interface(n.abi)};t.getContractFactory=(e,n)=>{const r=t.getContractDefinition(e),s=t.getContractInterface(e);return new a.ethers.ContractFactory(s,r.bytecode,n)};t.loadContract=(e,n,r)=>new a.ethers.Contract(n,t.getContractInterface(e),r);t.loadContractFromManager=async e=>{const{name:n,proxy:r,Lib_AddressManager:s,provider:o}=e,i=await s.getAddress(r||n);if(i===a.ethers.constants.AddressZero)throw new Error(`Lib_AddressManager does not have a record for a contract named: ${n}`);return t.loadContract(n,i,o)}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/dist/contract-defs.js"}],[366,{"../deployments/goerli/BondManager.json":327,"../deployments/goerli/CanonicalTransactionChain.json":328,"../deployments/goerli/ChainStorageContainer-CTC-batches.json":329,"../deployments/goerli/ChainStorageContainer-CTC-queue.json":330,"../deployments/goerli/ChainStorageContainer-SCC-batches.json":331,"../deployments/goerli/L1CrossDomainMessenger.json":332,"../deployments/goerli/Lib_AddressManager.json":333,"../deployments/goerli/Proxy__L1CrossDomainMessenger.json":334,"../deployments/goerli/Proxy__L1StandardBridge.json":335,"../deployments/goerli/StateCommitmentChain.json":336,"../deployments/kovan/BondManager.json":337,"../deployments/kovan/CanonicalTransactionChain.json":338,"../deployments/kovan/ChainStorageContainer-CTC-batches.json":339,"../deployments/kovan/ChainStorageContainer-CTC-queue.json":340,"../deployments/kovan/ChainStorageContainer-SCC-batches.json":341,"../deployments/kovan/Lib_AddressManager.json":342,"../deployments/kovan/OVM_L1CrossDomainMessenger.json":343,"../deployments/kovan/Proxy__L1CrossDomainMessenger.json":344,"../deployments/kovan/Proxy__L1StandardBridge.json":345,"../deployments/kovan/StateCommitmentChain.json":346,"../deployments/mainnet/Lib_AddressManager.json":347,"../deployments/mainnet/OVM_CanonicalTransactionChain.json":348,"../deployments/mainnet/OVM_ChainStorageContainer-CTC-batches.json":349,"../deployments/mainnet/OVM_ChainStorageContainer-CTC-queue.json":350,"../deployments/mainnet/OVM_ChainStorageContainer-SCC-batches.json":351,"../deployments/mainnet/OVM_ExecutionManager.json":352,"../deployments/mainnet/OVM_FraudVerifier.json":353,"../deployments/mainnet/OVM_L1CrossDomainMessenger.json":354,"../deployments/mainnet/OVM_L1MultiMessageRelayer.json":355,"../deployments/mainnet/OVM_SafetyChecker.json":356,"../deployments/mainnet/OVM_StateCommitmentChain.json":357,"../deployments/mainnet/OVM_StateManagerFactory.json":358,"../deployments/mainnet/OVM_StateTransitionerFactory.json":359,"../deployments/mainnet/Proxy__OVM_L1CrossDomainMessenger.json":360,"../deployments/mainnet/Proxy__OVM_L1StandardBridge.json":361,"../deployments/mainnet/mockOVM_BondManager.json":362},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getDeployedContractArtifact=void 0;const a=e("../deployments/goerli/BondManager.json"),r=e("../deployments/goerli/CanonicalTransactionChain.json"),s=e("../deployments/goerli/ChainStorageContainer-CTC-batches.json"),o=e("../deployments/goerli/ChainStorageContainer-CTC-queue.json"),i=e("../deployments/goerli/ChainStorageContainer-SCC-batches.json"),d=e("../deployments/goerli/L1CrossDomainMessenger.json"),c=e("../deployments/goerli/Lib_AddressManager.json"),b=e("../deployments/goerli/Proxy__L1CrossDomainMessenger.json"),f=e("../deployments/goerli/Proxy__L1StandardBridge.json"),u=e("../deployments/goerli/StateCommitmentChain.json"),l=e("../deployments/kovan/BondManager.json"),m=e("../deployments/kovan/CanonicalTransactionChain.json"),h=e("../deployments/kovan/ChainStorageContainer-CTC-batches.json"),p=e("../deployments/kovan/ChainStorageContainer-CTC-queue.json"),y=e("../deployments/kovan/ChainStorageContainer-SCC-batches.json"),_=e("../deployments/kovan/Lib_AddressManager.json"),g=e("../deployments/kovan/OVM_L1CrossDomainMessenger.json"),v=e("../deployments/kovan/Proxy__L1CrossDomainMessenger.json"),L=e("../deployments/kovan/Proxy__L1StandardBridge.json"),w=e("../deployments/kovan/StateCommitmentChain.json"),T=e("../deployments/mainnet/Lib_AddressManager.json"),x=e("../deployments/mainnet/mockOVM_BondManager.json"),M=e("../deployments/mainnet/OVM_CanonicalTransactionChain.json"),C=e("../deployments/mainnet/OVM_ChainStorageContainer-CTC-batches.json"),E=e("../deployments/mainnet/OVM_ChainStorageContainer-CTC-queue.json"),R=e("../deployments/mainnet/OVM_ChainStorageContainer-SCC-batches.json"),A=e("../deployments/mainnet/OVM_ExecutionManager.json"),S=e("../deployments/mainnet/OVM_FraudVerifier.json"),O=e("../deployments/mainnet/OVM_L1CrossDomainMessenger.json"),P=e("../deployments/mainnet/OVM_L1MultiMessageRelayer.json"),I=e("../deployments/mainnet/OVM_SafetyChecker.json"),k=e("../deployments/mainnet/OVM_StateCommitmentChain.json"),N=e("../deployments/mainnet/OVM_StateManagerFactory.json"),V=e("../deployments/mainnet/OVM_StateTransitionerFactory.json"),B=e("../deployments/mainnet/Proxy__OVM_L1CrossDomainMessenger.json"),D=e("../deployments/mainnet/Proxy__OVM_L1StandardBridge.json");t.getDeployedContractArtifact=(e,n)=>({goerli__BondManager:a,goerli__CanonicalTransactionChain:r,goerli__ChainStorageContainer_CTC_batches:s,goerli__ChainStorageContainer_CTC_queue:o,goerli__ChainStorageContainer_SCC_batches:i,goerli__L1CrossDomainMessenger:d,goerli__Lib_AddressManager:c,goerli__Proxy__L1CrossDomainMessenger:b,goerli__Proxy__L1StandardBridge:f,goerli__StateCommitmentChain:u,kovan__BondManager:l,kovan__CanonicalTransactionChain:m,kovan__ChainStorageContainer_CTC_batches:h,kovan__ChainStorageContainer_CTC_queue:p,kovan__ChainStorageContainer_SCC_batches:y,kovan__Lib_AddressManager:_,kovan__OVM_L1CrossDomainMessenger:g,kovan__Proxy__L1CrossDomainMessenger:v,kovan__Proxy__L1StandardBridge:L,kovan__StateCommitmentChain:w,mainnet__Lib_AddressManager:T,mainnet__mockOVM_BondManager:x,mainnet__OVM_CanonicalTransactionChain:M,mainnet__OVM_ChainStorageContainer_CTC_batches:C,mainnet__OVM_ChainStorageContainer_CTC_queue:E,mainnet__OVM_ChainStorageContainer_SCC_batches:R,mainnet__OVM_ExecutionManager:A,mainnet__OVM_FraudVerifier:S,mainnet__OVM_L1CrossDomainMessenger:O,mainnet__OVM_L1MultiMessageRelayer:P,mainnet__OVM_SafetyChecker:I,mainnet__OVM_StateCommitmentChain:k,mainnet__OVM_StateManagerFactory:N,mainnet__OVM_StateTransitionerFactory:V,mainnet__Proxy__OVM_L1CrossDomainMessenger:B,mainnet__Proxy__OVM_L1StandardBridge:D}[(n+"__"+e).replace(/-/g,"_")])}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/dist/contract-deployed-artifacts.js"}],[367,{"./connect-contracts":363,"./contract-defs":365,"./predeploys":368},function(){with(this)return function(){"use strict";return function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){a===undefined&&(a=t),Object.defineProperty(e,a,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,a){a===undefined&&(a=t),e[a]=n[t]}),r=this&&this.__exportStar||function(e,n){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(n,t)||a(n,e,t)};Object.defineProperty(t,"__esModule",{value:!0}),r(e("./contract-defs"),t),r(e("./predeploys"),t),r(e("./connect-contracts"),t)}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/dist/index.js"}],[368,{},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.predeploys=void 0,t.predeploys={OVM_L2ToL1MessagePasser:"0x4200000000000000000000000000000000000000",OVM_DeployerWhitelist:"0x4200000000000000000000000000000000000002",L2CrossDomainMessenger:"0x4200000000000000000000000000000000000007",OVM_GasPriceOracle:"0x420000000000000000000000000000000000000F",L2StandardBridge:"0x4200000000000000000000000000000000000010",OVM_SequencerFeeVault:"0x4200000000000000000000000000000000000011",L2StandardTokenFactory:"0x4200000000000000000000000000000000000012",OVM_L1BlockNumber:"0x4200000000000000000000000000000000000013",OVM_ETH:"0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",WETH9:"0x4200000000000000000000000000000000000006"}}}},{package:"@eth-optimism/contracts",file:"/home/gudahtt/projects/metamask-extension/node_modules/@eth-optimism/contracts/dist/predeploys.js"}],[369,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"calaveras",chainId:123,networkId:123,defaultHardfork:"berlin",consensus:{type:"poa",algorithm:"clique",clique:{period:30,epoch:3e4}},comment:"The Calaveras testnet chain",url:"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/calaveras.md",genesis:{hash:"0xeb9233d066c275efcdfed8037f4fc082770176aefdbcb7691c71da412a5670f2",gasLimit:"0x47b760",difficulty:"0x1",nonce:"0x0000000000000000",extraData:"0x00000000000000000000000000000000000000000000000000000000000000005211cea3870c7ba7c6c44b185e62eecdb864cd8c560228ce57d31efbf64c200b2c200aacec78cf17a7148e784fe95a7a750335f8b9572ee28d72e7650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",stateRoot:"0x664c93de37eb4a72953ea42b8c046cdb64c9f0b0bca5505ade8d970d49ebdb8c",timestamp:"0x60b3877f"},hardforks:[{name:"chainstart",block:0,forkHash:"0xe34c4aff"},{name:"homestead",block:0,forkHash:"0xe34c4aff"},{name:"dao",block:null,forkHash:"0xe34c4aff"},{name:"tangerineWhistle",block:0,forkHash:"0xe34c4aff"},{name:"spuriousDragon",block:0,forkHash:"0xe34c4aff"},{name:"byzantium",block:0,forkHash:"0xe34c4aff"},{name:"constantinople",block:0,forkHash:"0xe34c4aff"},{name:"petersburg",block:0,forkHash:"0xe34c4aff"},{name:"istanbul",block:0,forkHash:"0xe34c4aff"},{name:"berlin",block:0,forkHash:"0xe34c4aff"},{name:"london",block:500,forkHash:"0x173783e4"}],bootstrapNodes:[{ip:"3.21.156.138",port:30303,id:"39eb08bbfad87481553c471a63ff2a4b4885fffa4ff50f1cf46744d9ad6e2f764ede146fe4df563fa9ccda1a46b9b1a88fb08135e1bf1d71b320912499da773d",location:"",comment:"Calaveras bootnode 1"},{ip:"3.9.20.133",port:30303,id:"9e1096aa59862a6f164994cb5cb16f5124d6c992cdbf4535ff7dea43ea1512afe5448dca9df1b7ab0726129603f1a3336b631e4d7a1a44c94daddd03241587f9",location:"",comment:"Calaveras bootnode 2"}]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/calaveras.json"}],[370,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"goerli",chainId:5,networkId:5,defaultHardfork:"istanbul",consensus:{type:"poa",algorithm:"clique",clique:{period:15,epoch:3e4}},comment:"Cross-client PoA test network",url:"https://github.com/goerli/testnet",genesis:{hash:"0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a",timestamp:"0x5c51a607",gasLimit:10485760,difficulty:1,nonce:"0x0000000000000000",extraData:"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",stateRoot:"0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"},hardforks:[{name:"chainstart",block:0,forkHash:"0xa3f5ab08"},{name:"homestead",block:0,forkHash:"0xa3f5ab08"},{name:"dao",block:null,forkHash:"0xa3f5ab08"},{name:"tangerineWhistle",block:0,forkHash:"0xa3f5ab08"},{name:"spuriousDragon",block:0,forkHash:"0xa3f5ab08"},{name:"byzantium",block:0,forkHash:"0xa3f5ab08"},{name:"constantinople",block:0,forkHash:"0xa3f5ab08"},{name:"petersburg",block:0,forkHash:"0xa3f5ab08"},{name:"istanbul",block:1561651,forkHash:"0xc25efa5c"},{name:"berlin",block:4460644,forkHash:"0x757a1c47"},{name:"london",block:5062605,forkHash:"0xb8c6299d"}],bootstrapNodes:[{ip:"51.141.78.53",port:30303,id:"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",location:"",comment:"Upstream bootnode 1"},{ip:"13.93.54.137",port:30303,id:"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",location:"",comment:"Upstream bootnode 2"},{ip:"94.237.54.114",port:30313,id:"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",location:"",comment:"Upstream bootnode 3"},{ip:"18.218.250.66",port:30313,id:"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",location:"",comment:"Upstream bootnode 4"},{ip:"3.11.147.67",port:30303,id:"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",location:"",comment:"Ethereum Foundation bootnode"},{ip:"51.15.116.226",port:30303,id:"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",location:"",comment:"Goerli Initiative bootnode"},{ip:"51.15.119.157",port:30303,id:"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",location:"",comment:"Goerli Initiative bootnode"},{ip:"51.15.119.157",port:40303,id:"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",location:"",comment:"Goerli Initiative bootnode"}],dnsNetworks:["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/goerli.json"}],[371,{"./calaveras.json":369,"./goerli.json":370,"./kovan.json":372,"./mainnet.json":373,"./rinkeby.json":374,"./ropsten.json":375},function(){with(this)return function(){"use strict";return function(e,n,t){var a=this&&this.__values||function(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],a=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&a>=e.length&&(e=void 0),{value:e&&e[a++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.chains=t._getInitializedChains=void 0;var s=r(e("./mainnet.json")),o=r(e("./ropsten.json")),i=r(e("./rinkeby.json")),d=r(e("./kovan.json")),c=r(e("./goerli.json")),b=r(e("./calaveras.json"));function f(e){var n,t,r={1:"mainnet",3:"ropsten",4:"rinkeby",42:"kovan",5:"goerli",123:"calaveras"},f={mainnet:s.default,ropsten:o.default,rinkeby:i.default,kovan:d.default,goerli:c.default,calaveras:b.default};if(e)try{for(var u=a(e),l=u.next();!l.done;l=u.next()){var m=l.value,h=m.name;r[m.chainId.toString()]=h,f[h]=m}}catch(e){n={error:e}}finally{try{l&&!l.done&&(t=u.return)&&t.call(u)}finally{if(n)throw n.error}}return f.names=r,f}t._getInitializedChains=f,t.chains=f()}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/index.js"}],[372,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"kovan",chainId:42,networkId:42,defaultHardfork:"istanbul",consensus:{type:"poa",algorithm:"aura",aura:{}},comment:"Parity PoA test network",url:"https://kovan-testnet.github.io/website/",genesis:{hash:"0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9",timestamp:null,gasLimit:6e6,difficulty:131072,nonce:"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",extraData:"0x",stateRoot:"0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"},hardforks:[{name:"chainstart",block:0,forkHash:"0x010ffe56"},{name:"homestead",block:0,forkHash:"0x010ffe56"},{name:"dao",block:null,forkHash:"0x010ffe56"},{name:"tangerineWhistle",block:0,forkHash:"0x010ffe56"},{name:"spuriousDragon",block:0,forkHash:"0x010ffe56"},{name:"byzantium",block:5067e3,forkHash:"0x7f83c620"},{name:"constantinople",block:92e5,forkHash:"0xa94e3dc4"},{name:"petersburg",block:10255201,forkHash:"0x186874aa"},{name:"istanbul",block:14111141,forkHash:"0x7f6599a6"},{name:"berlin",block:null,forkHash:null},{name:"london",block:null,forkHash:null}],bootstrapNodes:[{ip:"116.203.116.241",port:30303,id:"16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45",location:"",comment:"1"},{ip:"3.217.96.11",port:30303,id:"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",location:"",comment:"2"},{ip:"108.61.170.124",port:30303,id:"740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c",location:"",comment:"3"},{ip:"157.230.31.163",port:30303,id:"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0",location:"",comment:"4"}]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/kovan.json"}],[373,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"mainnet",chainId:1,networkId:1,defaultHardfork:"istanbul",consensus:{type:"pow",algorithm:"ethash",ethash:{}},comment:"The Ethereum main chain",url:"https://ethstats.net/",genesis:{hash:"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",timestamp:null,gasLimit:5e3,difficulty:17179869184,nonce:"0x0000000000000042",extraData:"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",stateRoot:"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"},hardforks:[{name:"chainstart",block:0,forkHash:"0xfc64ec04"},{name:"homestead",block:115e4,forkHash:"0x97c2c34c"},{name:"dao",block:192e4,forkHash:"0x91d1f948"},{name:"tangerineWhistle",block:2463e3,forkHash:"0x7a64da13"},{name:"spuriousDragon",block:2675e3,forkHash:"0x3edd5b10"},{name:"byzantium",block:437e4,forkHash:"0xa00bc324"},{name:"constantinople",block:728e4,forkHash:"0x668db0af"},{name:"petersburg",block:728e4,forkHash:"0x668db0af"},{name:"istanbul",block:9069e3,forkHash:"0x879d6e30"},{name:"muirGlacier",block:92e5,forkHash:"0xe029e991"},{name:"berlin",block:12244e3,forkHash:"0x0eb440f6"},{name:"london",block:12965e3,forkHash:"0xb715077d"}],bootstrapNodes:[{ip:"18.138.108.67",port:30303,id:"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",location:"ap-southeast-1-001",comment:"bootnode-aws-ap-southeast-1-001"},{ip:"3.209.45.79",port:30303,id:"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",location:"us-east-1-001",comment:"bootnode-aws-us-east-1-001"},{ip:"34.255.23.113",port:30303,id:"ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758",location:"eu-west-1-001",comment:"bootnode-aws-eu-west-1-001"},{ip:"35.158.244.151",port:30303,id:"279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8",location:"eu-central-1-001",comment:"bootnode-aws-eu-central-1-001"},{ip:"52.187.207.27",port:30303,id:"8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a",location:"australiaeast-001",comment:"bootnode-azure-australiaeast-001"},{ip:"191.234.162.198",port:30303,id:"103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1",location:"brazilsouth-001",comment:"bootnode-azure-brazilsouth-001"},{ip:"52.231.165.108",port:30303,id:"715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8",location:"koreasouth-001",comment:"bootnode-azure-koreasouth-001"},{ip:"104.42.217.25",port:30303,id:"5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f",location:"westus-001",comment:"bootnode-azure-westus-001"}],dnsNetworks:["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/mainnet.json"}],[374,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"rinkeby",chainId:4,networkId:4,defaultHardfork:"istanbul",consensus:{type:"poa",algorithm:"clique",clique:{period:15,epoch:3e4}},comment:"PoA test network",url:"https://www.rinkeby.io",genesis:{hash:"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177",timestamp:"0x58ee40ba",gasLimit:47e5,difficulty:1,nonce:"0x0000000000000000",extraData:"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",stateRoot:"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"},hardforks:[{name:"chainstart",block:0,forkHash:"0x3b8e0691"},{name:"homestead",block:1,forkHash:"0x60949295"},{name:"dao",block:null,forkHash:null},{name:"tangerineWhistle",block:2,forkHash:"0x8bde40dd"},{name:"spuriousDragon",block:3,forkHash:"0xcb3a64bb"},{name:"byzantium",block:1035301,forkHash:"0x8d748b57"},{name:"constantinople",block:3660663,forkHash:"0xe49cab14"},{name:"petersburg",block:4321234,forkHash:"0xafec6b27"},{name:"istanbul",block:5435345,forkHash:"0xcbdb8838"},{name:"berlin",block:8290928,forkHash:"0x6910c8bd"},{name:"london",block:8897988,forkHash:"0x8e29f2f3"}],bootstrapNodes:[{ip:"52.169.42.101",port:30303,id:"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",location:"",comment:"IE"},{ip:"52.3.158.184",port:30303,id:"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",location:"",comment:"INFURA"},{ip:"159.89.28.211",port:30303,id:"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",location:"",comment:"AKASHA"}],dnsNetworks:["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/rinkeby.json"}],[375,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"ropsten",chainId:3,networkId:3,defaultHardfork:"istanbul",consensus:{type:"pow",algorithm:"ethash",ethash:{}},comment:"PoW test network",url:"https://github.com/ethereum/ropsten",genesis:{hash:"0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d",timestamp:null,gasLimit:16777216,difficulty:1048576,nonce:"0x0000000000000042",extraData:"0x3535353535353535353535353535353535353535353535353535353535353535",stateRoot:"0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"},hardforks:[{name:"chainstart",block:0,forkHash:"0x30c7ddbc"},{name:"homestead",block:0,forkHash:"0x30c7ddbc"},{name:"dao",block:null,forkHash:null},{name:"tangerineWhistle",block:0,forkHash:"0x30c7ddbc"},{name:"spuriousDragon",block:10,forkHash:"0x63760190"},{name:"byzantium",block:17e5,forkHash:"0x3ea159c7"},{name:"constantinople",block:423e4,forkHash:"0x97b544f3"},{name:"petersburg",block:4939394,forkHash:"0xd6e2149b"},{name:"istanbul",block:6485846,forkHash:"0x4bc66396"},{name:"muirGlacier",block:7117117,forkHash:"0x6727ef90"},{name:"berlin",block:9812189,forkHash:"0xa157d377"},{name:"london",block:10499401,forkHash:"0x7119b6b3"}],bootstrapNodes:[{ip:"52.176.7.10",port:30303,id:"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",location:"",comment:"US-Azure geth"},{ip:"52.176.100.77",port:30303,id:"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",location:"",comment:"US-Azure parity"},{ip:"52.232.243.152",port:30303,id:"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",location:"",comment:"Parity"},{ip:"192.81.208.223",port:30303,id:"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",location:"",comment:"@gpip"}],dnsNetworks:["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/chains/ropsten.json"}],[376,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-1559",number:1559,comment:"Fee market change for ETH 1.0 chain",url:"https://eips.ethereum.org/EIPS/eip-1559",status:"Review",minimumHardfork:"berlin",requiredEIPs:[2930],gasConfig:{baseFeeMaxChangeDenominator:{v:8,d:"Maximum base fee change denominator"},elasticityMultiplier:{v:2,d:"Maximum block gas target elasticity"},initialBaseFee:{v:1e9,d:"Initial base fee on first EIP1559 block"}},gasPrices:{},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/1559.json"}],[377,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-2315",number:2315,comment:"Simple subroutines for the EVM",url:"https://eips.ethereum.org/EIPS/eip-2315",status:"Draft",minimumHardfork:"istanbul",gasConfig:{},gasPrices:{beginsub:{v:2,d:"Base fee of the BEGINSUB opcode"},returnsub:{v:5,d:"Base fee of the RETURNSUB opcode"},jumpsub:{v:10,d:"Base fee of the JUMPSUB opcode"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/2315.json"}],[378,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-2537",number:2537,comment:"BLS12-381 precompiles",url:"https://eips.ethereum.org/EIPS/eip-2537",status:"Draft",minimumHardfork:"chainstart",gasConfig:{},gasPrices:{Bls12381G1AddGas:{v:600,d:"Gas cost of a single BLS12-381 G1 addition precompile-call"},Bls12381G1MulGas:{v:12e3,d:"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},Bls12381G2AddGas:{v:4500,d:"Gas cost of a single BLS12-381 G2 addition precompile-call"},Bls12381G2MulGas:{v:55e3,d:"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},Bls12381PairingBaseGas:{v:115e3,d:"Base gas cost of BLS12-381 pairing check"},Bls12381PairingPerPairGas:{v:23e3,d:"Per-pair gas cost of BLS12-381 pairing check"},Bls12381MapG1Gas:{v:5500,d:"Gas cost of BLS12-381 map field element to G1"},Bls12381MapG2Gas:{v:11e4,d:"Gas cost of BLS12-381 map field element to G2"},Bls12381MultiExpGasDiscount:{v:[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],d:"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/2537.json"}],[379,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-2565",number:2565,comment:"ModExp gas cost",url:"https://eips.ethereum.org/EIPS/eip-2565",status:"Last call",minimumHardfork:"byzantium",gasConfig:{},gasPrices:{modexpGquaddivisor:{v:3,d:"Gquaddivisor from modexp precompile for gas calculation"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/2565.json"}],[380,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-2718",comment:"Typed Transaction Envelope",url:"https://eips.ethereum.org/EIPS/eip-2718",status:"Draft",minimumHardfork:"chainstart",gasConfig:{},gasPrices:{},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/2718.json"}],[381,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-2929",comment:"Gas cost increases for state access opcodes",url:"https://eips.ethereum.org/EIPS/eip-2929",status:"Draft",minimumHardfork:"chainstart",gasConfig:{},gasPrices:{coldsload:{v:2100,d:"Gas cost of the first read of storage from a given location (per transaction)"},coldaccountaccess:{v:2600,d:"Gas cost of the first read of a given address (per transaction)"},warmstorageread:{v:100,d:"Gas cost of reading storage locations which have already loaded 'cold'"},sstoreCleanGasEIP2200:{v:2900,d:"Once per SSTORE operation from clean non-zero to something else"},sstoreNoopGasEIP2200:{v:100,d:"Once per SSTORE operation if the value doesn't change"},sstoreDirtyGasEIP2200:{v:100,d:"Once per SSTORE operation if a dirty value is changed"},sstoreInitRefundEIP2200:{v:19900,d:"Once per SSTORE operation for resetting to the original zero value"},sstoreCleanRefundEIP2200:{v:4900,d:"Once per SSTORE operation for resetting to the original non-zero value"},call:{v:0,d:"Base fee of the CALL opcode"},callcode:{v:0,d:"Base fee of the CALLCODE opcode"},delegatecall:{v:0,d:"Base fee of the DELEGATECALL opcode"},staticcall:{v:0,d:"Base fee of the STATICCALL opcode"},balance:{v:0,d:"Base fee of the BALANCE opcode"},extcodesize:{v:0,d:"Base fee of the EXTCODESIZE opcode"},extcodecopy:{v:0,d:"Base fee of the EXTCODECOPY opcode"},extcodehash:{v:0,d:"Base fee of the EXTCODEHASH opcode"},sload:{v:0,d:"Base fee of the SLOAD opcode"},sstore:{v:0,d:"Base fee of the SSTORE opcode"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/2929.json"}],[382,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-2930",comment:"Optional access lists",url:"https://eips.ethereum.org/EIPS/eip-2930",status:"Draft",minimumHardfork:"istanbul",requiredEIPs:[2718,2929],gasConfig:{},gasPrices:{accessListStorageKeyCost:{v:1900,d:"Gas cost per storage key in an Access List transaction"},accessListAddressCost:{v:2400,d:"Gas cost per storage key in an Access List transaction"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/2930.json"}],[383,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-3198",number:3198,comment:"BASEFEE opcode",url:"https://eips.ethereum.org/EIPS/eip-3198",status:"Review",minimumHardfork:"london",gasConfig:{},gasPrices:{basefee:{v:2,d:"Gas cost of the BASEFEE opcode"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/3198.json"}],[384,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-3529",comment:"Reduction in refunds",url:"https://eips.ethereum.org/EIPS/eip-3529",status:"Draft",minimumHardfork:"berlin",requiredEIPs:[2929],gasConfig:{maxRefundQuotient:{v:5,d:"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},gasPrices:{selfdestructRefund:{v:0,d:"Refunded following a selfdestruct operation"},sstoreClearRefundEIP2200:{v:4800,d:"Once per SSTORE operation for clearing an originally existing storage slot"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/3529.json"}],[385,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-3541",comment:"Reject new contracts starting with the 0xEF byte",url:"https://eips.ethereum.org/EIPS/eip-3541",status:"Draft",minimumHardfork:"berlin",requiredEIPs:[],gasConfig:{},gasPrices:{},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/3541.json"}],[386,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"EIP-3554",comment:"Reduction in refunds",url:"Difficulty Bomb Delay to December 1st 2021",status:"Draft",minimumHardfork:"muirGlacier",requiredEIPs:[],gasConfig:{},gasPrices:{},vm:{},pow:{difficultyBombDelay:{v:95e5,d:"the amount of blocks to delay the difficulty bomb with"}}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/3554.json"}],[387,{"./1559.json":376,"./2315.json":377,"./2537.json":378,"./2565.json":379,"./2718.json":380,"./2929.json":381,"./2930.json":382,"./3198.json":383,"./3529.json":384,"./3541.json":385,"./3554.json":386},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.EIPs=void 0,t.EIPs={1559:e("./1559.json"),2315:e("./2315.json"),2537:e("./2537.json"),2565:e("./2565.json"),2718:e("./2718.json"),2929:e("./2929.json"),2930:e("./2930.json"),3198:e("./3198.json"),3529:e("./3529.json"),3541:e("./3541.json"),3554:e("./3554.json")}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/eips/index.js"}],[388,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"berlin",comment:"HF targeted for July 2020 following the Muir Glacier HF",url:"https://eips.ethereum.org/EIPS/eip-2070",status:"Draft",eips:[2565,2929,2718,2930]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/berlin.json"}],[389,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"byzantium",comment:"Hardfork with new precompiles, instructions and other protocol changes",url:"https://eips.ethereum.org/EIPS/eip-609",status:"Final",gasConfig:{},gasPrices:{modexpGquaddivisor:{v:20,d:"Gquaddivisor from modexp precompile for gas calculation"},ecAdd:{v:500,d:"Gas costs for curve addition precompile"},ecMul:{v:4e4,d:"Gas costs for curve multiplication precompile"},ecPairing:{v:1e5,d:"Base gas costs for curve pairing precompile"},ecPairingWord:{v:8e4,d:"Gas costs regarding curve pairing precompile input length"},revert:{v:0,d:"Base fee of the REVERT opcode"},staticcall:{v:700,d:"Base fee of the STATICCALL opcode"},returndatasize:{v:2,d:"Base fee of the RETURNDATASIZE opcode"},returndatacopy:{v:3,d:"Base fee of the RETURNDATACOPY opcode"}},vm:{},pow:{minerReward:{v:"3000000000000000000",d:"the amount a miner get rewarded for mining a block"},difficultyBombDelay:{v:3e6,d:"the amount of blocks to delay the difficulty bomb with"}}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/byzantium.json"}],[390,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"chainstart",comment:"Start of the Ethereum main chain",url:"",status:"",gasConfig:{minGasLimit:{v:5e3,d:"Minimum the gas limit may ever be"},gasLimitBoundDivisor:{v:1024,d:"The bound divisor of the gas limit, used in update calculations"},maxRefundQuotient:{v:2,d:"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},gasPrices:{base:{v:2,d:"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},tierStep:{v:[0,2,3,5,8,10,20],d:"Once per operation, for a selection of them"},exp:{v:10,d:"Base fee of the EXP opcode"},expByte:{v:10,d:"Times ceil(log256(exponent)) for the EXP instruction"},sha3:{v:30,d:"Base fee of the SHA3 opcode"},sha3Word:{v:6,d:"Once per word of the SHA3 operation's data"},sload:{v:50,d:"Base fee of the SLOAD opcode"},sstoreSet:{v:2e4,d:"Once per SSTORE operation if the zeroness changes from zero"},sstoreReset:{v:5e3,d:"Once per SSTORE operation if the zeroness does not change from zero"},sstoreRefund:{v:15e3,d:"Once per SSTORE operation if the zeroness changes to zero"},jumpdest:{v:1,d:"Base fee of the JUMPDEST opcode"},log:{v:375,d:"Base fee of the LOG opcode"},logData:{v:8,d:"Per byte in a LOG* operation's data"},logTopic:{v:375,d:"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},create:{v:32e3,d:"Base fee of the CREATE opcode"},call:{v:40,d:"Base fee of the CALL opcode"},callStipend:{v:2300,d:"Free gas given at beginning of call"},callValueTransfer:{v:9e3,d:"Paid for CALL when the value transfor is non-zero"},callNewAccount:{v:25e3,d:"Paid for CALL when the destination address didn't exist prior"},selfdestructRefund:{v:24e3,d:"Refunded following a selfdestruct operation"},memory:{v:3,d:"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},quadCoeffDiv:{v:512,d:"Divisor for the quadratic particle of the memory cost equation"},createData:{v:200,d:""},tx:{v:21e3,d:"Per transaction. NOTE: Not payable on data of calls between transactions"},txCreation:{v:32e3,d:"The cost of creating a contract via tx"},txDataZero:{v:4,d:"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},txDataNonZero:{v:68,d:"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},copy:{v:3,d:"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},ecRecover:{v:3e3,d:""},sha256:{v:60,d:""},sha256Word:{v:12,d:""},ripemd160:{v:600,d:""},ripemd160Word:{v:120,d:""},identity:{v:15,d:""},identityWord:{v:3,d:""},stop:{v:0,d:"Base fee of the STOP opcode"},add:{v:3,d:"Base fee of the ADD opcode"},mul:{v:5,d:"Base fee of the MUL opcode"},sub:{v:3,d:"Base fee of the SUB opcode"},div:{v:5,d:"Base fee of the DIV opcode"},sdiv:{v:5,d:"Base fee of the SDIV opcode"},mod:{v:5,d:"Base fee of the MOD opcode"},smod:{v:5,d:"Base fee of the SMOD opcode"},addmod:{v:8,d:"Base fee of the ADDMOD opcode"},mulmod:{v:8,d:"Base fee of the MULMOD opcode"},signextend:{v:5,d:"Base fee of the SIGNEXTEND opcode"},lt:{v:3,d:"Base fee of the LT opcode"},gt:{v:3,d:"Base fee of the GT opcode"},slt:{v:3,d:"Base fee of the SLT opcode"},sgt:{v:3,d:"Base fee of the SGT opcode"},eq:{v:3,d:"Base fee of the EQ opcode"},iszero:{v:3,d:"Base fee of the ISZERO opcode"},and:{v:3,d:"Base fee of the AND opcode"},or:{v:3,d:"Base fee of the OR opcode"},xor:{v:3,d:"Base fee of the XOR opcode"},not:{v:3,d:"Base fee of the NOT opcode"},byte:{v:3,d:"Base fee of the BYTE opcode"},address:{v:2,d:"Base fee of the ADDRESS opcode"},balance:{v:20,d:"Base fee of the BALANCE opcode"},origin:{v:2,d:"Base fee of the ORIGIN opcode"},caller:{v:2,d:"Base fee of the CALLER opcode"},callvalue:{v:2,d:"Base fee of the CALLVALUE opcode"},calldataload:{v:3,d:"Base fee of the CALLDATALOAD opcode"},calldatasize:{v:2,d:"Base fee of the CALLDATASIZE opcode"},calldatacopy:{v:3,d:"Base fee of the CALLDATACOPY opcode"},codesize:{v:2,d:"Base fee of the CODESIZE opcode"},codecopy:{v:3,d:"Base fee of the CODECOPY opcode"},gasprice:{v:2,d:"Base fee of the GASPRICE opcode"},extcodesize:{v:20,d:"Base fee of the EXTCODESIZE opcode"},extcodecopy:{v:20,d:"Base fee of the EXTCODECOPY opcode"},blockhash:{v:20,d:"Base fee of the BLOCKHASH opcode"},coinbase:{v:2,d:"Base fee of the COINBASE opcode"},timestamp:{v:2,d:"Base fee of the TIMESTAMP opcode"},number:{v:2,d:"Base fee of the NUMBER opcode"},difficulty:{v:2,d:"Base fee of the DIFFICULTY opcode"},gaslimit:{v:2,d:"Base fee of the GASLIMIT opcode"},pop:{v:2,d:"Base fee of the POP opcode"},mload:{v:3,d:"Base fee of the MLOAD opcode"},mstore:{v:3,d:"Base fee of the MSTORE opcode"},mstore8:{v:3,d:"Base fee of the MSTORE8 opcode"},sstore:{v:0,d:"Base fee of the SSTORE opcode"},jump:{v:8,d:"Base fee of the JUMP opcode"},jumpi:{v:10,d:"Base fee of the JUMPI opcode"},pc:{v:2,d:"Base fee of the PC opcode"},msize:{v:2,d:"Base fee of the MSIZE opcode"},gas:{v:2,d:"Base fee of the GAS opcode"},push:{v:3,d:"Base fee of the PUSH opcode"},dup:{v:3,d:"Base fee of the DUP opcode"},swap:{v:3,d:"Base fee of the SWAP opcode"},callcode:{v:40,d:"Base fee of the CALLCODE opcode"},return:{v:0,d:"Base fee of the RETURN opcode"},invalid:{v:0,d:"Base fee of the INVALID opcode"},selfdestruct:{v:0,d:"Base fee of the SELFDESTRUCT opcode"}},vm:{stackLimit:{v:1024,d:"Maximum size of VM stack allowed"},callCreateDepth:{v:1024,d:"Maximum depth of call/create stack"},maxExtraDataSize:{v:32,d:"Maximum size extra data may be after Genesis"}},pow:{minimumDifficulty:{v:131072,d:"The minimum that the difficulty may ever be"},difficultyBoundDivisor:{v:2048,d:"The bound divisor of the difficulty, used in the update calculations"},durationLimit:{v:13,d:"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},epochDuration:{v:3e4,d:"Duration between proof-of-work epochs"},timebombPeriod:{v:1e5,d:"Exponential difficulty timebomb period"},minerReward:{v:"5000000000000000000",d:"the amount a miner get rewarded for mining a block"},difficultyBombDelay:{v:0,d:"the amount of blocks to delay the difficulty bomb with"}}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/chainstart.json"}],[391,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"constantinople",comment:"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",url:"https://eips.ethereum.org/EIPS/eip-1013",status:"Final",gasConfig:{},gasPrices:{netSstoreNoopGas:{v:200,d:"Once per SSTORE operation if the value doesn't change"},netSstoreInitGas:{v:2e4,d:"Once per SSTORE operation from clean zero"},netSstoreCleanGas:{v:5e3,d:"Once per SSTORE operation from clean non-zero"},netSstoreDirtyGas:{v:200,d:"Once per SSTORE operation from dirty"},netSstoreClearRefund:{v:15e3,d:"Once per SSTORE operation for clearing an originally existing storage slot"},netSstoreResetRefund:{v:4800,d:"Once per SSTORE operation for resetting to the original non-zero value"},netSstoreResetClearRefund:{v:19800,d:"Once per SSTORE operation for resetting to the original zero value"},shl:{v:3,d:"Base fee of the SHL opcode"},shr:{v:3,d:"Base fee of the SHR opcode"},sar:{v:3,d:"Base fee of the SAR opcode"},extcodehash:{v:400,d:"Base fee of the EXTCODEHASH opcode"},create2:{v:32e3,d:"Base fee of the CREATE2 opcode"}},vm:{},pow:{minerReward:{v:"2000000000000000000",d:"The amount a miner gets rewarded for mining a block"},difficultyBombDelay:{v:5e6,d:"the amount of blocks to delay the difficulty bomb with"}}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/constantinople.json"}],[392,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"dao",comment:"DAO rescue hardfork",url:"https://eips.ethereum.org/EIPS/eip-779",status:"Final",gasConfig:{},gasPrices:{},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/dao.json"}],[393,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"homestead",comment:"Homestead hardfork with protocol and network changes",url:"https://eips.ethereum.org/EIPS/eip-606",status:"Final",gasConfig:{},gasPrices:{delegatecall:{v:40,d:"Base fee of the DELEGATECALL opcode"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/homestead.json"}],[394,{"./berlin.json":388,"./byzantium.json":389,"./chainstart.json":390,"./constantinople.json":391,"./dao.json":392,"./homestead.json":393,"./istanbul.json":395,"./london.json":396,"./muirGlacier.json":397,"./petersburg.json":398,"./spuriousDragon.json":399,"./tangerineWhistle.json":400},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.hardforks=void 0,t.hardforks=[["chainstart",e("./chainstart.json")],["homestead",e("./homestead.json")],["dao",e("./dao.json")],["tangerineWhistle",e("./tangerineWhistle.json")],["spuriousDragon",e("./spuriousDragon.json")],["byzantium",e("./byzantium.json")],["constantinople",e("./constantinople.json")],["petersburg",e("./petersburg.json")],["istanbul",e("./istanbul.json")],["muirGlacier",e("./muirGlacier.json")],["berlin",e("./berlin.json")],["london",e("./london.json")]]}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/index.js"}],[395,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"istanbul",comment:"HF targeted for December 2019 following the Constantinople/Petersburg HF",url:"https://eips.ethereum.org/EIPS/eip-1679",status:"Draft",gasConfig:{},gasPrices:{blake2Round:{v:1,d:"Gas cost per round for the Blake2 F precompile"},ecAdd:{v:150,d:"Gas costs for curve addition precompile"},ecMul:{v:6e3,d:"Gas costs for curve multiplication precompile"},ecPairing:{v:45e3,d:"Base gas costs for curve pairing precompile"},ecPairingWord:{v:34e3,d:"Gas costs regarding curve pairing precompile input length"},txDataNonZero:{v:16,d:"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},sstoreSentryGasEIP2200:{v:2300,d:"Minimum gas required to be present for an SSTORE call, not consumed"},sstoreNoopGasEIP2200:{v:800,d:"Once per SSTORE operation if the value doesn't change"},sstoreDirtyGasEIP2200:{v:800,d:"Once per SSTORE operation if a dirty value is changed"},sstoreInitGasEIP2200:{v:2e4,d:"Once per SSTORE operation from clean zero to non-zero"},sstoreInitRefundEIP2200:{v:19200,d:"Once per SSTORE operation for resetting to the original zero value"},sstoreCleanGasEIP2200:{v:5e3,d:"Once per SSTORE operation from clean non-zero to something else"},sstoreCleanRefundEIP2200:{v:4200,d:"Once per SSTORE operation for resetting to the original non-zero value"},sstoreClearRefundEIP2200:{v:15e3,d:"Once per SSTORE operation for clearing an originally existing storage slot"},balance:{v:700,d:"Base fee of the BALANCE opcode"},extcodehash:{v:700,d:"Base fee of the EXTCODEHASH opcode"},chainid:{v:2,d:"Base fee of the CHAINID opcode"},selfbalance:{v:5,d:"Base fee of the SELFBALANCE opcode"},sload:{v:800,d:"Base fee of the SLOAD opcode"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/istanbul.json"}],[396,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"london",comment:"HF targeted for July 2021 following the Berlin fork",url:"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",status:"Draft",eips:[1559,3198,3529,3541]}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/london.json"}],[397,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"muirGlacier",comment:"HF to delay the difficulty bomb",url:"https://eips.ethereum.org/EIPS/eip-2384",status:"Final",gasConfig:{},gasPrices:{},vm:{},pow:{difficultyBombDelay:{v:9e6,d:"the amount of blocks to delay the difficulty bomb with"}}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/muirGlacier.json"}],[398,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"petersburg",comment:"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",url:"https://eips.ethereum.org/EIPS/eip-1716",status:"Draft",gasConfig:{},gasPrices:{netSstoreNoopGas:{v:null,d:"Removed along EIP-1283"},netSstoreInitGas:{v:null,d:"Removed along EIP-1283"},netSstoreCleanGas:{v:null,d:"Removed along EIP-1283"},netSstoreDirtyGas:{v:null,d:"Removed along EIP-1283"},netSstoreClearRefund:{v:null,d:"Removed along EIP-1283"},netSstoreResetRefund:{v:null,d:"Removed along EIP-1283"},netSstoreResetClearRefund:{v:null,d:"Removed along EIP-1283"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/petersburg.json"}],[399,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"spuriousDragon",comment:"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",url:"https://eips.ethereum.org/EIPS/eip-607",status:"Final",gasConfig:{},gasPrices:{expByte:{v:50,d:"Times ceil(log256(exponent)) for the EXP instruction"}},vm:{maxCodeSize:{v:24576,d:"Maximum length of contract code"}},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/spuriousDragon.json"}],[400,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports={name:"tangerineWhistle",comment:"Hardfork with gas cost changes for IO-heavy operations",url:"https://eips.ethereum.org/EIPS/eip-608",status:"Final",gasConfig:{},gasPrices:{sload:{v:200,d:"Once per SLOAD operation"},call:{v:700,d:"Once per CALL operation & message call transaction"},extcodesize:{v:700,d:"Base fee of the EXTCODESIZE opcode"},extcodecopy:{v:700,d:"Base fee of the EXTCODECOPY opcode"},balance:{v:400,d:"Base fee of the BALANCE opcode"},delegatecall:{v:700,d:"Base fee of the DELEGATECALL opcode"},callcode:{v:700,d:"Base fee of the CALLCODE opcode"},selfdestruct:{v:5e3,d:"Base fee of the SELFDESTRUCT opcode"}},vm:{},pow:{}}}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/hardforks/tangerineWhistle.json"}],[401,{"./chains":371,"./eips":387,"./hardforks":394,buffer:2081,"crc-32":2156,"ethereumjs-util":2521,events:2082},function(){with(this)return function(){"use strict";return function(e,n,t){(function(n){(function(){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},a(e,n)},function(e,n){function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var n,t=1,a=arguments.length;t<a;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},s.apply(this,arguments)},o=this&&this.__values||function(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],a=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&a>=e.length&&(e=void 0),{value:e&&e[a++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.Hardfork=t.Chain=t.CustomChain=void 0;var i,d,c=e("events"),b=e("crc-32"),f=e("ethereumjs-util"),u=e("./chains"),l=e("./hardforks"),m=e("./eips");!function(e){e.PolygonMainnet="polygon-mainnet",e.PolygonMumbai="polygon-mumbai",e.ArbitrumRinkebyTestnet="arbitrum-rinkeby-testnet",e.xDaiChain="x-dai-chain"}(i=t.CustomChain||(t.CustomChain={})),function(e){e[e.Mainnet=1]="Mainnet",e[e.Ropsten=3]="Ropsten",e[e.Rinkeby=4]="Rinkeby",e[e.Kovan=42]="Kovan",e[e.Goerli=5]="Goerli",e[e.Calaveras=123]="Calaveras"}(t.Chain||(t.Chain={})),function(e){e.Chainstart="chainstart",e.Homestead="homestead",e.Dao="dao",e.TangerineWhistle="tangerineWhistle",e.SpuriousDragon="spuriousDragon",e.Byzantium="byzantium",e.Constantinople="constantinople",e.Petersburg="petersburg",e.Istanbul="istanbul",e.MuirGlacier="muirGlacier",e.Berlin="berlin",e.London="london"}(d=t.Hardfork||(t.Hardfork={}));var h=function(e){function t(n){var t,a,r=e.call(this)||this;return r._supportedHardforks=[],r._eips=[],r._customChains=null!==(t=n.customChains)&&void 0!==t?t:[],r._chainParams=r.setChain(n.chain),r.DEFAULT_HARDFORK=null!==(a=r._chainParams.defaultHardfork)&&void 0!==a?a:d.Istanbul,r._hardfork=r.DEFAULT_HARDFORK,n.supportedHardforks&&(r._supportedHardforks=n.supportedHardforks),n.hardfork&&r.setHardfork(n.hardfork),n.eips&&r.setEIPs(n.eips),r}return r(t,e),t.custom=function(e,n){var a;void 0===n&&(n={});var r=null!==(a=n.baseChain)&&void 0!==a?a:"mainnet",o=s({},t._getChainParams(r));if(o.name="custom-chain","string"!=typeof e)return new t(s({chain:s(s({},o),e)},n));if(e===i.PolygonMainnet)return t.custom({name:i.PolygonMainnet,chainId:137,networkId:137});if(e===i.PolygonMumbai)return t.custom({name:i.PolygonMumbai,chainId:80001,networkId:80001});if(e===i.ArbitrumRinkebyTestnet)return t.custom({name:i.ArbitrumRinkebyTestnet,chainId:421611,networkId:421611});if(e===i.xDaiChain)return t.custom({name:i.xDaiChain,chainId:100,networkId:100});throw new Error("Custom chain "+e+" not supported")},t.forCustomChain=function(e,n,a,r){var o=t._getChainParams(e);return new t({chain:s(s({},o),n),hardfork:a,supportedHardforks:r})},t.isSupportedChainId=function(e){var n=u._getInitializedChains();return Boolean(n.names[e.toString()])},t._getChainParams=function(e,n){var t=u._getInitializedChains(n);if("number"==typeof e||f.BN.isBN(e)){if(e=e.toString(),t.names[e])return t[t.names[e]];throw new Error("Chain with ID "+e+" not supported")}if(t[e])return t[e];throw new Error("Chain with name "+e+" not supported")},t.prototype.setChain=function(e){var n,a;if("number"==typeof e||"string"==typeof e||f.BN.isBN(e))this._chainParams=t._getChainParams(e,this._customChains);else{if("object"!=typeof e)throw new Error("Wrong input format");if(this._customChains.length>0)throw new Error("Chain must be a string, number, or BN when initialized with customChains passed in");try{for(var r=o(["networkId","genesis","hardforks","bootstrapNodes"]),s=r.next();!s.done;s=r.next()){var i=s.value;if(e[i]===undefined)throw new Error("Missing required chain parameter: "+i)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(a=r.return)&&a.call(r)}finally{if(n)throw n.error}}this._chainParams=e}return this._chainParams},t.prototype.setHardfork=function(e){var n,t;if(!this._isSupportedHardfork(e))throw new Error("Hardfork "+e+" not set as supported in supportedHardforks");var a=!1;try{for(var r=o(l.hardforks),s=r.next();!s.done;s=r.next()){s.value[0]===e&&(this._hardfork!==e&&(this._hardfork=e,this.emit("hardforkChanged",e)),a=!0)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(t=r.return)&&t.call(r)}finally{if(n)throw n.error}}if(!a)throw new Error("Hardfork with name "+e+" not supported")},t.prototype.getHardforkByBlockNumber=function(e){var n,t;e=f.toType(e,f.TypeOutput.BN);var a=d.Chainstart;try{for(var r=o(this.hardforks()),s=r.next();!s.done;s=r.next()){var i=s.value;null!==i.block&&(e.gte(new f.BN(i.block))&&(a=i.name))}}catch(e){n={error:e}}finally{try{s&&!s.done&&(t=r.return)&&t.call(r)}finally{if(n)throw n.error}}return a},t.prototype.setHardforkByBlockNumber=function(e){e=f.toType(e,f.TypeOutput.BN);var n=this.getHardforkByBlockNumber(e);return this.setHardfork(n),n},t.prototype._chooseHardfork=function(e,n){if(void 0===n&&(n=!0),e){if(n&&!this._isSupportedHardfork(e))throw new Error("Hardfork "+e+" not set as supported in supportedHardforks")}else e=this._hardfork;return e},t.prototype._getHardfork=function(e){var n,t,a=this.hardforks();try{for(var r=o(a),s=r.next();!s.done;s=r.next()){var i=s.value;if(i.name===e)return i}}catch(e){n={error:e}}finally{try{s&&!s.done&&(t=r.return)&&t.call(r)}finally{if(n)throw n.error}}throw new Error("Hardfork "+e+" not defined for chain "+this.chainName())},t.prototype._isSupportedHardfork=function(e){var n,t;if(!(this._supportedHardforks.length>0))return!0;try{for(var a=o(this._supportedHardforks),r=a.next();!r.done;r=a.next()){if(e===r.value)return!0}}catch(e){n={error:e}}finally{try{r&&!r.done&&(t=a.return)&&t.call(a)}finally{if(n)throw n.error}}return!1},t.prototype.setEIPs=function(e){var n,t,a=this;void 0===e&&(e=[]);var r=function(n){if(!(n in m.EIPs))throw new Error(n+" not supported");var t=s.gteHardfork(m.EIPs[n].minimumHardfork);if(!t)throw new Error(n+" cannot be activated on hardfork "+s.hardfork()+", minimumHardfork: "+t);m.EIPs[n].requiredEIPs&&m.EIPs[n].requiredEIPs.forEach((function(t){if(!e.includes(t)&&!a.isActivatedEIP(t))throw new Error(n+" requires EIP "+t+", but is not included in the EIP list")}))},s=this;try{for(var i=o(e),d=i.next();!d.done;d=i.next()){r(d.value)}}catch(e){n={error:e}}finally{try{d&&!d.done&&(t=i.return)&&t.call(i)}finally{if(n)throw n.error}}this._eips=e},t.prototype.param=function(e,n){var t,a,r=null;try{for(var s=o(this._eips),i=s.next();!i.done;i=s.next()){var d=i.value;if(null!==(r=this.paramByEIP(e,n,d)))return r}}catch(e){t={error:e}}finally{try{i&&!i.done&&(a=s.return)&&a.call(s)}finally{if(t)throw t.error}}return this.paramByHardfork(e,n,this._hardfork)},t.prototype.paramByHardfork=function(e,n,t){var a,r,s,i;t=this._chooseHardfork(t);var d=null;try{for(var c=o(l.hardforks),b=c.next();!b.done;b=c.next()){var f=b.value;if(f[1].hasOwnProperty("eips")){var u=f[1].eips;try{for(var m=(s=void 0,o(u)),h=m.next();!h.done;h=m.next()){var p=h.value,y=this.paramByEIP(e,n,p);d=null!==y?y:d}}catch(e){s={error:e}}finally{try{h&&!h.done&&(i=m.return)&&i.call(m)}finally{if(s)throw s.error}}}else{if(!f[1][e])throw new Error("Topic "+e+" not defined");f[1][e][n]!==undefined&&(d=f[1][e][n].v)}if(f[0]===t)break}}catch(e){a={error:e}}finally{try{b&&!b.done&&(r=c.return)&&r.call(c)}finally{if(a)throw a.error}}return d},t.prototype.paramByEIP=function(e,n,t){if(!(t in m.EIPs))throw new Error(t+" not supported");var a=m.EIPs[t];if(!(e in a))throw new Error("Topic "+e+" not defined");return a[e][n]===undefined?null:a[e][n].v},t.prototype.paramByBlock=function(e,n,t){var a=this.activeHardforks(t),r=a[a.length-1].name;return this.paramByHardfork(e,n,r)},t.prototype.isActivatedEIP=function(e){var n,t;if(this.eips().includes(e))return!0;try{for(var a=o(l.hardforks),r=a.next();!r.done;r=a.next()){var s=r.value[1];if(this.gteHardfork(s.name)&&"eips"in s&&s.eips.includes(e))return!0}}catch(e){n={error:e}}finally{try{r&&!r.done&&(t=a.return)&&t.call(a)}finally{if(n)throw n.error}}return!1},t.prototype.hardforkIsActiveOnBlock=function(e,n,t){var a;void 0===t&&(t={}),n=f.toType(n,f.TypeOutput.BN);var r=null!==(a=t.onlySupported)&&void 0!==a&&a;e=this._chooseHardfork(e,r);var s=this.hardforkBlockBN(e);return!(!s||!n.gte(s))},t.prototype.activeOnBlock=function(e,n){return this.hardforkIsActiveOnBlock(null,e,n)},t.prototype.hardforkGteHardfork=function(e,n,t){var a,r;void 0===t&&(t={});var s,i=t.onlyActive!==undefined&&t.onlyActive;e=this._chooseHardfork(e,t.onlySupported),s=i?this.activeHardforks(null,t):this.hardforks();var d=-1,c=-1,b=0;try{for(var f=o(s),u=f.next();!u.done;u=f.next()){var l=u.value;l.name===e&&(d=b),l.name===n&&(c=b),b+=1}}catch(e){a={error:e}}finally{try{u&&!u.done&&(r=f.return)&&r.call(f)}finally{if(a)throw a.error}}return d>=c&&-1!==c},t.prototype.gteHardfork=function(e,n){return this.hardforkGteHardfork(null,e,n)},t.prototype.hardforkIsActiveOnChain=function(e,n){var t,a,r;void 0===n&&(n={});var s=null!==(r=n.onlySupported)&&void 0!==r&&r;e=this._chooseHardfork(e,s);try{for(var i=o(this.hardforks()),d=i.next();!d.done;d=i.next()){var c=d.value;if(c.name===e&&null!==c.block)return!0}}catch(e){t={error:e}}finally{try{d&&!d.done&&(a=i.return)&&a.call(i)}finally{if(t)throw t.error}}return!1},t.prototype.activeHardforks=function(e,n){var t,a;void 0===n&&(n={});var r=[],s=this.hardforks();try{for(var i=o(s),d=i.next();!d.done;d=i.next()){var c=d.value;if(null!==c.block){if(e!==undefined&&null!==e&&e<c.block)break;n.onlySupported&&!this._isSupportedHardfork(c.name)||r.push(c)}}}catch(e){t={error:e}}finally{try{d&&!d.done&&(a=i.return)&&a.call(i)}finally{if(t)throw t.error}}return r},t.prototype.activeHardfork=function(e,n){void 0===n&&(n={});var t=this.activeHardforks(e,n);if(t.length>0)return t[t.length-1].name;throw new Error("No (supported) active hardfork found")},t.prototype.hardforkBlock=function(e){return f.toType(this.hardforkBlockBN(e),f.TypeOutput.Number)},t.prototype.hardforkBlockBN=function(e){return e=this._chooseHardfork(e,!1),new f.BN(this._getHardfork(e).block)},t.prototype.isHardforkBlock=function(e,n){return e=f.toType(e,f.TypeOutput.BN),n=this._chooseHardfork(n,!1),this.hardforkBlockBN(n).eq(e)},t.prototype.nextHardforkBlock=function(e){var n=this.nextHardforkBlockBN(e);return null===n?null:f.toType(n,f.TypeOutput.Number)},t.prototype.nextHardforkBlockBN=function(e){e=this._chooseHardfork(e,!1);var n=this.hardforkBlockBN(e);return this.hardforks().reduce((function(e,t){var a=new f.BN(t.block);return a.gt(n)&&null===e?a:e}),null)},t.prototype.isNextHardforkBlock=function(e,n){e=f.toType(e,f.TypeOutput.BN),n=this._chooseHardfork(n,!1);var t=this.nextHardforkBlockBN(n);return null!==t&&t.eq(e)},t.prototype._calcForkHash=function(e){var t,a,r=n.from(this.genesis().hash.substr(2),"hex"),s=n.alloc(0),i=0;try{for(var d=o(this.hardforks()),c=d.next();!c.done;c=d.next()){var u=c.value,l=u.block;if(0!==l&&null!==l&&l!==i){var m=n.from(l.toString(16).padStart(16,"0"),"hex");s=n.concat([s,m])}if(u.name===e)break;i=l}}catch(e){t={error:e}}finally{try{c&&!c.done&&(a=d.return)&&a.call(d)}finally{if(t)throw t.error}}var h=n.concat([r,s]);return"0x"+f.intToBuffer(b.buf(h)>>>0).toString("hex")},t.prototype.forkHash=function(e){e=this._chooseHardfork(e,!1);var n=this._getHardfork(e);if(null===n.block){throw new Error("No fork hash calculation possible for non-applied or future hardfork")}return n.forkHash!==undefined?n.forkHash:this._calcForkHash(e)},t.prototype.hardforkForForkHash=function(e){var n=this.hardforks().filter((function(n){return n.forkHash===e}));return n.length>=1?n[n.length-1]:null},t.prototype.genesis=function(){return this._chainParams.genesis},t.prototype.hardforks=function(){return this._chainParams.hardforks},t.prototype.bootstrapNodes=function(){return this._chainParams.bootstrapNodes},t.prototype.dnsNetworks=function(){return this._chainParams.dnsNetworks},t.prototype.hardfork=function(){return this._hardfork},t.prototype.chainId=function(){return f.toType(this.chainIdBN(),f.TypeOutput.Number)},t.prototype.chainIdBN=function(){return new f.BN(this._chainParams.chainId)},t.prototype.chainName=function(){return this._chainParams.name},t.prototype.networkId=function(){return f.toType(this.networkIdBN(),f.TypeOutput.Number)},t.prototype.networkIdBN=function(){return new f.BN(this._chainParams.networkId)},t.prototype.eips=function(){return this._eips},t.prototype.consensusType=function(){return this._chainParams.consensus.type},t.prototype.consensusAlgorithm=function(){return this._chainParams.consensus.algorithm},t.prototype.consensusConfig=function(){return this._chainParams.consensus[this.consensusAlgorithm()]},t.prototype.copy=function(){return Object.assign(Object.create(Object.getPrototypeOf(this)),this)},t}(c.EventEmitter);t.default=h}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@ethereumjs/common",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/common/dist.browser/index.js"}],[402,{"./types":408,"@ethereumjs/common":401,"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){var a=this&&this.__values||function(e){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&e[n],a=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&a>=e.length&&(e=void 0),{value:e&&e[a++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")},r=this&&this.__read||function(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var a,r,s=t.call(e),o=[];try{for(;(void 0===n||n-- >0)&&!(a=s.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(r)throw r.error}}return o},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransaction=void 0;var o=s(e("@ethereumjs/common")),i=e("ethereumjs-util"),d=e("./types"),c=function(){function e(e){this.activeCapabilities=[],this.DEFAULT_CHAIN="mainnet",this.DEFAULT_HARDFORK="istanbul";var n=e.nonce,t=e.gasLimit,a=e.to,r=e.value,s=e.data,o=e.v,d=e.r,c=e.s,b=e.type;this._type=new i.BN(i.toBuffer(b)).toNumber();var f=i.toBuffer(""===a?"0x":a),u=i.toBuffer(""===o?"0x":o),l=i.toBuffer(""===d?"0x":d),m=i.toBuffer(""===c?"0x":c);this.nonce=new i.BN(i.toBuffer(""===n?"0x":n)),this.gasLimit=new i.BN(i.toBuffer(""===t?"0x":t)),this.to=f.length>0?new i.Address(f):undefined,this.value=new i.BN(i.toBuffer(""===r?"0x":r)),this.data=i.toBuffer(""===s?"0x":s),this.v=u.length>0?new i.BN(u):undefined,this.r=l.length>0?new i.BN(l):undefined,this.s=m.length>0?new i.BN(m):undefined,this._validateCannotExceedMaxInteger({nonce:this.nonce,gasLimit:this.gasLimit,value:this.value,r:this.r,s:this.s})}return Object.defineProperty(e.prototype,"transactionType",{get:function(){return this.type},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),e.prototype.supports=function(e){return this.activeCapabilities.includes(e)},e.prototype.validate=function(e){void 0===e&&(e=!1);var n=[];return this.getBaseFee().gt(this.gasLimit)&&n.push("gasLimit is too low. given "+this.gasLimit+", need at least "+this.getBaseFee()),this.isSigned()&&!this.verifySignature()&&n.push("Invalid Signature"),e?n:0===n.length},e.prototype.getBaseFee=function(){var e=this.getDataFee().addn(this.common.param("gasPrices","tx"));return this.common.gteHardfork("homestead")&&this.toCreationAddress()&&e.iaddn(this.common.param("gasPrices","txCreation")),e},e.prototype.getDataFee=function(){for(var e=this.common.param("gasPrices","txDataZero"),n=this.common.param("gasPrices","txDataNonZero"),t=0,a=0;a<this.data.length;a++)0===this.data[a]?t+=e:t+=n;return new i.BN(t)},e.prototype.toCreationAddress=function(){return this.to===undefined||0===this.to.buf.length},e.prototype.isSigned=function(){var e=this,n=e.v,t=e.r,a=e.s;return 0===this.type?!!(n&&t&&a):!(n===undefined||!t||!a)},e.prototype.verifySignature=function(){try{var e=this.getSenderPublicKey();return 0!==i.unpadBuffer(e).length}catch(e){return!1}},e.prototype.getSenderAddress=function(){return new i.Address(i.publicToAddress(this.getSenderPublicKey()))},e.prototype.sign=function(e){if(32!==e.length)throw new Error("Private key must be 32 bytes in length.");var n=!1;0===this.type&&this.common.gteHardfork("spuriousDragon")&&!this.supports(d.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(d.Capability.EIP155ReplayProtection),n=!0);var t=this.getMessageToSign(!0),a=i.ecsign(t,e),r=a.v,s=a.r,o=a.s,c=this._processSignature(r,s,o);if(n){var b=this.activeCapabilities.indexOf(d.Capability.EIP155ReplayProtection);b>-1&&this.activeCapabilities.splice(b,1)}return c},e.prototype._getCommon=function(e,n){var t;if(n){var a=new i.BN(i.toBuffer(n));if(e){if(!e.chainIdBN().eq(a))throw new Error("The chain ID does not match the chain ID of Common");return e.copy()}return o.default.isSupportedChainId(a)?new o.default({chain:a,hardfork:this.DEFAULT_HARDFORK}):o.default.forCustomChain(this.DEFAULT_CHAIN,{name:"custom-chain",networkId:a,chainId:a},this.DEFAULT_HARDFORK)}return null!==(t=null==e?void 0:e.copy())&&void 0!==t?t:new o.default({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})},e.prototype._validateCannotExceedMaxInteger=function(e,n){var t,s;void 0===n&&(n=53);try{for(var o=a(Object.entries(e)),d=o.next();!d.done;d=o.next()){var c=r(d.value,2),b=c[0],f=c[1];if(53===n){if(null==f?void 0:f.gt(i.MAX_INTEGER))throw new Error(b+" cannot exceed MAX_INTEGER, given "+f)}else{if(256!==n)throw new Error("unimplemented bits value");if(null==f?void 0:f.gte(i.TWO_POW256))throw new Error(b+" must be less than 2^256, given "+f)}}}catch(e){t={error:e}}finally{try{d&&!d.done&&(s=o.return)&&s.call(o)}finally{if(t)throw t.error}}},e}();t.BaseTransaction=c}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/baseTransaction.js"}],[403,{"./baseTransaction":402,"./types":408,"./util":409,buffer:2081,"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){(function(n){(function(){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},a(e,n)},function(e,n){function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var n,t=1,a=arguments.length;t<a;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},s.apply(this,arguments)},o=this&&this.__read||function(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var a,r,s=t.call(e),o=[];try{for(;(void 0===n||n-- >0)&&!(a=s.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(r)throw r.error}}return o};Object.defineProperty(t,"__esModule",{value:!0});var i=e("ethereumjs-util"),d=e("./baseTransaction"),c=e("./types"),b=e("./util"),f=n.from(2..toString(16).padStart(2,"0"),"hex"),u=function(e){function t(n,t){var a,r;void 0===t&&(t={});var o=e.call(this,s(s({},n),{type:2}))||this;o.DEFAULT_HARDFORK="london";var d=n.chainId,f=n.accessList,u=n.maxFeePerGas,l=n.maxPriorityFeePerGas;if(o.common=o._getCommon(t.common,d),o.chainId=o.common.chainIdBN(),!o.common.isActivatedEIP(1559))throw new Error("EIP-1559 not enabled on Common");o.activeCapabilities=o.activeCapabilities.concat([1559,2718,2930]);var m=b.AccessLists.getAccessListData(null!=f?f:[]);if(o.accessList=m.accessList,o.AccessListJSON=m.AccessListJSON,b.AccessLists.verifyAccessList(o.accessList),o.maxFeePerGas=new i.BN(i.toBuffer(""===u?"0x":u)),o.maxPriorityFeePerGas=new i.BN(i.toBuffer(""===l?"0x":l)),o._validateCannotExceedMaxInteger({maxFeePerGas:o.maxFeePerGas,maxPriorityFeePerGas:o.maxPriorityFeePerGas},256),o.maxFeePerGas.lt(o.maxPriorityFeePerGas))throw new Error("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");if(o.v&&!o.v.eqn(0)&&!o.v.eqn(1))throw new Error("The y-parity of the transaction should either be 0 or 1");if(o.common.gteHardfork("homestead")&&(null===(a=o.s)||void 0===a?void 0:a.gt(c.N_DIV_2)))throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");return(null===(r=null==t?void 0:t.freeze)||void 0===r||r)&&Object.freeze(o),o}return r(t,e),Object.defineProperty(t.prototype,"senderR",{get:function(){return this.r},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"senderS",{get:function(){return this.s},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"yParity",{get:function(){return this.v},enumerable:!1,configurable:!0}),t.fromTxData=function(e,n){return void 0===n&&(n={}),new t(e,n)},t.fromSerializedTx=function(e,n){if(void 0===n&&(n={}),!e.slice(0,1).equals(f))throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: "+2+", received: "+e.slice(0,1).toString("hex"));var a=i.rlp.decode(e.slice(1));if(!Array.isArray(a))throw new Error("Invalid serialized tx input: must be array");return t.fromValuesArray(a,n)},t.fromRlpSerializedTx=function(e,n){return void 0===n&&(n={}),t.fromSerializedTx(e,n)},t.fromValuesArray=function(e,n){if(void 0===n&&(n={}),9!==e.length&&12!==e.length)throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");var a=o(e,12),r=a[0],s=a[1],d=a[2],c=a[3],b=a[4],f=a[5],u=a[6],l=a[7],m=a[8],h=a[9],p=a[10],y=a[11];return new t({chainId:new i.BN(r),nonce:s,maxPriorityFeePerGas:d,maxFeePerGas:c,gasLimit:b,to:f,value:u,data:l,accessList:null!=m?m:[],v:h!==undefined?new i.BN(h):undefined,r:p,s:y},n)},t.prototype.getDataFee=function(){var n=e.prototype.getDataFee.call(this);return n.iaddn(b.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),n},t.prototype.getUpfrontCost=function(e){void 0===e&&(e=new i.BN(0));var n=i.BN.min(this.maxPriorityFeePerGas,this.maxFeePerGas.sub(e)).add(e);return this.gasLimit.mul(n).add(this.value)},t.prototype.raw=function(){return[i.bnToUnpaddedBuffer(this.chainId),i.bnToUnpaddedBuffer(this.nonce),i.bnToUnpaddedBuffer(this.maxPriorityFeePerGas),i.bnToUnpaddedBuffer(this.maxFeePerGas),i.bnToUnpaddedBuffer(this.gasLimit),this.to!==undefined?this.to.buf:n.from([]),i.bnToUnpaddedBuffer(this.value),this.data,this.accessList,this.v!==undefined?i.bnToUnpaddedBuffer(this.v):n.from([]),this.r!==undefined?i.bnToUnpaddedBuffer(this.r):n.from([]),this.s!==undefined?i.bnToUnpaddedBuffer(this.s):n.from([])]},t.prototype.serialize=function(){var e=this.raw();return n.concat([f,i.rlp.encode(e)])},t.prototype.getMessageToSign=function(e){void 0===e&&(e=!0);var t=this.raw().slice(0,9),a=n.concat([f,i.rlp.encode(t)]);return e?i.keccak256(a):a},t.prototype.hash=function(){if(!this.isSigned())throw new Error("Cannot call hash method if transaction is not signed");return i.keccak256(this.serialize())},t.prototype.getMessageToVerifySignature=function(){return this.getMessageToSign()},t.prototype.getSenderPublicKey=function(){var e;if(!this.isSigned())throw new Error("Cannot call this method if transaction is not signed");var n=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(e=this.s)||void 0===e?void 0:e.gt(c.N_DIV_2)))throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");var t=this,a=t.v,r=t.r,s=t.s;try{return i.ecrecover(n,a.addn(27),i.bnToUnpaddedBuffer(r),i.bnToUnpaddedBuffer(s))}catch(e){throw new Error("Invalid Signature")}},t.prototype._processSignature=function(e,n,a){var r={common:this.common};return t.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:new i.BN(e-27),r:new i.BN(n),s:new i.BN(a)},r)},t.prototype.toJSON=function(){var e=b.AccessLists.getAccessListJSON(this.accessList);return{chainId:i.bnToHex(this.chainId),nonce:i.bnToHex(this.nonce),maxPriorityFeePerGas:i.bnToHex(this.maxPriorityFeePerGas),maxFeePerGas:i.bnToHex(this.maxFeePerGas),gasLimit:i.bnToHex(this.gasLimit),to:this.to!==undefined?this.to.toString():undefined,value:i.bnToHex(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:this.v!==undefined?i.bnToHex(this.v):undefined,r:this.r!==undefined?i.bnToHex(this.r):undefined,s:this.s!==undefined?i.bnToHex(this.s):undefined}},t}(d.BaseTransaction);t.default=u}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/eip1559Transaction.js"}],[404,{"./baseTransaction":402,"./types":408,"./util":409,buffer:2081,"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){(function(n){(function(){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},a(e,n)},function(e,n){function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var n,t=1,a=arguments.length;t<a;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},s.apply(this,arguments)},o=this&&this.__read||function(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var a,r,s=t.call(e),o=[];try{for(;(void 0===n||n-- >0)&&!(a=s.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(r)throw r.error}}return o};Object.defineProperty(t,"__esModule",{value:!0});var i=e("ethereumjs-util"),d=e("./baseTransaction"),c=e("./types"),b=e("./util"),f=n.from(1..toString(16).padStart(2,"0"),"hex"),u=function(e){function t(n,t){var a,r;void 0===t&&(t={});var o=e.call(this,s(s({},n),{type:1}))||this;o.DEFAULT_HARDFORK="berlin";var d=n.chainId,f=n.accessList,u=n.gasPrice;if(o.common=o._getCommon(t.common,d),o.chainId=o.common.chainIdBN(),!o.common.isActivatedEIP(2930))throw new Error("EIP-2930 not enabled on Common");o.activeCapabilities=o.activeCapabilities.concat([2718,2930]);var l=b.AccessLists.getAccessListData(null!=f?f:[]);if(o.accessList=l.accessList,o.AccessListJSON=l.AccessListJSON,b.AccessLists.verifyAccessList(o.accessList),o.gasPrice=new i.BN(i.toBuffer(""===u?"0x":u)),o._validateCannotExceedMaxInteger({gasPrice:o.gasPrice}),o.v&&!o.v.eqn(0)&&!o.v.eqn(1))throw new Error("The y-parity of the transaction should either be 0 or 1");if(o.common.gteHardfork("homestead")&&(null===(a=o.s)||void 0===a?void 0:a.gt(c.N_DIV_2)))throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");return(null===(r=null==t?void 0:t.freeze)||void 0===r||r)&&Object.freeze(o),o}return r(t,e),Object.defineProperty(t.prototype,"senderR",{get:function(){return this.r},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"senderS",{get:function(){return this.s},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"yParity",{get:function(){return this.v},enumerable:!1,configurable:!0}),t.fromTxData=function(e,n){return void 0===n&&(n={}),new t(e,n)},t.fromSerializedTx=function(e,n){if(void 0===n&&(n={}),!e.slice(0,1).equals(f))throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: "+1+", received: "+e.slice(0,1).toString("hex"));var a=i.rlp.decode(e.slice(1));if(!Array.isArray(a))throw new Error("Invalid serialized tx input: must be array");return t.fromValuesArray(a,n)},t.fromRlpSerializedTx=function(e,n){return void 0===n&&(n={}),t.fromSerializedTx(e,n)},t.fromValuesArray=function(e,n){if(void 0===n&&(n={}),8!==e.length&&11!==e.length)throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");var a=o(e,11),r=a[0],s=a[1],d=a[2],c=a[3],b=a[4],f=a[5],u=a[6],l=a[7],m=a[8],h=a[9],p=a[10];return new t({chainId:new i.BN(r),nonce:s,gasPrice:d,gasLimit:c,to:b,value:f,data:u,accessList:null!=l?l:[],v:m!==undefined?new i.BN(m):undefined,r:h,s:p},n)},t.prototype.getDataFee=function(){var n=e.prototype.getDataFee.call(this);return n.iaddn(b.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),n},t.prototype.getUpfrontCost=function(){return this.gasLimit.mul(this.gasPrice).add(this.value)},t.prototype.raw=function(){return[i.bnToUnpaddedBuffer(this.chainId),i.bnToUnpaddedBuffer(this.nonce),i.bnToUnpaddedBuffer(this.gasPrice),i.bnToUnpaddedBuffer(this.gasLimit),this.to!==undefined?this.to.buf:n.from([]),i.bnToUnpaddedBuffer(this.value),this.data,this.accessList,this.v!==undefined?i.bnToUnpaddedBuffer(this.v):n.from([]),this.r!==undefined?i.bnToUnpaddedBuffer(this.r):n.from([]),this.s!==undefined?i.bnToUnpaddedBuffer(this.s):n.from([])]},t.prototype.serialize=function(){var e=this.raw();return n.concat([f,i.rlp.encode(e)])},t.prototype.getMessageToSign=function(e){void 0===e&&(e=!0);var t=this.raw().slice(0,8),a=n.concat([f,i.rlp.encode(t)]);return e?i.keccak256(a):a},t.prototype.hash=function(){if(!this.isSigned())throw new Error("Cannot call hash method if transaction is not signed");return i.keccak256(this.serialize())},t.prototype.getMessageToVerifySignature=function(){return this.getMessageToSign()},t.prototype.getSenderPublicKey=function(){var e;if(!this.isSigned())throw new Error("Cannot call this method if transaction is not signed");var n=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(e=this.s)||void 0===e?void 0:e.gt(c.N_DIV_2)))throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");var t=this,a=t.yParity,r=t.r,s=t.s;try{return i.ecrecover(n,a.addn(27),i.bnToUnpaddedBuffer(r),i.bnToUnpaddedBuffer(s))}catch(e){throw new Error("Invalid Signature")}},t.prototype._processSignature=function(e,n,a){var r={common:this.common};return t.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:new i.BN(e-27),r:new i.BN(n),s:new i.BN(a)},r)},t.prototype.toJSON=function(){var e=b.AccessLists.getAccessListJSON(this.accessList);return{chainId:i.bnToHex(this.chainId),nonce:i.bnToHex(this.nonce),gasPrice:i.bnToHex(this.gasPrice),gasLimit:i.bnToHex(this.gasLimit),to:this.to!==undefined?this.to.toString():undefined,value:i.bnToHex(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:this.v!==undefined?i.bnToHex(this.v):undefined,r:this.r!==undefined?i.bnToHex(this.r):undefined,s:this.s!==undefined?i.bnToHex(this.s):undefined}},t}(d.BaseTransaction);t.default=u}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/eip2930Transaction.js"}],[405,{"./eip1559Transaction":403,"./eip2930Transaction":404,"./legacyTransaction":406,"./transactionFactory":407,"./types":408},function(){with(this)return function(){"use strict";return function(e,n,t){var a=this&&this.__createBinding||(Object.create?function(e,n,t,a){a===undefined&&(a=t),Object.defineProperty(e,a,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,a){a===undefined&&(a=t),e[a]=n[t]}),r=this&&this.__exportStar||function(e,n){for(var t in e)"default"===t||n.hasOwnProperty(t)||a(n,e,t)};Object.defineProperty(t,"__esModule",{value:!0});var s=e("./legacyTransaction");Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return s.default}});var o=e("./eip2930Transaction");Object.defineProperty(t,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return o.default}});var i=e("./transactionFactory");Object.defineProperty(t,"TransactionFactory",{enumerable:!0,get:function(){return i.default}});var d=e("./eip1559Transaction");Object.defineProperty(t,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return d.default}}),r(e("./types"),t)}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/index.js"}],[406,{"./baseTransaction":402,"./types":408,buffer:2081,"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){(function(n){(function(){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])},a(e,n)},function(e,n){function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var n,t=1,a=arguments.length;t<a;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},s.apply(this,arguments)},o=this&&this.__read||function(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var a,r,s=t.call(e),o=[];try{for(;(void 0===n||n-- >0)&&!(a=s.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(r)throw r.error}}return o};Object.defineProperty(t,"__esModule",{value:!0});var i=e("ethereumjs-util"),d=e("./types"),c=e("./baseTransaction"),b=function(e){function t(n,t){var a;void 0===t&&(t={});var r=e.call(this,s(s({},n),{type:0}))||this;if(r.common=r._validateTxV(r.v,t.common),r.gasPrice=new i.BN(i.toBuffer(""===n.gasPrice?"0x":n.gasPrice)),r._validateCannotExceedMaxInteger({gasPrice:r.gasPrice}),r.common.gteHardfork("spuriousDragon"))if(r.isSigned()){var o=r.v,c=r.common.chainIdBN().muln(2);(o.eq(c.addn(35))||o.eq(c.addn(36)))&&r.activeCapabilities.push(d.Capability.EIP155ReplayProtection)}else r.activeCapabilities.push(d.Capability.EIP155ReplayProtection);return(null===(a=null==t?void 0:t.freeze)||void 0===a||a)&&Object.freeze(r),r}return r(t,e),t.fromTxData=function(e,n){return void 0===n&&(n={}),new t(e,n)},t.fromSerializedTx=function(e,n){void 0===n&&(n={});var t=i.rlp.decode(e);if(!Array.isArray(t))throw new Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(t,n)},t.fromRlpSerializedTx=function(e,n){return void 0===n&&(n={}),t.fromSerializedTx(e,n)},t.fromValuesArray=function(e,n){if(void 0===n&&(n={}),6!==e.length&&9!==e.length)throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");var a=o(e,9);return new t({nonce:a[0],gasPrice:a[1],gasLimit:a[2],to:a[3],value:a[4],data:a[5],v:a[6],r:a[7],s:a[8]},n)},t.prototype.raw=function(){return[i.bnToUnpaddedBuffer(this.nonce),i.bnToUnpaddedBuffer(this.gasPrice),i.bnToUnpaddedBuffer(this.gasLimit),this.to!==undefined?this.to.buf:n.from([]),i.bnToUnpaddedBuffer(this.value),this.data,this.v!==undefined?i.bnToUnpaddedBuffer(this.v):n.from([]),this.r!==undefined?i.bnToUnpaddedBuffer(this.r):n.from([]),this.s!==undefined?i.bnToUnpaddedBuffer(this.s):n.from([])]},t.prototype.serialize=function(){return i.rlp.encode(this.raw())},t.prototype._getMessageToSign=function(){var e=[i.bnToUnpaddedBuffer(this.nonce),i.bnToUnpaddedBuffer(this.gasPrice),i.bnToUnpaddedBuffer(this.gasLimit),this.to!==undefined?this.to.buf:n.from([]),i.bnToUnpaddedBuffer(this.value),this.data];return this.supports(d.Capability.EIP155ReplayProtection)&&(e.push(i.toBuffer(this.common.chainIdBN())),e.push(i.unpadBuffer(i.toBuffer(0))),e.push(i.unpadBuffer(i.toBuffer(0)))),e},t.prototype.getMessageToSign=function(e){void 0===e&&(e=!0);var n=this._getMessageToSign();return e?i.rlphash(n):n},t.prototype.getUpfrontCost=function(){return this.gasLimit.mul(this.gasPrice).add(this.value)},t.prototype.hash=function(){return i.rlphash(this.raw())},t.prototype.getMessageToVerifySignature=function(){if(!this.isSigned())throw Error("This transaction is not signed");var e=this._getMessageToSign();return i.rlphash(e)},t.prototype.getSenderPublicKey=function(){var e,n=this.getMessageToVerifySignature();if(this.common.gteHardfork("homestead")&&(null===(e=this.s)||void 0===e?void 0:e.gt(d.N_DIV_2)))throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");var t=this,a=t.v,r=t.r,s=t.s;try{return i.ecrecover(n,a,i.bnToUnpaddedBuffer(r),i.bnToUnpaddedBuffer(s),this.supports(d.Capability.EIP155ReplayProtection)?this.common.chainIdBN():undefined)}catch(e){throw new Error("Invalid Signature")}},t.prototype._processSignature=function(e,n,a){var r=new i.BN(e);this.supports(d.Capability.EIP155ReplayProtection)&&r.iadd(this.common.chainIdBN().muln(2).addn(8));var s={common:this.common};return t.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:r,r:new i.BN(n),s:new i.BN(a)},s)},t.prototype.toJSON=function(){return{nonce:i.bnToHex(this.nonce),gasPrice:i.bnToHex(this.gasPrice),gasLimit:i.bnToHex(this.gasLimit),to:this.to!==undefined?this.to.toString():undefined,value:i.bnToHex(this.value),data:"0x"+this.data.toString("hex"),v:this.v!==undefined?i.bnToHex(this.v):undefined,r:this.r!==undefined?i.bnToHex(this.r):undefined,s:this.s!==undefined?i.bnToHex(this.s):undefined}},t.prototype._validateTxV=function(e,n){var t;if(e!==undefined&&!e.eqn(0)&&(!n||n.gteHardfork("spuriousDragon"))&&!e.eqn(27)&&!e.eqn(28))if(n){var a=n.chainIdBN().muln(2);if(!(e.eq(a.addn(35))||e.eq(a.addn(36))))throw new Error("Incompatible EIP155-based V "+e.toString()+" and chain id "+n.chainIdBN().toString()+". See the Common parameter of the Transaction constructor to set the chain id.")}else{var r=void 0;r=e.subn(35).isEven()?35:36,t=e.subn(r).divn(2)}return this._getCommon(n,t)},t.prototype._unsignedTxImplementsEIP155=function(){return this.common.gteHardfork("spuriousDragon")},t.prototype._signedTxImplementsEIP155=function(){if(!this.isSigned())throw Error("This transaction is not signed");var e=this.common.gteHardfork("spuriousDragon"),n=this.v,t=this.common.chainIdBN().muln(2);return(n.eq(t.addn(35))||n.eq(t.addn(36)))&&e},t}(c.BaseTransaction);t.default=b}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/legacyTransaction.js"}],[407,{".":405,"../../../is-buffer/index.js":4686,"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){(function(n){(function(){Object.defineProperty(t,"__esModule",{value:!0});var a=e("ethereumjs-util"),r=e("."),s=function(){function e(){}return e.fromTxData=function(e,n){if(void 0===n&&(n={}),"type"in e&&e.type!==undefined){var t=new a.BN(a.toBuffer(e.type)).toNumber();if(0===t)return r.Transaction.fromTxData(e,n);if(1===t)return r.AccessListEIP2930Transaction.fromTxData(e,n);if(2===t)return r.FeeMarketEIP1559Transaction.fromTxData(e,n);throw new Error("Tx instantiation with type "+t+" not supported")}return r.Transaction.fromTxData(e,n)},e.fromSerializedData=function(e,n){if(void 0===n&&(n={}),e[0]<=127){var t=void 0;switch(e[0]){case 1:t=2930;break;case 2:t=1559;break;default:throw new Error("TypedTransaction with ID "+e[0]+" unknown")}return 1559===t?r.FeeMarketEIP1559Transaction.fromSerializedTx(e,n):r.AccessListEIP2930Transaction.fromSerializedTx(e,n)}return r.Transaction.fromSerializedTx(e,n)},e.fromBlockBodyData=function(e,t){if(void 0===t&&(t={}),n.isBuffer(e))return this.fromSerializedData(e,t);if(Array.isArray(e))return r.Transaction.fromValuesArray(e,t);throw new Error("Cannot decode transaction: unknown type input")},e.getTransactionClass=function(e,n){if(void 0===e&&(e=0),0==e||e>=128&&e<=255)return r.Transaction;switch(e){case 1:return r.AccessListEIP2930Transaction;case 2:return r.FeeMarketEIP1559Transaction;default:throw new Error("TypedTransaction with ID "+e+" unknown")}},e}();t.default=s}).call(this)}).call(this,{isBuffer:e("../../../is-buffer/index.js")})}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/transactionFactory.js"}],[408,{"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.N_DIV_2=t.isAccessList=t.isAccessListBuffer=t.Capability=void 0;var a=e("ethereumjs-util");function r(e){if(0===e.length)return!0;var n=e[0];return!!Array.isArray(n)}!function(e){e[e.EIP155ReplayProtection=155]="EIP155ReplayProtection",e[e.EIP1559FeeMarket=1559]="EIP1559FeeMarket",e[e.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",e[e.EIP2930AccessLists=2930]="EIP2930AccessLists"}(t.Capability||(t.Capability={})),t.isAccessListBuffer=r,t.isAccessList=function(e){return!r(e)},t.N_DIV_2=new a.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16)}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/types.js"}],[409,{"./types":408,"ethereumjs-util":2521},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.AccessLists=void 0;var a=e("ethereumjs-util"),r=e("./types"),s=function(){function e(){}return e.getAccessListData=function(e){var n,t;if(e&&r.isAccessList(e)){n=e;for(var s=[],o=0;o<e.length;o++){for(var i=e[o],d=a.toBuffer(i.address),c=[],b=0;b<i.storageKeys.length;b++)c.push(a.toBuffer(i.storageKeys[b]));s.push([d,c])}t=s}else{t=null!=e?e:[];var f=[];for(o=0;o<t.length;o++){var u=t[o],l=a.bufferToHex(u[0]),m=[];for(i=0;i<u[1].length;i++)m.push(a.bufferToHex(u[1][i]));var h={address:l,storageKeys:m};f.push(h)}n=f}return{AccessListJSON:n,accessList:t}},e.verifyAccessList=function(e){for(var n=0;n<e.length;n++){var t=e[n],a=t[0],r=t[1];if(t[2]!==undefined)throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!=a.length)throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(var s=0;s<r.length;s++)if(32!=r[s].length)throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}},e.getAccessListJSON=function(e){for(var n=[],t=0;t<e.length;t++){for(var r=e[t],s={address:"0x"+a.setLengthLeft(r[0],20).toString("hex"),storageKeys:[]},o=r[1],i=0;i<o.length;i++){var d=o[i];s.storageKeys.push("0x"+a.setLengthLeft(d,32).toString("hex"))}n.push(s)}return n},e.getDataFeeEIP2930=function(e,n){for(var t=n.param("gasPrices","accessListStorageKeyCost"),a=n.param("gasPrices","accessListAddressCost"),r=0,s=0;s<e.length;s++){r+=e[s][1].length}return e.length*a+r*t},e}();t.AccessLists=s}}},{package:"@ethereumjs/tx",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethereumjs/tx/dist.browser/util.js"}],[41,{"../../../shared/constants/network":6189,"../../../shared/constants/swaps":6191,"../../../shared/constants/time":6192,"../../../shared/modules/fetch-with-timeout":6197,"../constants/on-ramp":5,"@babel/runtime/helpers/interopRequireDefault":195,loglevel:5182},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(t,"__esModule",{value:!0}),t.default=async function({chainId:e,address:n,service:t}){t||(t=function(e){switch(e){case o.MAINNET_CHAIN_ID:return"wyre";case o.ROPSTEN_CHAIN_ID:return"metamask-faucet";case o.RINKEBY_CHAIN_ID:return"rinkeby-faucet";case o.KOVAN_CHAIN_ID:return"kovan-faucet";case o.GOERLI_CHAIN_ID:return"goerli-faucet";default:throw new Error(`No default cryptocurrency exchange or faucet for chainId: "${e}"`)}}(e));switch(t){case"wyre":return await(async e=>{const n=`${s.SWAPS_API_V2_BASE_URL}/networks/${o.MAINNET_NETWORK_ID}/fiatOnRampUrl?serviceName=wyre&destinationAddress=${e}`,t=`https://pay.sendwyre.com/purchase?dest=ethereum:${e}&destCurrency=ETH&accountId=AC-7AG3W4XH4N2&paymentMethod=debit-card`;try{const e=await b(n,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}),t=await e.json();if(e.ok&&t.url)return t.url;r.default.warn("Failed to create a Wyre purchase URL",t)}catch(e){r.default.warn("Failed to create a Wyre purchase URL",e)}return t})(n);case"transak":return((e,n)=>{const{transakCurrencies:t,network:a}=o.BUYABLE_CHAINS_MAP[n];return`https://global.transak.com/?${new URLSearchParams({apiKey:c.TRANSAK_API_KEY,hostURL:"https://metamask.io",cryptoCurrencyList:t.join(","),defaultCryptoCurrency:t[0],networks:a,walletAddress:e})}`})(n,e);case"moonpay":return(async(e,n)=>{const{moonPay:{defaultCurrencyCode:t,showOnlyCurrencies:a}={}}=o.BUYABLE_CHAINS_MAP[n],i=new URLSearchParams({apiKey:c.MOONPAY_API_KEY,walletAddress:e,defaultCurrencyCode:t,showOnlyCurrencies:a}),d=new URLSearchParams({url:`https://buy.moonpay.com?${i}`,context:"extension"}),f=`${s.SWAPS_API_V2_BASE_URL}/moonpaySign/?${d}`;try{const e=await b(f,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}),n=await e.json();if(e.ok&&n.url)return n.url;r.default.warn("Failed to create a MoonPay purchase URL",n)}catch(e){r.default.warn("Failed to create a MoonPay purchase URL",e)}return""})(n,e);case"metamask-faucet":return"https://faucet.metamask.io/";case"rinkeby-faucet":return"https://www.rinkeby.io/";case"kovan-faucet":return"https://github.com/kovan-testnet/faucet";case"goerli-faucet":return"https://goerli-faucet.slock.it/";default:throw new Error(`Unknown cryptocurrency exchange or faucet: "${t}"`)}};var r=a(e("loglevel")),s=e("../../../shared/constants/swaps"),o=e("../../../shared/constants/network"),i=e("../../../shared/constants/time"),d=a(e("../../../shared/modules/fetch-with-timeout")),c=e("../constants/on-ramp");const b=(0,d.default)(30*i.SECOND)}}},{package:"<root>",file:"/home/gudahtt/projects/metamask-extension/app/scripts/lib/buy-url.js"}],[410,{},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="abi/5.5.0"}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/_version.js"}],[411,{"./_version":410,"./coders/abstract-coder":412,"./coders/address":413,"./coders/array":415,"./coders/boolean":416,"./coders/bytes":417,"./coders/fixed-bytes":418,"./coders/null":419,"./coders/number":420,"./coders/string":421,"./coders/tuple":422,"./fragments":423,"@ethersproject/bytes":440,"@ethersproject/logger":465,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.defaultAbiCoder=t.AbiCoder=void 0;var a=e("@ethersproject/bytes"),r=e("@ethersproject/properties"),s=e("@ethersproject/logger"),o=e("./_version"),i=new s.Logger(o.version),d=e("./coders/abstract-coder"),c=e("./coders/address"),b=e("./coders/array"),f=e("./coders/boolean"),u=e("./coders/bytes"),l=e("./coders/fixed-bytes"),m=e("./coders/null"),h=e("./coders/number"),p=e("./coders/string"),y=e("./coders/tuple"),_=e("./fragments"),g=new RegExp(/^bytes([0-9]*)$/),v=new RegExp(/^(u?int)([0-9]*)$/),L=function(){function e(n){var t=this.constructor;i.checkNew(t,e),(0,r.defineReadOnly)(this,"coerceFunc",n||null)}return e.prototype._getCoder=function(e){var n=this;switch(e.baseType){case"address":return new c.AddressCoder(e.name);case"bool":return new f.BooleanCoder(e.name);case"string":return new p.StringCoder(e.name);case"bytes":return new u.BytesCoder(e.name);case"array":return new b.ArrayCoder(this._getCoder(e.arrayChildren),e.arrayLength,e.name);case"tuple":return new y.TupleCoder((e.components||[]).map((function(e){return n._getCoder(e)})),e.name);case"":return new m.NullCoder(e.name)}var t,a=e.type.match(v);return a?((0===(t=parseInt(a[2]||"256"))||t>256||t%8!=0)&&i.throwArgumentError("invalid "+a[1]+" bit length","param",e),new h.NumberCoder(t/8,"int"===a[1],e.name)):(a=e.type.match(g))?((0===(t=parseInt(a[1]))||t>32)&&i.throwArgumentError("invalid bytes length","param",e),new l.FixedBytesCoder(t,e.name)):i.throwArgumentError("invalid type","type",e.type)},e.prototype._getWordSize=function(){return 32},e.prototype._getReader=function(e,n){return new d.Reader(e,this._getWordSize(),this.coerceFunc,n)},e.prototype._getWriter=function(){return new d.Writer(this._getWordSize())},e.prototype.getDefaultValue=function(e){var n=this,t=e.map((function(e){return n._getCoder(_.ParamType.from(e))}));return new y.TupleCoder(t,"_").defaultValue()},e.prototype.encode=function(e,n){var t=this;e.length!==n.length&&i.throwError("types/values length mismatch",s.Logger.errors.INVALID_ARGUMENT,{count:{types:e.length,values:n.length},value:{types:e,values:n}});var a=e.map((function(e){return t._getCoder(_.ParamType.from(e))})),r=new y.TupleCoder(a,"_"),o=this._getWriter();return r.encode(o,n),o.data},e.prototype.decode=function(e,n,t){var r=this,s=e.map((function(e){return r._getCoder(_.ParamType.from(e))}));return new y.TupleCoder(s,"_").decode(this._getReader((0,a.arrayify)(n),t))},e}();t.AbiCoder=L,t.defaultAbiCoder=new L}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/abi-coder.js"}],[412,{"../_version":410,"@ethersproject/bignumber":438,"@ethersproject/bytes":440,"@ethersproject/logger":465,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Reader=t.Writer=t.Coder=t.checkResultErrors=void 0;var a=e("@ethersproject/bytes"),r=e("@ethersproject/bignumber"),s=e("@ethersproject/properties"),o=e("@ethersproject/logger"),i=e("../_version"),d=new o.Logger(i.version);t.checkResultErrors=function(e){var n=[],t=function(e,a){if(Array.isArray(a))for(var r in a){var s=e.slice();s.push(r);try{t(s,a[r])}catch(e){n.push({path:s,error:e})}}};return t([],e),n};var c=function(){function e(e,n,t,a){this.name=e,this.type=n,this.localName=t,this.dynamic=a}return e.prototype._throwError=function(e,n){d.throwArgumentError(e,this.localName,n)},e}();t.Coder=c;var b=function(){function e(e){(0,s.defineReadOnly)(this,"wordSize",e||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(e)}return Object.defineProperty(e.prototype,"data",{get:function(){return(0,a.hexConcat)(this._data)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._dataLength},enumerable:!1,configurable:!0}),e.prototype._writeData=function(e){return this._data.push(e),this._dataLength+=e.length,e.length},e.prototype.appendWriter=function(e){return this._writeData((0,a.concat)(e._data))},e.prototype.writeBytes=function(e){var n=(0,a.arrayify)(e),t=n.length%this.wordSize;return t&&(n=(0,a.concat)([n,this._padding.slice(t)])),this._writeData(n)},e.prototype._getValue=function(e){var n=(0,a.arrayify)(r.BigNumber.from(e));return n.length>this.wordSize&&d.throwError("value out-of-bounds",o.Logger.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:n.length}),n.length%this.wordSize&&(n=(0,a.concat)([this._padding.slice(n.length%this.wordSize),n])),n},e.prototype.writeValue=function(e){return this._writeData(this._getValue(e))},e.prototype.writeUpdatableValue=function(){var e=this,n=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,function(t){e._data[n]=e._getValue(t)}},e}();t.Writer=b;var f=function(){function e(e,n,t,r){(0,s.defineReadOnly)(this,"_data",(0,a.arrayify)(e)),(0,s.defineReadOnly)(this,"wordSize",n||32),(0,s.defineReadOnly)(this,"_coerceFunc",t),(0,s.defineReadOnly)(this,"allowLoose",r),this._offset=0}return Object.defineProperty(e.prototype,"data",{get:function(){return(0,a.hexlify)(this._data)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"consumed",{get:function(){return this._offset},enumerable:!1,configurable:!0}),e.coerce=function(e,n){var t=e.match("^u?int([0-9]+)$");return t&&parseInt(t[1])<=48&&(n=n.toNumber()),n},e.prototype.coerce=function(n,t){return this._coerceFunc?this._coerceFunc(n,t):e.coerce(n,t)},e.prototype._peekBytes=function(e,n,t){var a=Math.ceil(n/this.wordSize)*this.wordSize;return this._offset+a>this._data.length&&(this.allowLoose&&t&&this._offset+n<=this._data.length?a=n:d.throwError("data out-of-bounds",o.Logger.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+a})),this._data.slice(this._offset,this._offset+a)},e.prototype.subReader=function(n){return new e(this._data.slice(this._offset+n),this.wordSize,this._coerceFunc,this.allowLoose)},e.prototype.readBytes=function(e,n){var t=this._peekBytes(0,e,!!n);return this._offset+=t.length,t.slice(0,e)},e.prototype.readValue=function(){return r.BigNumber.from(this.readBytes(this.wordSize))},e}();t.Reader=f}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/abstract-coder.js"}],[413,{"./abstract-coder":412,"@ethersproject/address":431,"@ethersproject/bytes":440},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.AddressCoder=void 0;var s=e("@ethersproject/address"),o=e("@ethersproject/bytes"),i=function(e){function n(n){return e.call(this,"address","address",n,!1)||this}return r(n,e),n.prototype.defaultValue=function(){return"0x0000000000000000000000000000000000000000"},n.prototype.encode=function(e,n){try{n=(0,s.getAddress)(n)}catch(e){this._throwError(e.message,n)}return e.writeValue(n)},n.prototype.decode=function(e){return(0,s.getAddress)((0,o.hexZeroPad)(e.readValue().toHexString(),20))},n}(e("./abstract-coder").Coder);t.AddressCoder=i}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/address.js"}],[414,{"./abstract-coder":412},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousCoder=void 0;var s=function(e){function n(n){var t=e.call(this,n.name,n.type,undefined,n.dynamic)||this;return t.coder=n,t}return r(n,e),n.prototype.defaultValue=function(){return this.coder.defaultValue()},n.prototype.encode=function(e,n){return this.coder.encode(e,n)},n.prototype.decode=function(e){return this.coder.decode(e)},n}(e("./abstract-coder").Coder);t.AnonymousCoder=s}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/anonymous.js"}],[415,{"../_version":410,"./abstract-coder":412,"./anonymous":414,"@ethersproject/logger":465},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.ArrayCoder=t.unpack=t.pack=void 0;var s=e("@ethersproject/logger"),o=e("../_version"),i=new s.Logger(o.version),d=e("./abstract-coder"),c=e("./anonymous");function b(e,n,t){var a=null;if(Array.isArray(t))a=t;else if(t&&"object"==typeof t){var r={};a=n.map((function(e){var n=e.localName;return n||i.throwError("cannot encode object for signature with missing names",s.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:t}),r[n]&&i.throwError("cannot encode object for signature with duplicate names",s.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:t}),r[n]=!0,t[n]}))}else i.throwArgumentError("invalid tuple value","tuple",t);n.length!==a.length&&i.throwArgumentError("types/value length mismatch","tuple",t);var o=new d.Writer(e.wordSize),c=new d.Writer(e.wordSize),b=[];n.forEach((function(e,n){var t=a[n];if(e.dynamic){var r=c.length;e.encode(c,t);var s=o.writeUpdatableValue();b.push((function(e){s(e+r)}))}else e.encode(o,t)})),b.forEach((function(e){e(o.length)}));var f=e.appendWriter(o);return f+=e.appendWriter(c)}function f(e,n){var t=[],a=e.subReader(0);n.forEach((function(n){var r=null;if(n.dynamic){var o=e.readValue(),i=a.subReader(o.toNumber());try{r=n.decode(i)}catch(e){if(e.code===s.Logger.errors.BUFFER_OVERRUN)throw e;(r=e).baseType=n.name,r.name=n.localName,r.type=n.type}}else try{r=n.decode(e)}catch(e){if(e.code===s.Logger.errors.BUFFER_OVERRUN)throw e;(r=e).baseType=n.name,r.name=n.localName,r.type=n.type}r!=undefined&&t.push(r)}));var r=n.reduce((function(e,n){var t=n.localName;return t&&(e[t]||(e[t]=0),e[t]++),e}),{});n.forEach((function(e,n){var a=e.localName;if(a&&1===r[a]&&("length"===a&&(a="_length"),null==t[a])){var s=t[n];s instanceof Error?Object.defineProperty(t,a,{enumerable:!0,get:function(){throw s}}):t[a]=s}}));for(var o=function(e){var n=t[e];n instanceof Error&&Object.defineProperty(t,e,{enumerable:!0,get:function(){throw n}})},i=0;i<t.length;i++)o(i);return Object.freeze(t)}t.pack=b,t.unpack=f;var u=function(e){function n(n,t,a){var r=this,s=n.type+"["+(t>=0?t:"")+"]",o=-1===t||n.dynamic;return(r=e.call(this,"array",s,a,o)||this).coder=n,r.length=t,r}return r(n,e),n.prototype.defaultValue=function(){for(var e=this.coder.defaultValue(),n=[],t=0;t<this.length;t++)n.push(e);return n},n.prototype.encode=function(e,n){Array.isArray(n)||this._throwError("expected array value",n);var t=this.length;-1===t&&(t=n.length,e.writeValue(n.length)),i.checkArgumentCount(n.length,t,"coder array"+(this.localName?" "+this.localName:""));for(var a=[],r=0;r<n.length;r++)a.push(this.coder);return b(e,a,n)},n.prototype.decode=function(e){var n=this.length;-1===n&&32*(n=e.readValue().toNumber())>e._data.length&&i.throwError("insufficient data length",s.Logger.errors.BUFFER_OVERRUN,{length:e._data.length,count:n});for(var t=[],a=0;a<n;a++)t.push(new c.AnonymousCoder(this.coder));return e.coerce(this.name,f(e,t))},n}(d.Coder);t.ArrayCoder=u}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/array.js"}],[416,{"./abstract-coder":412},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.BooleanCoder=void 0;var s=function(e){function n(n){return e.call(this,"bool","bool",n,!1)||this}return r(n,e),n.prototype.defaultValue=function(){return!1},n.prototype.encode=function(e,n){return e.writeValue(n?1:0)},n.prototype.decode=function(e){return e.coerce(this.type,!e.readValue().isZero())},n}(e("./abstract-coder").Coder);t.BooleanCoder=s}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/boolean.js"}],[417,{"./abstract-coder":412,"@ethersproject/bytes":440},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.BytesCoder=t.DynamicBytesCoder=void 0;var s=e("@ethersproject/bytes"),o=function(e){function n(n,t){return e.call(this,n,n,t,!0)||this}return r(n,e),n.prototype.defaultValue=function(){return"0x"},n.prototype.encode=function(e,n){n=(0,s.arrayify)(n);var t=e.writeValue(n.length);return t+=e.writeBytes(n)},n.prototype.decode=function(e){return e.readBytes(e.readValue().toNumber(),!0)},n}(e("./abstract-coder").Coder);t.DynamicBytesCoder=o;var i=function(e){function n(n){return e.call(this,"bytes",n)||this}return r(n,e),n.prototype.decode=function(n){return n.coerce(this.name,(0,s.hexlify)(e.prototype.decode.call(this,n)))},n}(o);t.BytesCoder=i}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/bytes.js"}],[418,{"./abstract-coder":412,"@ethersproject/bytes":440},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.FixedBytesCoder=void 0;var s=e("@ethersproject/bytes"),o=function(e){function n(n,t){var a=this,r="bytes"+String(n);return(a=e.call(this,r,r,t,!1)||this).size=n,a}return r(n,e),n.prototype.defaultValue=function(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)},n.prototype.encode=function(e,n){var t=(0,s.arrayify)(n);return t.length!==this.size&&this._throwError("incorrect data length",n),e.writeBytes(t)},n.prototype.decode=function(e){return e.coerce(this.name,(0,s.hexlify)(e.readBytes(this.size)))},n}(e("./abstract-coder").Coder);t.FixedBytesCoder=o}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/fixed-bytes.js"}],[419,{"./abstract-coder":412},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.NullCoder=void 0;var s=function(e){function n(n){return e.call(this,"null","",n,!1)||this}return r(n,e),n.prototype.defaultValue=function(){return null},n.prototype.encode=function(e,n){return null!=n&&this._throwError("not null",n),e.writeBytes([])},n.prototype.decode=function(e){return e.readBytes(0),e.coerce(this.name,null)},n}(e("./abstract-coder").Coder);t.NullCoder=s}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/null.js"}],[420,{"./abstract-coder":412,"@ethersproject/bignumber":438,"@ethersproject/constants":444},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.NumberCoder=void 0;var s=e("@ethersproject/bignumber"),o=e("@ethersproject/constants"),i=function(e){function n(n,t,a){var r=this,s=(t?"int":"uint")+8*n;return(r=e.call(this,s,s,a,!1)||this).size=n,r.signed=t,r}return r(n,e),n.prototype.defaultValue=function(){return 0},n.prototype.encode=function(e,n){var t=s.BigNumber.from(n),a=o.MaxUint256.mask(8*e.wordSize);if(this.signed){var r=a.mask(8*this.size-1);(t.gt(r)||t.lt(r.add(o.One).mul(o.NegativeOne)))&&this._throwError("value out-of-bounds",n)}else(t.lt(o.Zero)||t.gt(a.mask(8*this.size)))&&this._throwError("value out-of-bounds",n);return t=t.toTwos(8*this.size).mask(8*this.size),this.signed&&(t=t.fromTwos(8*this.size).toTwos(8*e.wordSize)),e.writeValue(t)},n.prototype.decode=function(e){var n=e.readValue().mask(8*this.size);return this.signed&&(n=n.fromTwos(8*this.size)),e.coerce(this.name,n)},n}(e("./abstract-coder").Coder);t.NumberCoder=i}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/number.js"}],[421,{"./bytes":417,"@ethersproject/strings":508},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.StringCoder=void 0;var s=e("@ethersproject/strings"),o=function(e){function n(n){return e.call(this,"string",n)||this}return r(n,e),n.prototype.defaultValue=function(){return""},n.prototype.encode=function(n,t){return e.prototype.encode.call(this,n,(0,s.toUtf8Bytes)(t))},n.prototype.decode=function(n){return(0,s.toUtf8String)(e.prototype.decode.call(this,n))},n}(e("./bytes").DynamicBytesCoder);t.StringCoder=o}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/string.js"}],[422,{"./abstract-coder":412,"./array":415},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.TupleCoder=void 0;var s=e("./abstract-coder"),o=e("./array"),i=function(e){function n(n,t){var a=this,r=!1,s=[];n.forEach((function(e){e.dynamic&&(r=!0),s.push(e.type)}));var o="tuple("+s.join(",")+")";return(a=e.call(this,"tuple",o,t,r)||this).coders=n,a}return r(n,e),n.prototype.defaultValue=function(){var e=[];this.coders.forEach((function(n){e.push(n.defaultValue())}));var n=this.coders.reduce((function(e,n){var t=n.localName;return t&&(e[t]||(e[t]=0),e[t]++),e}),{});return this.coders.forEach((function(t,a){var r=t.localName;r&&1===n[r]&&("length"===r&&(r="_length"),null==e[r]&&(e[r]=e[a]))})),Object.freeze(e)},n.prototype.encode=function(e,n){return(0,o.pack)(e,this.coders,n)},n.prototype.decode=function(e){return e.coerce(this.name,(0,o.unpack)(e,this.coders))},n}(s.Coder);t.TupleCoder=i}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/coders/tuple.js"}],[423,{"./_version":410,"@ethersproject/bignumber":438,"@ethersproject/logger":465,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorFragment=t.FunctionFragment=t.ConstructorFragment=t.EventFragment=t.Fragment=t.ParamType=t.FormatTypes=void 0;var s=e("@ethersproject/bignumber"),o=e("@ethersproject/properties"),i=e("@ethersproject/logger"),d=e("./_version"),c=new i.Logger(d.version),b={},f={calldata:!0,memory:!0,storage:!0},u={calldata:!0,memory:!0};function l(e,n){if("bytes"===e||"string"===e){if(f[n])return!0}else if("address"===e){if("payable"===n)return!0}else if((e.indexOf("[")>=0||"tuple"===e)&&u[n])return!0;return(f[n]||"payable"===n)&&c.throwArgumentError("invalid modifier","name",n),!1}function m(e,n){for(var t in n)(0,o.defineReadOnly)(e,t,n[t])}t.FormatTypes=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"});var h=new RegExp(/^(.*)\[([0-9]*)\]$/),p=function(){function e(n,t){n!==b&&c.throwError("use fromString",i.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),m(this,t);var a=this.type.match(h);m(this,a?{arrayLength:parseInt(a[2]||"-1"),arrayChildren:e.fromObject({type:a[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}return e.prototype.format=function(e){if(e||(e=t.FormatTypes.sighash),t.FormatTypes[e]||c.throwArgumentError("invalid format type","format",e),e===t.FormatTypes.json){var n={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||undefined};return"boolean"==typeof this.indexed&&(n.indexed=this.indexed),this.components&&(n.components=this.components.map((function(n){return JSON.parse(n.format(e))}))),JSON.stringify(n)}var a="";return"array"===this.baseType?(a+=this.arrayChildren.format(e),a+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(e!==t.FormatTypes.sighash&&(a+=this.type),a+="("+this.components.map((function(n){return n.format(e)})).join(e===t.FormatTypes.full?", ":",")+")"):a+=this.type,e!==t.FormatTypes.sighash&&(!0===this.indexed&&(a+=" indexed"),e===t.FormatTypes.full&&this.name&&(a+=" "+this.name)),a},e.from=function(n,t){return"string"==typeof n?e.fromString(n,t):e.fromObject(n)},e.fromObject=function(n){return e.isParamType(n)?n:new e(b,{name:n.name||null,type:E(n.type),indexed:null==n.indexed?null:!!n.indexed,components:n.components?n.components.map(e.fromObject):null})},e.fromString=function(n,t){return a=function(e,n){var t=e;function a(n){c.throwArgumentError("unexpected character at position "+n,"param",e)}function r(e){var t={type:"",name:"",parent:e,state:{allowType:!0}};return n&&(t.indexed=!1),t}e=e.replace(/\s/g," ");for(var s={type:"",name:"",state:{allowType:!0}},o=s,i=0;i<e.length;i++){var d=e[i];switch(d){case"(":o.state.allowType&&""===o.type?o.type="tuple":o.state.allowParams||a(i),o.state.allowType=!1,o.type=E(o.type),o.components=[r(o)],o=o.components[0];break;case")":delete o.state,"indexed"===o.name&&(n||a(i),o.indexed=!0,o.name=""),l(o.type,o.name)&&(o.name=""),o.type=E(o.type);var b=o;(o=o.parent)||a(i),delete b.parent,o.state.allowParams=!1,o.state.allowName=!0,o.state.allowArray=!0;break;case",":delete o.state,"indexed"===o.name&&(n||a(i),o.indexed=!0,o.name=""),l(o.type,o.name)&&(o.name=""),o.type=E(o.type);var f=r(o.parent);o.parent.components.push(f),delete o.parent,o=f;break;case" ":o.state.allowType&&""!==o.type&&(o.type=E(o.type),delete o.state.allowType,o.state.allowName=!0,o.state.allowParams=!0),o.state.allowName&&""!==o.name&&("indexed"===o.name?(n||a(i),o.indexed&&a(i),o.indexed=!0,o.name=""):l(o.type,o.name)?o.name="":o.state.allowName=!1);break;case"[":o.state.allowArray||a(i),o.type+=d,o.state.allowArray=!1,o.state.allowName=!1,o.state.readArray=!0;break;case"]":o.state.readArray||a(i),o.type+=d,o.state.readArray=!1,o.state.allowArray=!0,o.state.allowName=!0;break;default:o.state.allowType?(o.type+=d,o.state.allowParams=!0,o.state.allowArray=!0):o.state.allowName?(o.name+=d,delete o.state.allowArray):o.state.readArray?o.type+=d:a(i)}}return o.parent&&c.throwArgumentError("unexpected eof","param",e),delete s.state,"indexed"===o.name?(n||a(t.length-7),o.indexed&&a(t.length-7),o.indexed=!0,o.name=""):l(o.type,o.name)&&(o.name=""),s.type=E(s.type),s}(n,!!t),e.fromObject({name:a.name,type:a.type,indexed:a.indexed,components:a.components});var a},e.isParamType=function(e){return!(null==e||!e._isParamType)},e}();function y(e,n){return function(e){e=e.trim();for(var n=[],t="",a=0,r=0;r<e.length;r++){var s=e[r];","===s&&0===a?(n.push(t),t=""):(t+=s,"("===s?a++:")"===s&&-1===--a&&c.throwArgumentError("unbalanced parenthesis","value",e))}t&&n.push(t);return n}(e).map((function(e){return p.fromString(e,n)}))}t.ParamType=p;var _=function(){function e(e,n){e!==b&&c.throwError("use a static from method",i.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),m(this,n),this._isFragment=!0,Object.freeze(this)}return e.from=function(n){return e.isFragment(n)?n:"string"==typeof n?e.fromString(n):e.fromObject(n)},e.fromObject=function(n){if(e.isFragment(n))return n;switch(n.type){case"function":return x.fromObject(n);case"event":return g.fromObject(n);case"constructor":return T.fromObject(n);case"error":return C.fromObject(n);case"fallback":case"receive":return null}return c.throwArgumentError("invalid fragment object","value",n)},e.fromString=function(e){return"event"===(e=(e=(e=e.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?g.fromString(e.substring(5).trim()):"function"===e.split(" ")[0]?x.fromString(e.substring(8).trim()):"constructor"===e.split("(")[0].trim()?T.fromString(e.trim()):"error"===e.split(" ")[0]?C.fromString(e.substring(5).trim()):c.throwArgumentError("unsupported fragment","value",e)},e.isFragment=function(e){return!(!e||!e._isFragment)},e}();t.Fragment=_;var g=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.format=function(e){if(e||(e=t.FormatTypes.sighash),t.FormatTypes[e]||c.throwArgumentError("invalid format type","format",e),e===t.FormatTypes.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((function(n){return JSON.parse(n.format(e))}))});var n="";return e!==t.FormatTypes.sighash&&(n+="event "),n+=this.name+"("+this.inputs.map((function(n){return n.format(e)})).join(e===t.FormatTypes.full?", ":",")+") ",e!==t.FormatTypes.sighash&&this.anonymous&&(n+="anonymous "),n.trim()},n.from=function(e){return"string"==typeof e?n.fromString(e):n.fromObject(e)},n.fromObject=function(e){if(n.isEventFragment(e))return e;"event"!==e.type&&c.throwArgumentError("invalid event object","value",e);var t={name:A(e.name),anonymous:e.anonymous,inputs:e.inputs?e.inputs.map(p.fromObject):[],type:"event"};return new n(b,t)},n.fromString=function(e){var t=e.match(S);t||c.throwArgumentError("invalid event string","value",e);var a=!1;return t[3].split(" ").forEach((function(e){switch(e.trim()){case"anonymous":a=!0;break;case"":break;default:c.warn("unknown modifier: "+e)}})),n.fromObject({name:t[1].trim(),anonymous:a,inputs:y(t[2],!0),type:"event"})},n.isEventFragment=function(e){return e&&e._isFragment&&"event"===e.type},n}(_);function v(e,n){n.gas=null;var t=e.split("@");return 1!==t.length?(t.length>2&&c.throwArgumentError("invalid human-readable ABI signature","value",e),t[1].match(/^[0-9]+$/)||c.throwArgumentError("invalid human-readable ABI signature gas","value",e),n.gas=s.BigNumber.from(t[1]),t[0]):e}function L(e,n){n.constant=!1,n.payable=!1,n.stateMutability="nonpayable",e.split(" ").forEach((function(e){switch(e.trim()){case"constant":n.constant=!0;break;case"payable":n.payable=!0,n.stateMutability="payable";break;case"nonpayable":n.payable=!1,n.stateMutability="nonpayable";break;case"pure":n.constant=!0,n.stateMutability="pure";break;case"view":n.constant=!0,n.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+e)}}))}function w(e){var n={constant:!1,payable:!0,stateMutability:"payable"};return null!=e.stateMutability?(n.stateMutability=e.stateMutability,n.constant="view"===n.stateMutability||"pure"===n.stateMutability,null!=e.constant&&!!e.constant!==n.constant&&c.throwArgumentError("cannot have constant function with mutability "+n.stateMutability,"value",e),n.payable="payable"===n.stateMutability,null!=e.payable&&!!e.payable!==n.payable&&c.throwArgumentError("cannot have payable function with mutability "+n.stateMutability,"value",e)):null!=e.payable?(n.payable=!!e.payable,null!=e.constant||n.payable||"constructor"===e.type||c.throwArgumentError("unable to determine stateMutability","value",e),n.constant=!!e.constant,n.constant?n.stateMutability="view":n.stateMutability=n.payable?"payable":"nonpayable",n.payable&&n.constant&&c.throwArgumentError("cannot have constant payable function","value",e)):null!=e.constant?(n.constant=!!e.constant,n.payable=!n.constant,n.stateMutability=n.constant?"view":"payable"):"constructor"!==e.type&&c.throwArgumentError("unable to determine stateMutability","value",e),n}t.EventFragment=g;var T=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.format=function(e){if(e||(e=t.FormatTypes.sighash),t.FormatTypes[e]||c.throwArgumentError("invalid format type","format",e),e===t.FormatTypes.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:undefined,payable:this.payable,gas:this.gas?this.gas.toNumber():undefined,inputs:this.inputs.map((function(n){return JSON.parse(n.format(e))}))});e===t.FormatTypes.sighash&&c.throwError("cannot format a constructor for sighash",i.Logger.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});var n="constructor("+this.inputs.map((function(n){return n.format(e)})).join(e===t.FormatTypes.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(n+=this.stateMutability+" "),n.trim()},n.from=function(e){return"string"==typeof e?n.fromString(e):n.fromObject(e)},n.fromObject=function(e){if(n.isConstructorFragment(e))return e;"constructor"!==e.type&&c.throwArgumentError("invalid constructor object","value",e);var t=w(e);t.constant&&c.throwArgumentError("constructor cannot be constant","value",e);var a={name:null,type:e.type,inputs:e.inputs?e.inputs.map(p.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?s.BigNumber.from(e.gas):null};return new n(b,a)},n.fromString=function(e){var t={type:"constructor"},a=(e=v(e,t)).match(S);return a&&"constructor"===a[1].trim()||c.throwArgumentError("invalid constructor string","value",e),t.inputs=y(a[2].trim(),!1),L(a[3].trim(),t),n.fromObject(t)},n.isConstructorFragment=function(e){return e&&e._isFragment&&"constructor"===e.type},n}(_);t.ConstructorFragment=T;var x=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.format=function(e){if(e||(e=t.FormatTypes.sighash),t.FormatTypes[e]||c.throwArgumentError("invalid format type","format",e),e===t.FormatTypes.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:undefined,payable:this.payable,gas:this.gas?this.gas.toNumber():undefined,inputs:this.inputs.map((function(n){return JSON.parse(n.format(e))})),outputs:this.outputs.map((function(n){return JSON.parse(n.format(e))}))});var n="";return e!==t.FormatTypes.sighash&&(n+="function "),n+=this.name+"("+this.inputs.map((function(n){return n.format(e)})).join(e===t.FormatTypes.full?", ":",")+") ",e!==t.FormatTypes.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(n+=this.stateMutability+" "):this.constant&&(n+="view "),this.outputs&&this.outputs.length&&(n+="returns ("+this.outputs.map((function(n){return n.format(e)})).join(", ")+") "),null!=this.gas&&(n+="@"+this.gas.toString()+" ")),n.trim()},n.from=function(e){return"string"==typeof e?n.fromString(e):n.fromObject(e)},n.fromObject=function(e){if(n.isFunctionFragment(e))return e;"function"!==e.type&&c.throwArgumentError("invalid function object","value",e);var t=w(e),a={type:e.type,name:A(e.name),constant:t.constant,inputs:e.inputs?e.inputs.map(p.fromObject):[],outputs:e.outputs?e.outputs.map(p.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?s.BigNumber.from(e.gas):null};return new n(b,a)},n.fromString=function(e){var t={type:"function"},a=(e=v(e,t)).split(" returns ");a.length>2&&c.throwArgumentError("invalid function string","value",e);var r=a[0].match(S);if(r||c.throwArgumentError("invalid function signature","value",e),t.name=r[1].trim(),t.name&&A(t.name),t.inputs=y(r[2],!1),L(r[3].trim(),t),a.length>1){var s=a[1].match(S);""==s[1].trim()&&""==s[3].trim()||c.throwArgumentError("unexpected tokens","value",e),t.outputs=y(s[2],!1)}else t.outputs=[];return n.fromObject(t)},n.isFunctionFragment=function(e){return e&&e._isFragment&&"function"===e.type},n}(T);function M(e){var n=e.format();return"Error(string)"!==n&&"Panic(uint256)"!==n||c.throwArgumentError("cannot specify user defined "+n+" error","fragment",e),e}t.FunctionFragment=x;var C=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.format=function(e){if(e||(e=t.FormatTypes.sighash),t.FormatTypes[e]||c.throwArgumentError("invalid format type","format",e),e===t.FormatTypes.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((function(n){return JSON.parse(n.format(e))}))});var n="";return e!==t.FormatTypes.sighash&&(n+="error "),(n+=this.name+"("+this.inputs.map((function(n){return n.format(e)})).join(e===t.FormatTypes.full?", ":",")+") ").trim()},n.from=function(e){return"string"==typeof e?n.fromString(e):n.fromObject(e)},n.fromObject=function(e){if(n.isErrorFragment(e))return e;"error"!==e.type&&c.throwArgumentError("invalid error object","value",e);var t={type:e.type,name:A(e.name),inputs:e.inputs?e.inputs.map(p.fromObject):[]};return M(new n(b,t))},n.fromString=function(e){var t={type:"error"},a=e.match(S);return a||c.throwArgumentError("invalid error signature","value",e),t.name=a[1].trim(),t.name&&A(t.name),t.inputs=y(a[2],!1),M(n.fromObject(t))},n.isErrorFragment=function(e){return e&&e._isFragment&&"error"===e.type},n}(_);function E(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}t.ErrorFragment=C;var R=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function A(e){return e&&e.match(R)||c.throwArgumentError('invalid identifier "'+e+'"',"value",e),e}var S=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$")}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/fragments.js"}],[424,{"./abi-coder":411,"./fragments":423,"./interface":425},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionDescription=t.LogDescription=t.checkResultErrors=t.Indexed=t.Interface=t.defaultAbiCoder=t.AbiCoder=t.FormatTypes=t.ParamType=t.FunctionFragment=t.Fragment=t.EventFragment=t.ErrorFragment=t.ConstructorFragment=void 0;var a=e("./fragments");Object.defineProperty(t,"ConstructorFragment",{enumerable:!0,get:function(){return a.ConstructorFragment}}),Object.defineProperty(t,"ErrorFragment",{enumerable:!0,get:function(){return a.ErrorFragment}}),Object.defineProperty(t,"EventFragment",{enumerable:!0,get:function(){return a.EventFragment}}),Object.defineProperty(t,"FormatTypes",{enumerable:!0,get:function(){return a.FormatTypes}}),Object.defineProperty(t,"Fragment",{enumerable:!0,get:function(){return a.Fragment}}),Object.defineProperty(t,"FunctionFragment",{enumerable:!0,get:function(){return a.FunctionFragment}}),Object.defineProperty(t,"ParamType",{enumerable:!0,get:function(){return a.ParamType}});var r=e("./abi-coder");Object.defineProperty(t,"AbiCoder",{enumerable:!0,get:function(){return r.AbiCoder}}),Object.defineProperty(t,"defaultAbiCoder",{enumerable:!0,get:function(){return r.defaultAbiCoder}});var s=e("./interface");Object.defineProperty(t,"checkResultErrors",{enumerable:!0,get:function(){return s.checkResultErrors}}),Object.defineProperty(t,"Indexed",{enumerable:!0,get:function(){return s.Indexed}}),Object.defineProperty(t,"Interface",{enumerable:!0,get:function(){return s.Interface}}),Object.defineProperty(t,"LogDescription",{enumerable:!0,get:function(){return s.LogDescription}}),Object.defineProperty(t,"TransactionDescription",{enumerable:!0,get:function(){return s.TransactionDescription}})}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/index.js"}],[425,{"./_version":410,"./abi-coder":411,"./coders/abstract-coder":412,"./fragments":423,"@ethersproject/address":431,"@ethersproject/bignumber":438,"@ethersproject/bytes":440,"@ethersproject/hash":450,"@ethersproject/keccak256":463,"@ethersproject/logger":465,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)});Object.defineProperty(t,"__esModule",{value:!0}),t.Interface=t.Indexed=t.ErrorDescription=t.TransactionDescription=t.LogDescription=t.checkResultErrors=void 0;var s=e("@ethersproject/address"),o=e("@ethersproject/bignumber"),i=e("@ethersproject/bytes"),d=e("@ethersproject/hash"),c=e("@ethersproject/keccak256"),b=e("@ethersproject/properties"),f=e("./abi-coder"),u=e("./coders/abstract-coder");Object.defineProperty(t,"checkResultErrors",{enumerable:!0,get:function(){return u.checkResultErrors}});var l=e("./fragments"),m=e("@ethersproject/logger"),h=e("./_version"),p=new m.Logger(h.version),y=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n}(b.Description);t.LogDescription=y;var _=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n}(b.Description);t.TransactionDescription=_;var g=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n}(b.Description);t.ErrorDescription=g;var v=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.isIndexed=function(e){return!(!e||!e._isIndexed)},n}(b.Description);t.Indexed=v;var L={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function w(e,n){var t=new Error("deferred error during ABI decoding triggered accessing "+e);return t.error=n,t}var T=function(){function e(n){var t=this.constructor,a=this;p.checkNew(t,e);var r=[];r="string"==typeof n?JSON.parse(n):n,(0,b.defineReadOnly)(this,"fragments",r.map((function(e){return l.Fragment.from(e)})).filter((function(e){return null!=e}))),(0,b.defineReadOnly)(this,"_abiCoder",(0,b.getStatic)(t,"getAbiCoder")()),(0,b.defineReadOnly)(this,"functions",{}),(0,b.defineReadOnly)(this,"errors",{}),(0,b.defineReadOnly)(this,"events",{}),(0,b.defineReadOnly)(this,"structs",{}),this.fragments.forEach((function(e){var n=null;switch(e.type){case"constructor":return a.deploy?void p.warn("duplicate definition - constructor"):void(0,b.defineReadOnly)(a,"deploy",e);case"function":n=a.functions;break;case"event":n=a.events;break;case"error":n=a.errors;break;default:return}var t=e.format();n[t]?p.warn("duplicate definition - "+t):n[t]=e})),this.deploy||(0,b.defineReadOnly)(this,"deploy",l.ConstructorFragment.from({payable:!1,type:"constructor"})),(0,b.defineReadOnly)(this,"_isInterface",!0)}return e.prototype.format=function(e){e||(e=l.FormatTypes.full),e===l.FormatTypes.sighash&&p.throwArgumentError("interface does not support formatting sighash","format",e);var n=this.fragments.map((function(n){return n.format(e)}));return e===l.FormatTypes.json?JSON.stringify(n.map((function(e){return JSON.parse(e)}))):n},e.getAbiCoder=function(){return f.defaultAbiCoder},e.getAddress=function(e){return(0,s.getAddress)(e)},e.getSighash=function(e){return(0,i.hexDataSlice)((0,d.id)(e.format()),0,4)},e.getEventTopic=function(e){return(0,d.id)(e.format())},e.prototype.getFunction=function(e){if((0,i.isHexString)(e)){for(var n in this.functions)if(e===this.getSighash(n))return this.functions[n];p.throwArgumentError("no matching function","sighash",e)}if(-1===e.indexOf("(")){var t=e.trim(),a=Object.keys(this.functions).filter((function(e){return e.split("(")[0]===t}));return 0===a.length?p.throwArgumentError("no matching function","name",t):a.length>1&&p.throwArgumentError("multiple matching functions","name",t),this.functions[a[0]]}var r=this.functions[l.FunctionFragment.fromString(e).format()];return r||p.throwArgumentError("no matching function","signature",e),r},e.prototype.getEvent=function(e){if((0,i.isHexString)(e)){var n=e.toLowerCase();for(var t in this.events)if(n===this.getEventTopic(t))return this.events[t];p.throwArgumentError("no matching event","topichash",n)}if(-1===e.indexOf("(")){var a=e.trim(),r=Object.keys(this.events).filter((function(e){return e.split("(")[0]===a}));return 0===r.length?p.throwArgumentError("no matching event","name",a):r.length>1&&p.throwArgumentError("multiple matching events","name",a),this.events[r[0]]}var s=this.events[l.EventFragment.fromString(e).format()];return s||p.throwArgumentError("no matching event","signature",e),s},e.prototype.getError=function(e){if((0,i.isHexString)(e)){var n=(0,b.getStatic)(this.constructor,"getSighash");for(var t in this.errors){if(e===n(this.errors[t]))return this.errors[t]}p.throwArgumentError("no matching error","sighash",e)}if(-1===e.indexOf("(")){var a=e.trim(),r=Object.keys(this.errors).filter((function(e){return e.split("(")[0]===a}));return 0===r.length?p.throwArgumentError("no matching error","name",a):r.length>1&&p.throwArgumentError("multiple matching errors","name",a),this.errors[r[0]]}var s=this.errors[l.FunctionFragment.fromString(e).format()];return s||p.throwArgumentError("no matching error","signature",e),s},e.prototype.getSighash=function(e){if("string"==typeof e)try{e=this.getFunction(e)}catch(n){try{e=this.getError(e)}catch(e){throw n}}return(0,b.getStatic)(this.constructor,"getSighash")(e)},e.prototype.getEventTopic=function(e){return"string"==typeof e&&(e=this.getEvent(e)),(0,b.getStatic)(this.constructor,"getEventTopic")(e)},e.prototype._decodeParams=function(e,n){return this._abiCoder.decode(e,n)},e.prototype._encodeParams=function(e,n){return this._abiCoder.encode(e,n)},e.prototype.encodeDeploy=function(e){return this._encodeParams(this.deploy.inputs,e||[])},e.prototype.decodeErrorResult=function(e,n){"string"==typeof e&&(e=this.getError(e));var t=(0,i.arrayify)(n);return(0,i.hexlify)(t.slice(0,4))!==this.getSighash(e)&&p.throwArgumentError("data signature does not match error "+e.name+".","data",(0,i.hexlify)(t)),this._decodeParams(e.inputs,t.slice(4))},e.prototype.encodeErrorResult=function(e,n){return"string"==typeof e&&(e=this.getError(e)),(0,i.hexlify)((0,i.concat)([this.getSighash(e),this._encodeParams(e.inputs,n||[])]))},e.prototype.decodeFunctionData=function(e,n){"string"==typeof e&&(e=this.getFunction(e));var t=(0,i.arrayify)(n);return(0,i.hexlify)(t.slice(0,4))!==this.getSighash(e)&&p.throwArgumentError("data signature does not match function "+e.name+".","data",(0,i.hexlify)(t)),this._decodeParams(e.inputs,t.slice(4))},e.prototype.encodeFunctionData=function(e,n){return"string"==typeof e&&(e=this.getFunction(e)),(0,i.hexlify)((0,i.concat)([this.getSighash(e),this._encodeParams(e.inputs,n||[])]))},e.prototype.decodeFunctionResult=function(e,n){"string"==typeof e&&(e=this.getFunction(e));var t=(0,i.arrayify)(n),a=null,r=null,s=null,o=null;switch(t.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(e.outputs,t)}catch(b){}break;case 4:var d=(0,i.hexlify)(t.slice(0,4)),c=L[d];if(c)r=this._abiCoder.decode(c.inputs,t.slice(4)),s=c.name,o=c.signature,c.reason&&(a=r[0]);else try{var b=this.getError(d);r=this._abiCoder.decode(b.inputs,t.slice(4)),s=b.name,o=b.format()}catch(b){console.log(b)}}return p.throwError("call revert exception",m.Logger.errors.CALL_EXCEPTION,{method:e.format(),errorArgs:r,errorName:s,errorSignature:o,reason:a})},e.prototype.encodeFunctionResult=function(e,n){return"string"==typeof e&&(e=this.getFunction(e)),(0,i.hexlify)(this._abiCoder.encode(e.outputs,n||[]))},e.prototype.encodeFilterTopics=function(e,n){var t=this;"string"==typeof e&&(e=this.getEvent(e)),n.length>e.inputs.length&&p.throwError("too many arguments for "+e.format(),m.Logger.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:n});var a=[];e.anonymous||a.push(this.getEventTopic(e));var r=function(e,n){return"string"===e.type?(0,d.id)(n):"bytes"===e.type?(0,c.keccak256)((0,i.hexlify)(n)):("address"===e.type&&t._abiCoder.encode(["address"],[n]),(0,i.hexZeroPad)((0,i.hexlify)(n),32))};for(n.forEach((function(n,t){var s=e.inputs[t];s.indexed?null==n?a.push(null):"array"===s.baseType||"tuple"===s.baseType?p.throwArgumentError("filtering with tuples or arrays not supported","contract."+s.name,n):Array.isArray(n)?a.push(n.map((function(e){return r(s,e)}))):a.push(r(s,n)):null!=n&&p.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+s.name,n)}));a.length&&null===a[a.length-1];)a.pop();return a},e.prototype.encodeEventLog=function(e,n){var t=this;"string"==typeof e&&(e=this.getEvent(e));var a=[],r=[],s=[];return e.anonymous||a.push(this.getEventTopic(e)),n.length!==e.inputs.length&&p.throwArgumentError("event arguments/values mismatch","values",n),e.inputs.forEach((function(e,o){var i=n[o];if(e.indexed)if("string"===e.type)a.push((0,d.id)(i));else if("bytes"===e.type)a.push((0,c.keccak256)(i));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");a.push(t._abiCoder.encode([e.type],[i]))}else r.push(e),s.push(i)})),{data:this._abiCoder.encode(r,s),topics:a}},e.prototype.decodeEventLog=function(e,n,t){if("string"==typeof e&&(e=this.getEvent(e)),null!=t&&!e.anonymous){var a=this.getEventTopic(e);(0,i.isHexString)(t[0],32)&&t[0].toLowerCase()===a||p.throwError("fragment/topic mismatch",m.Logger.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:a,value:t[0]}),t=t.slice(1)}var r=[],s=[],o=[];e.inputs.forEach((function(e,n){e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(r.push(l.ParamType.fromObject({type:"bytes32",name:e.name})),o.push(!0)):(r.push(e),o.push(!1)):(s.push(e),o.push(!1))}));var d=null!=t?this._abiCoder.decode(r,(0,i.concat)(t)):null,c=this._abiCoder.decode(s,n,!0),b=[],f=0,u=0;e.inputs.forEach((function(e,n){if(e.indexed)if(null==d)b[n]=new v({_isIndexed:!0,hash:null});else if(o[n])b[n]=new v({_isIndexed:!0,hash:d[u++]});else try{b[n]=d[u++]}catch(e){b[n]=e}else try{b[n]=c[f++]}catch(e){b[n]=e}if(e.name&&null==b[e.name]){var t=b[n];t instanceof Error?Object.defineProperty(b,e.name,{enumerable:!0,get:function(){throw w("property "+JSON.stringify(e.name),t)}}):b[e.name]=t}}));for(var h=function(e){var n=b[e];n instanceof Error&&Object.defineProperty(b,e,{enumerable:!0,get:function(){throw w("index "+e,n)}})},y=0;y<b.length;y++)h(y);return Object.freeze(b)},e.prototype.parseTransaction=function(e){var n=this.getFunction(e.data.substring(0,10).toLowerCase());return n?new _({args:this._abiCoder.decode(n.inputs,"0x"+e.data.substring(10)),functionFragment:n,name:n.name,signature:n.format(),sighash:this.getSighash(n),value:o.BigNumber.from(e.value||"0")}):null},e.prototype.parseLog=function(e){var n=this.getEvent(e.topics[0]);return!n||n.anonymous?null:new y({eventFragment:n,name:n.name,signature:n.format(),topic:this.getEventTopic(n),args:this.decodeEventLog(n,e.data,e.topics)})},e.prototype.parseError=function(e){var n=(0,i.hexlify)(e),t=this.getError(n.substring(0,10).toLowerCase());return t?new g({args:this._abiCoder.decode(t.inputs,"0x"+n.substring(10)),errorFragment:t,name:t.name,signature:t.format(),sighash:this.getSighash(t)}):null},e.isInterface=function(e){return!(!e||!e._isInterface)},e}();t.Interface=T}}},{package:"@ethersproject/abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abi/lib/interface.js"}],[426,{},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="abstract-provider/5.5.1"}}},{package:"@ethersproject/abstract-provider",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abstract-provider/lib/_version.js"}],[427,{"./_version":426,"@ethersproject/bignumber":438,"@ethersproject/bytes":440,"@ethersproject/logger":465,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),s=this&&this.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(r,s){function o(e){try{d(a.next(e))}catch(e){s(e)}}function i(e){try{d(a.throw(e))}catch(e){s(e)}}function d(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,i)}d((a=a.apply(e,n||[])).next())}))},o=this&&this.__generator||function(e,n){var t,a,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,a&&(r=2&s[0]?a.return:s[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,s[1])).done)return r;switch(a=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,a=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=n.call(e,o)}catch(e){s=[6,e],a=0}finally{t=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Provider=t.TransactionOrderForkEvent=t.TransactionForkEvent=t.BlockForkEvent=t.ForkEvent=void 0;var i=e("@ethersproject/bignumber"),d=e("@ethersproject/bytes"),c=e("@ethersproject/properties"),b=e("@ethersproject/logger"),f=e("./_version"),u=new b.Logger(f.version),l=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.isForkEvent=function(e){return!(!e||!e._isForkEvent)},n}(c.Description);t.ForkEvent=l;var m=function(e){function n(n,t){return(0,d.isHexString)(n,32)||u.throwArgumentError("invalid blockHash","blockHash",n),e.call(this,{_isForkEvent:!0,_isBlockForkEvent:!0,expiry:t||0,blockHash:n})||this}return r(n,e),n}(l);t.BlockForkEvent=m;var h=function(e){function n(n,t){return(0,d.isHexString)(n,32)||u.throwArgumentError("invalid transaction hash","hash",n),e.call(this,{_isForkEvent:!0,_isTransactionForkEvent:!0,expiry:t||0,hash:n})||this}return r(n,e),n}(l);t.TransactionForkEvent=h;var p=function(e){function n(n,t,a){return(0,d.isHexString)(n,32)||u.throwArgumentError("invalid transaction hash","beforeHash",n),(0,d.isHexString)(t,32)||u.throwArgumentError("invalid transaction hash","afterHash",t),e.call(this,{_isForkEvent:!0,_isTransactionOrderForkEvent:!0,expiry:a||0,beforeHash:n,afterHash:t})||this}return r(n,e),n}(l);t.TransactionOrderForkEvent=p;var y=function(){function e(){var n=this.constructor;u.checkAbstract(n,e),(0,c.defineReadOnly)(this,"_isProvider",!0)}return e.prototype.getFeeData=function(){return s(this,void 0,void 0,(function(){var e,n,t,a,r;return o(this,(function(s){switch(s.label){case 0:return[4,(0,c.resolveProperties)({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((function(e){return null}))})];case 1:return e=s.sent(),n=e.block,t=e.gasPrice,a=null,r=null,n&&n.baseFeePerGas&&(r=i.BigNumber.from("2500000000"),a=n.baseFeePerGas.mul(2).add(r)),[2,{maxFeePerGas:a,maxPriorityFeePerGas:r,gasPrice:t}]}}))}))},e.prototype.addListener=function(e,n){return this.on(e,n)},e.prototype.removeListener=function(e,n){return this.off(e,n)},e.isProvider=function(e){return!(!e||!e._isProvider)},e}();t.Provider=y}}},{package:"@ethersproject/abstract-provider",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abstract-provider/lib/index.js"}],[428,{},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="abstract-signer/5.5.0"}}},{package:"@ethersproject/abstract-signer",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abstract-signer/lib/_version.js"}],[429,{"./_version":428,"@ethersproject/logger":465,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){var a,r=this&&this.__extends||(a=function(e,n){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])},a(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function t(){this.constructor=e}a(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),s=this&&this.__awaiter||function(e,n,t,a){return new(t||(t=Promise))((function(r,s){function o(e){try{d(a.next(e))}catch(e){s(e)}}function i(e){try{d(a.throw(e))}catch(e){s(e)}}function d(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,i)}d((a=a.apply(e,n||[])).next())}))},o=this&&this.__generator||function(e,n){var t,a,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,a&&(r=2&s[0]?a.return:s[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,s[1])).done)return r;switch(a=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,a=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(r=o.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=n.call(e,o)}catch(e){s=[6,e],a=0}finally{t=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.VoidSigner=t.Signer=void 0;var i=e("@ethersproject/properties"),d=e("@ethersproject/logger"),c=e("./_version"),b=new d.Logger(c.version),f=["accessList","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],u=[d.Logger.errors.INSUFFICIENT_FUNDS,d.Logger.errors.NONCE_EXPIRED,d.Logger.errors.REPLACEMENT_UNDERPRICED],l=function(){function e(){var n=this.constructor;b.checkAbstract(n,e),(0,i.defineReadOnly)(this,"_isSigner",!0)}return e.prototype.getBalance=function(e){return s(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this._checkProvider("getBalance"),[4,this.provider.getBalance(this.getAddress(),e)];case 1:return[2,n.sent()]}}))}))},e.prototype.getTransactionCount=function(e){return s(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this._checkProvider("getTransactionCount"),[4,this.provider.getTransactionCount(this.getAddress(),e)];case 1:return[2,n.sent()]}}))}))},e.prototype.estimateGas=function(e){return s(this,void 0,void 0,(function(){var n;return o(this,(function(t){switch(t.label){case 0:return this._checkProvider("estimateGas"),[4,(0,i.resolveProperties)(this.checkTransaction(e))];case 1:return n=t.sent(),[4,this.provider.estimateGas(n)];case 2:return[2,t.sent()]}}))}))},e.prototype.call=function(e,n){return s(this,void 0,void 0,(function(){var t;return o(this,(function(a){switch(a.label){case 0:return this._checkProvider("call"),[4,(0,i.resolveProperties)(this.checkTransaction(e))];case 1:return t=a.sent(),[4,this.provider.call(t,n)];case 2:return[2,a.sent()]}}))}))},e.prototype.sendTransaction=function(e){return s(this,void 0,void 0,(function(){var n,t;return o(this,(function(a){switch(a.label){case 0:return this._checkProvider("sendTransaction"),[4,this.populateTransaction(e)];case 1:return n=a.sent(),[4,this.signTransaction(n)];case 2:return t=a.sent(),[4,this.provider.sendTransaction(t)];case 3:return[2,a.sent()]}}))}))},e.prototype.getChainId=function(){return s(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return this._checkProvider("getChainId"),[4,this.provider.getNetwork()];case 1:return[2,e.sent().chainId]}}))}))},e.prototype.getGasPrice=function(){return s(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return this._checkProvider("getGasPrice"),[4,this.provider.getGasPrice()];case 1:return[2,e.sent()]}}))}))},e.prototype.getFeeData=function(){return s(this,void 0,void 0,(function(){return o(this,(function(e){switch(e.label){case 0:return this._checkProvider("getFeeData"),[4,this.provider.getFeeData()];case 1:return[2,e.sent()]}}))}))},e.prototype.resolveName=function(e){return s(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return this._checkProvider("resolveName"),[4,this.provider.resolveName(e)];case 1:return[2,n.sent()]}}))}))},e.prototype.checkTransaction=function(e){for(var n in e)-1===f.indexOf(n)&&b.throwArgumentError("invalid transaction key: "+n,"transaction",e);var t=(0,i.shallowCopy)(e);return null==t.from?t.from=this.getAddress():t.from=Promise.all([Promise.resolve(t.from),this.getAddress()]).then((function(n){return n[0].toLowerCase()!==n[1].toLowerCase()&&b.throwArgumentError("from address mismatch","transaction",e),n[0]})),t},e.prototype.populateTransaction=function(e){return s(this,void 0,void 0,(function(){var n,t,a,r,c=this;return o(this,(function(f){switch(f.label){case 0:return[4,(0,i.resolveProperties)(this.checkTransaction(e))];case 1:return null!=(n=f.sent()).to&&(n.to=Promise.resolve(n.to).then((function(e){return s(c,void 0,void 0,(function(){var n;return o(this,(function(t){switch(t.label){case 0:return null==e?[2,null]:[4,this.resolveName(e)];case 1:return null==(n=t.sent())&&b.throwArgumentError("provided ENS name resolves to null","tx.to",e),[2,n]}}))}))})),n.to.catch((function(e){}))),t=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas,null==n.gasPrice||2!==n.type&&!t?0!==n.type&&1!==n.type||!t||b.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",e):b.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",e),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas?[3,2]:(n.type=2,[3,5]);case 2:return 0!==n.type&&1!==n.type?[3,3]:(null==n.gasPrice&&(n.gasPrice=this.getGasPrice()),[3,5]);case 3:return[4,this.getFeeData()];case 4:a=f.sent(),null==n.type?null!=a.maxFeePerGas&&null!=a.maxPriorityFeePerGas?(n.type=2,null!=n.gasPrice?(r=n.gasPrice,delete n.gasPrice,n.maxFeePerGas=r,n.maxPriorityFeePerGas=r):(null==n.maxFeePerGas&&(n.maxFeePerGas=a.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=a.maxPriorityFeePerGas))):null!=a.gasPrice?(t&&b.throwError("network does not support EIP-1559",d.Logger.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==n.gasPrice&&(n.gasPrice=a.gasPrice),n.type=0):b.throwError("failed to get consistent fee data",d.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"}):2===n.type&&(null==n.maxFeePerGas&&(n.maxFeePerGas=a.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=a.maxPriorityFeePerGas)),f.label=5;case 5:return null==n.nonce&&(n.nonce=this.getTransactionCount("pending")),null==n.gasLimit&&(n.gasLimit=this.estimateGas(n).catch((function(e){if(u.indexOf(e.code)>=0)throw e;return b.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",d.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,tx:n})}))),null==n.chainId?n.chainId=this.getChainId():n.chainId=Promise.all([Promise.resolve(n.chainId),this.getChainId()]).then((function(n){return 0!==n[1]&&n[0]!==n[1]&&b.throwArgumentError("chainId address mismatch","transaction",e),n[0]})),[4,(0,i.resolveProperties)(n)];case 6:return[2,f.sent()]}}))}))},e.prototype._checkProvider=function(e){this.provider||b.throwError("missing provider",d.Logger.errors.UNSUPPORTED_OPERATION,{operation:e||"_checkProvider"})},e.isSigner=function(e){return!(!e||!e._isSigner)},e}();t.Signer=l;var m=function(e){function n(t,a){var r,s=this.constructor;return b.checkNew(s,n),r=e.call(this)||this,(0,i.defineReadOnly)(r,"address",t),(0,i.defineReadOnly)(r,"provider",a||null),r}return r(n,e),n.prototype.getAddress=function(){return Promise.resolve(this.address)},n.prototype._fail=function(e,n){return Promise.resolve().then((function(){b.throwError(e,d.Logger.errors.UNSUPPORTED_OPERATION,{operation:n})}))},n.prototype.signMessage=function(e){return this._fail("VoidSigner cannot sign messages","signMessage")},n.prototype.signTransaction=function(e){return this._fail("VoidSigner cannot sign transactions","signTransaction")},n.prototype._signTypedData=function(e,n,t){return this._fail("VoidSigner cannot sign typed data","signTypedData")},n.prototype.connect=function(e){return new n(this.address,e)},n}(l);t.VoidSigner=m}}},{package:"@ethersproject/abstract-signer",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/abstract-signer/lib/index.js"}],[4293,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports=function e(n,t){if(n===t)return!0;if(n&&t&&"object"==typeof n&&"object"==typeof t){if(n.constructor!==t.constructor)return!1;var a,r,s;if(Array.isArray(n)){if((a=n.length)!=t.length)return!1;for(r=a;0!=r--;)if(!e(n[r],t[r]))return!1;return!0}if(n.constructor===RegExp)return n.source===t.source&&n.flags===t.flags;if(n.valueOf!==Object.prototype.valueOf)return n.valueOf()===t.valueOf();if(n.toString!==Object.prototype.toString)return n.toString()===t.toString();if((a=(s=Object.keys(n)).length)!==Object.keys(t).length)return!1;for(r=a;0!=r--;)if(!Object.prototype.hasOwnProperty.call(t,s[r]))return!1;for(r=a;0!=r--;){var o=s[r];if(!e(n[o],t[o]))return!1}return!0}return n!=n&&t!=t}}}},{package:"fast-deep-equal",file:"/home/gudahtt/projects/metamask-extension/node_modules/fast-deep-equal/index.js"}],[4298,{},function(){with(this)return function(){"use strict";return function(e,n,t){!function(){var e;try{e="undefined"!=typeof Intl&&void 0!==Intl.Collator?Intl.Collator("generic",{sensitivity:"base"}):null}catch(e){console.log("Collator could not be initialized and wouldn't be used")}var a=[],r=[],s={get:function(n,t,s){var o,i,d,c,b,f,u=s&&e&&s.useCollator,l=n.length,m=t.length;if(0===l)return m;if(0===m)return l;for(d=0;d<m;++d)a[d]=d,r[d]=t.charCodeAt(d);if(a[m]=m,u)for(d=0;d<l;++d){for(i=d+1,c=0;c<m;++c)o=i,f=0===e.compare(n.charAt(d),String.fromCharCode(r[c])),(i=a[c]+(f?0:1))>(b=o+1)&&(i=b),i>(b=a[c+1]+1)&&(i=b),a[c]=o;a[c]=i}else for(d=0;d<l;++d){for(i=d+1,c=0;c<m;++c)o=i,f=n.charCodeAt(d)===r[c],(i=a[c]+(f?0:1))>(b=o+1)&&(i=b),i>(b=a[c+1]+1)&&(i=b),a[c]=o;a[c]=i}return i}};"undefined"!=typeof define&&null!==define&&define.amd?define((function(){return s})):null!=n&&void 0!==t&&n.exports===t?n.exports=s:"undefined"!=typeof self&&"function"==typeof self.postMessage&&"function"==typeof self.importScripts?self.Levenshtein=s:"undefined"!=typeof window&&null!==window&&(window.Levenshtein=s)}()}}},{package:"fast-levenshtein",file:"/home/gudahtt/projects/metamask-extension/node_modules/fast-levenshtein/levenshtein.js"}],[4299,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports=s,s.default=s,s.stable=d,s.stableStringify=d;var a=[],r=[];function s(e,n,t){var s;for(o(e,"",[],undefined),s=0===r.length?JSON.stringify(e,n,t):JSON.stringify(e,b(n),t);0!==a.length;){var i=a.pop();4===i.length?Object.defineProperty(i[0],i[1],i[3]):i[0][i[1]]=i[2]}return s}function o(e,n,t,s){var i;if("object"==typeof e&&null!==e){for(i=0;i<t.length;i++)if(t[i]===e){var d=Object.getOwnPropertyDescriptor(s,n);return void(d.get!==undefined?d.configurable?(Object.defineProperty(s,n,{value:"[Circular]"}),a.push([s,n,e,d])):r.push([e,n]):(s[n]="[Circular]",a.push([s,n,e])))}if(t.push(e),Array.isArray(e))for(i=0;i<e.length;i++)o(e[i],i,t,e);else{var c=Object.keys(e);for(i=0;i<c.length;i++){var b=c[i];o(e[b],b,t,e)}}t.pop()}}function i(e,n){return e<n?-1:e>n?1:0}function d(e,n,t){var s,o=c(e,"",[],undefined)||e;for(s=0===r.length?JSON.stringify(o,n,t):JSON.stringify(o,b(n),t);0!==a.length;){var i=a.pop();4===i.length?Object.defineProperty(i[0],i[1],i[3]):i[0][i[1]]=i[2]}return s}function c(e,n,t,s){var o;if("object"==typeof e&&null!==e){for(o=0;o<t.length;o++)if(t[o]===e){var d=Object.getOwnPropertyDescriptor(s,n);return void(d.get!==undefined?d.configurable?(Object.defineProperty(s,n,{value:"[Circular]"}),a.push([s,n,e,d])):r.push([e,n]):(s[n]="[Circular]",a.push([s,n,e])))}if("function"==typeof e.toJSON)return;if(t.push(e),Array.isArray(e))for(o=0;o<e.length;o++)c(e[o],o,t,e);else{var b={},f=Object.keys(e).sort(i);for(o=0;o<f.length;o++){var u=f[o];c(e[u],u,t,e),b[u]=e[u]}if(s===undefined)return b;a.push([s,n,e]),s[n]=b}t.pop()}}function b(e){return e=e!==undefined?e:function(e,n){return n},function(n,t){if(r.length>0)for(var a=0;a<r.length;a++){var s=r[a];if(s[1]===n&&s[0]===t){t="[Circular]",r.splice(a,1);break}}return e.call(this,n,t)}}}}},{package:"fast-safe-stringify",file:"/home/gudahtt/projects/metamask-extension/node_modules/fast-safe-stringify/index.js"}],[430,{},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="address/5.5.0"}}},{package:"@ethersproject/address",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/address/lib/_version.js"}],[431,{"./_version":430,"@ethersproject/bignumber":438,"@ethersproject/bytes":440,"@ethersproject/keccak256":463,"@ethersproject/logger":465,"@ethersproject/rlp":495},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getCreate2Address=t.getContractAddress=t.getIcapAddress=t.isAddress=t.getAddress=void 0;var a=e("@ethersproject/bytes"),r=e("@ethersproject/bignumber"),s=e("@ethersproject/keccak256"),o=e("@ethersproject/rlp"),i=e("@ethersproject/logger"),d=e("./_version"),c=new i.Logger(d.version);function b(e){(0,a.isHexString)(e,20)||c.throwArgumentError("invalid address","address",e);for(var n=(e=e.toLowerCase()).substring(2).split(""),t=new Uint8Array(40),r=0;r<40;r++)t[r]=n[r].charCodeAt(0);var o=(0,a.arrayify)((0,s.keccak256)(t));for(r=0;r<40;r+=2)o[r>>1]>>4>=8&&(n[r]=n[r].toUpperCase()),(15&o[r>>1])>=8&&(n[r+1]=n[r+1].toUpperCase());return"0x"+n.join("")}for(var f={},u=0;u<10;u++)f[String(u)]=String(u);for(u=0;u<26;u++)f[String.fromCharCode(65+u)]=String(10+u);var l,m=Math.floor((l=9007199254740991,Math.log10?Math.log10(l):Math.log(l)/Math.LN10));function h(e){for(var n=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((function(e){return f[e]})).join("");n.length>=m;){var t=n.substring(0,m);n=parseInt(t,10)%97+n.substring(t.length)}for(var a=String(98-parseInt(n,10)%97);a.length<2;)a="0"+a;return a}function p(e){var n=null;if("string"!=typeof e&&c.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==e.substring(0,2)&&(e="0x"+e),n=b(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&n!==e&&c.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==h(e)&&c.throwArgumentError("bad icap checksum","address",e),n=(0,r._base36To16)(e.substring(4));n.length<40;)n="0"+n;n=b("0x"+n)}else c.throwArgumentError("invalid address","address",e);return n}t.getAddress=p,t.isAddress=function(e){try{return p(e),!0}catch(e){}return!1},t.getIcapAddress=function(e){for(var n=(0,r._base16To36)(p(e).substring(2)).toUpperCase();n.length<30;)n="0"+n;return"XE"+h("XE00"+n)+n},t.getContractAddress=function(e){var n=null;try{n=p(e.from)}catch(n){c.throwArgumentError("missing from address","transaction",e)}var t=(0,a.stripZeros)((0,a.arrayify)(r.BigNumber.from(e.nonce).toHexString()));return p((0,a.hexDataSlice)((0,s.keccak256)((0,o.encode)([n,t])),12))},t.getCreate2Address=function(e,n,t){return 32!==(0,a.hexDataLength)(n)&&c.throwArgumentError("salt must be 32 bytes","salt",n),32!==(0,a.hexDataLength)(t)&&c.throwArgumentError("initCodeHash must be 32 bytes","initCodeHash",t),p((0,a.hexDataSlice)((0,s.keccak256)((0,a.concat)(["0xff",p(e),n,t])),12))}}}},{package:"@ethersproject/address",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/address/lib/index.js"}],[432,{"@ethersproject/bytes":440},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.encode=t.decode=void 0;var a=e("@ethersproject/bytes");t.decode=function(e){e=atob(e);for(var n=[],t=0;t<e.length;t++)n.push(e.charCodeAt(t));return(0,a.arrayify)(n)},t.encode=function(e){e=(0,a.arrayify)(e);for(var n="",t=0;t<e.length;t++)n+=String.fromCharCode(e[t]);return btoa(n)}}}},{package:"@ethersproject/base64",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/base64/lib/browser-base64.js"}],[433,{"./base64":432},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.encode=t.decode=void 0;var a=e("./base64");Object.defineProperty(t,"decode",{enumerable:!0,get:function(){return a.decode}}),Object.defineProperty(t,"encode",{enumerable:!0,get:function(){return a.encode}})}}},{package:"@ethersproject/base64",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/base64/lib/index.js"}],[434,{"@ethersproject/bytes":440,"@ethersproject/properties":471},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Base58=t.Base32=t.BaseX=void 0;var a=e("@ethersproject/bytes"),r=e("@ethersproject/properties"),s=function(){function e(e){(0,r.defineReadOnly)(this,"alphabet",e),(0,r.defineReadOnly)(this,"base",e.length),(0,r.defineReadOnly)(this,"_alphabetMap",{}),(0,r.defineReadOnly)(this,"_leader",e.charAt(0));for(var n=0;n<e.length;n++)this._alphabetMap[e.charAt(n)]=n}return e.prototype.encode=function(e){var n=(0,a.arrayify)(e);if(0===n.length)return"";for(var t=[0],r=0;r<n.length;++r){for(var s=n[r],o=0;o<t.length;++o)s+=t[o]<<8,t[o]=s%this.base,s=s/this.base|0;for(;s>0;)t.push(s%this.base),s=s/this.base|0}for(var i="",d=0;0===n[d]&&d<n.length-1;++d)i+=this._leader;for(var c=t.length-1;c>=0;--c)i+=this.alphabet[t[c]];return i},e.prototype.decode=function(e){if("string"!=typeof e)throw new TypeError("Expected String");var n=[];if(0===e.length)return new Uint8Array(n);n.push(0);for(var t=0;t<e.length;t++){var r=this._alphabetMap[e[t]];if(r===undefined)throw new Error("Non-base"+this.base+" character");for(var s=r,o=0;o<n.length;++o)s+=n[o]*this.base,n[o]=255&s,s>>=8;for(;s>0;)n.push(255&s),s>>=8}for(var i=0;e[i]===this._leader&&i<e.length-1;++i)n.push(0);return(0,a.arrayify)(new Uint8Array(n.reverse()))},e}();t.BaseX=s;var o=new s("abcdefghijklmnopqrstuvwxyz234567");t.Base32=o;var i=new s("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");t.Base58=i}}},{package:"@ethersproject/basex",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/basex/lib/index.js"}],[435,{},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.version=void 0,t.version="bignumber/5.5.0"}}},{package:"@ethersproject/bignumber",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/bignumber/lib/_version.js"}],[436,{"./_version":435,"@ethersproject/bytes":440,"@ethersproject/logger":465,"bn.js":2037},function(){with(this)return function(){"use strict";return function(e,n,t){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t._base16To36=t._base36To16=t.BigNumber=t.isBigNumberish=void 0;var r=a(e("bn.js")).default.BN,s=e("@ethersproject/bytes"),o=e("@ethersproject/logger"),i=e("./_version"),d=new o.Logger(i.version),c={},b=9007199254740991;t.isBigNumberish=function(e){return null!=e&&(u.isBigNumber(e)||"number"==typeof e&&e%1==0||"string"==typeof e&&!!e.match(/^-?[0-9]+$/)||(0,s.isHexString)(e)||"bigint"==typeof e||(0,s.isBytes)(e))};var f=!1,u=function(){function e(n,t){var a=this.constructor;d.checkNew(a,e),n!==c&&d.throwError("cannot call constructor directly; use BigNumber.from",o.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this)}return e.prototype.fromTwos=function(e){return m(h(this).fromTwos(e))},e.prototype.toTwos=function(e){return m(h(this).toTwos(e))},e.prototype.abs=function(){return"-"===this._hex[0]?e.from(this._hex.substring(1)):this},e.prototype.add=function(e){return m(h(this).add(h(e)))},e.prototype.sub=function(e){return m(h(this).sub(h(e)))},e.prototype.div=function(n){return e.from(n).isZero()&&p("division by zero","div"),m(h(this).div(h(n)))},e.prototype.mul=function(e){return m(h(this).mul(h(e)))},e.prototype.mod=function(e){var n=h(e);return n.isNeg()&&p("cannot modulo negative values","mod"),m(h(this).umod(n))},e.prototype.pow=function(e){var n=h(e);return n.isNeg()&&p("cannot raise to negative values","pow"),m(h(this).pow(n))},e.prototype.and=function(e){var n=h(e);return(this.isNegative()||n.isNeg())&&p("cannot 'and' negative values","and"),m(h(this).and(n))},e.prototype.or=function(e){var n=h(e);return(this.isNegative()||n.isNeg())&&p("cannot 'or' negative values","or"),m(h(this).or(n))},e.prototype.xor=function(e){var n=h(e);return(this.isNegative()||n.isNeg())&&p("cannot 'xor' negative values","xor"),m(h(this).xor(n))},e.prototype.mask=function(e){return(this.isNegative()||e<0)&&p("cannot mask negative values","mask"),m(h(this).maskn(e))},e.prototype.shl=function(e){return(this.isNegative()||e<0)&&p("cannot shift negative values","shl"),m(h(this).shln(e))},e.prototype.shr=function(e){return(this.isNegative()||e<0)&&p("cannot shift negative values","shr"),m(h(this).shrn(e))},e.prototype.eq=function(e){return h(this).eq(h(e))},e.prototype.lt=function(e){return h(this).lt(h(e))},e.prototype.lte=function(e){return h(this).lte(h(e))},e.prototype.gt=function(e){return h(this).gt(h(e))},e.prototype.gte=function(e){return h(this).gte(h(e))},e.prototype.isNegative=function(){return"-"===this._hex[0]},e.prototype.isZero=function(){return h(this).isZero()},e.prototype.toNumber=function(){try{return h(this).toNumber()}catch(e){p("overflow","toNumber",this.toString())}return null},e.prototype.toBigInt=function(){try{return BigInt(this.toString())}catch(e){}return d.throwError("this platform does not support BigInt",o.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})},e.prototype.toString=function(){return arguments.length>0&&(10===arguments[0]?f||(f=!0,d.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?d.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",o.Logger.errors.UNEXPECTED_ARGUMENT,{}):d.throwError("BigNumber.toString does not accept parameters",o.Logger.errors.UNEXPECTED_ARGUMENT,{})),h(this).toString(10)},e.prototype.toHexString=function(){return this._hex},e.prototype.toJSON=function(e){return{type:"BigNumber",hex:this.toHexString()}},e.from=function(n){if(n instanceof e)return n;if("string"==typeof n)return n.match(/^-?0x[0-9a-f]+$/i)?new e(c,l(n)):n.match(/^-?[0-9]+$/)?new e(c,l(new r(n))):d.throwArgumentError("invalid BigNumber string","value",n);if("number"==typeof n)return n%1&&p("underflow","BigNumber.from",n),(n>=b||n<=-b)&&p("overflow","BigNumber.from",n),e.from(String(n));var t,a=n;if("bigint"==typeof a)return e.from(a.toString());if((0,s.isBytes)(a))return e.from((0,s.hexlify)(a));if(a)if(a.toHexString){if("string"==typeof(t=a.toHexString()))return e.from(t)}else if(null==(t=a._hex)&&"BigNumber"===a.type&&(t=a.hex),"string"==typeof t&&((0,s.isHexString)(t)||"-"===t[0]&&(0,s.isHexString)(t.substring(1))))return e.from(t);return d.throwArgumentError("invalid BigNumber value","value",n)},e.isBigNumber=function(e){return!(!e||!e._isBigNumber)},e}();function l(e){if("string"!=typeof e)return l(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&d.throwArgumentError("invalid hex","value",e),"0x00"===(e=l(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function m(e){return u.from(l(e))}function h(e){var n=u.from(e).toHexString();return"-"===n[0]?new r("-"+n.substring(3),16):new r(n.substring(2),16)}function p(e,n,t){var a={fault:e,operation:n};return null!=t&&(a.value=t),d.throwError(e,o.Logger.errors.NUMERIC_FAULT,a)}t.BigNumber=u,t._base36To16=function(e){return new r(e,36).toString(16)},t._base16To36=function(e){return new r(e,16).toString(36)}}}},{package:"@ethersproject/bignumber",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/bignumber/lib/bignumber.js"}],[4361,{inherits:4404,"safe-buffer":5739,stream:2084},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("safe-buffer").Buffer,r=e("stream").Transform;function s(e){r.call(this),this._block=a.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}e("inherits")(s,r),s.prototype._transform=function(e,n,t){var a=null;try{this.update(e,n)}catch(e){a=e}t(a)},s.prototype._flush=function(e){var n=null;try{this.push(this.digest())}catch(e){n=e}e(n)},s.prototype.update=function(e,n){if(function(e,n){if(!a.isBuffer(e)&&"string"!=typeof e)throw new TypeError(n+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");a.isBuffer(e)||(e=a.from(e,n));for(var t=this._block,r=0;this._blockOffset+e.length-r>=this._blockSize;){for(var s=this._blockOffset;s<this._blockSize;)t[s++]=e[r++];this._update(),this._blockOffset=0}for(;r<e.length;)t[this._blockOffset++]=e[r++];for(var o=0,i=8*e.length;i>0;++o)this._length[o]+=i,(i=this._length[o]/4294967296|0)>0&&(this._length[o]-=4294967296*i);return this},s.prototype._update=function(){throw new Error("_update is not implemented")},s.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var n=this._digest();e!==undefined&&(n=n.toString(e)),this._block.fill(0),this._blockOffset=0;for(var t=0;t<4;++t)this._length[t]=0;return n},s.prototype._digest=function(){throw new Error("_digest is not implemented")},n.exports=s}}},{package:"hash-base",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash-base/index.js"}],[4362,{"./hash/common":4363,"./hash/hmac":4364,"./hash/ripemd":4365,"./hash/sha":4366,"./hash/utils":4373},function(){with(this)return function(){"use strict";return function(e,n,t){var a=t;a.utils=e("./hash/utils"),a.common=e("./hash/common"),a.sha=e("./hash/sha"),a.ripemd=e("./hash/ripemd"),a.hmac=e("./hash/hmac"),a.sha1=a.sha.sha1,a.sha256=a.sha.sha256,a.sha224=a.sha.sha224,a.sha384=a.sha.sha384,a.sha512=a.sha.sha512,a.ripemd160=a.ripemd.ripemd160}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash.js"}],[4363,{"./utils":4373,"minimalistic-assert":5197},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("./utils"),r=e("minimalistic-assert");function s(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=s,s.prototype.update=function(e,n){if(e=a.toArray(e,n),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var t=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-t,e.length),0===this.pending.length&&(this.pending=null),e=a.join32(e,0,e.length-t,this.endian);for(var r=0;r<e.length;r+=this._delta32)this._update(e,r,r+this._delta32)}return this},s.prototype.digest=function(e){return this.update(this._pad()),r(null===this.pending),this._digest(e)},s.prototype._pad=function(){var e=this.pendingTotal,n=this._delta8,t=n-(e+this.padLength)%n,a=new Array(t+this.padLength);a[0]=128;for(var r=1;r<t;r++)a[r]=0;if(e<<=3,"big"===this.endian){for(var s=8;s<this.padLength;s++)a[r++]=0;a[r++]=0,a[r++]=0,a[r++]=0,a[r++]=0,a[r++]=e>>>24&255,a[r++]=e>>>16&255,a[r++]=e>>>8&255,a[r++]=255&e}else for(a[r++]=255&e,a[r++]=e>>>8&255,a[r++]=e>>>16&255,a[r++]=e>>>24&255,a[r++]=0,a[r++]=0,a[r++]=0,a[r++]=0,s=8;s<this.padLength;s++)a[r++]=0;return a}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/common.js"}],[4364,{"./utils":4373,"minimalistic-assert":5197},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("./utils"),r=e("minimalistic-assert");function s(e,n,t){if(!(this instanceof s))return new s(e,n,t);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(a.toArray(n,t))}n.exports=s,s.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),r(e.length<=this.blockSize);for(var n=e.length;n<this.blockSize;n++)e.push(0);for(n=0;n<e.length;n++)e[n]^=54;for(this.inner=(new this.Hash).update(e),n=0;n<e.length;n++)e[n]^=106;this.outer=(new this.Hash).update(e)},s.prototype.update=function(e,n){return this.inner.update(e,n),this},s.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/hmac.js"}],[4365,{"./common":4363,"./utils":4373},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("./utils"),r=e("./common"),s=a.rotl32,o=a.sum32,i=a.sum32_3,d=a.sum32_4,c=r.BlockHash;function b(){if(!(this instanceof b))return new b;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(e,n,t,a){return e<=15?n^t^a:e<=31?n&t|~n&a:e<=47?(n|~t)^a:e<=63?n&a|t&~a:n^(t|~a)}function u(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}a.inherits(b,c),t.ripemd160=b,b.blockSize=512,b.outSize=160,b.hmacStrength=192,b.padLength=64,b.prototype._update=function(e,n){for(var t=this.h[0],a=this.h[1],r=this.h[2],c=this.h[3],b=this.h[4],_=t,g=a,v=r,L=c,w=b,T=0;T<80;T++){var x=o(s(d(t,f(T,a,r,c),e[m[T]+n],u(T)),p[T]),b);t=b,b=c,c=s(r,10),r=a,a=x,x=o(s(d(_,f(79-T,g,v,L),e[h[T]+n],l(T)),y[T]),w),_=w,w=L,L=s(v,10),v=g,g=x}x=i(this.h[1],r,L),this.h[1]=i(this.h[2],c,w),this.h[2]=i(this.h[3],b,_),this.h[3]=i(this.h[4],t,g),this.h[4]=i(this.h[0],a,v),this.h[0]=x},b.prototype._digest=function(e){return"hex"===e?a.toHex32(this.h,"little"):a.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],h=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],p=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],y=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/ripemd.js"}],[4366,{"./sha/1":4367,"./sha/224":4368,"./sha/256":4369,"./sha/384":4370,"./sha/512":4371},function(){with(this)return function(){"use strict";return function(e,n,t){t.sha1=e("./sha/1"),t.sha224=e("./sha/224"),t.sha256=e("./sha/256"),t.sha384=e("./sha/384"),t.sha512=e("./sha/512")}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha.js"}],[4367,{"../common":4363,"../utils":4373,"./common":4372},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("../utils"),r=e("../common"),s=e("./common"),o=a.rotl32,i=a.sum32,d=a.sum32_5,c=s.ft_1,b=r.BlockHash,f=[1518500249,1859775393,2400959708,3395469782];function u(){if(!(this instanceof u))return new u;b.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}a.inherits(u,b),n.exports=u,u.blockSize=512,u.outSize=160,u.hmacStrength=80,u.padLength=64,u.prototype._update=function(e,n){for(var t=this.W,a=0;a<16;a++)t[a]=e[n+a];for(;a<t.length;a++)t[a]=o(t[a-3]^t[a-8]^t[a-14]^t[a-16],1);var r=this.h[0],s=this.h[1],b=this.h[2],u=this.h[3],l=this.h[4];for(a=0;a<t.length;a++){var m=~~(a/20),h=d(o(r,5),c(m,s,b,u),l,t[a],f[m]);l=u,u=b,b=o(s,30),s=r,r=h}this.h[0]=i(this.h[0],r),this.h[1]=i(this.h[1],s),this.h[2]=i(this.h[2],b),this.h[3]=i(this.h[3],u),this.h[4]=i(this.h[4],l)},u.prototype._digest=function(e){return"hex"===e?a.toHex32(this.h,"big"):a.split32(this.h,"big")}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha/1.js"}],[4368,{"../utils":4373,"./256":4369},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("../utils"),r=e("./256");function s(){if(!(this instanceof s))return new s;r.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}a.inherits(s,r),n.exports=s,s.blockSize=512,s.outSize=224,s.hmacStrength=192,s.padLength=64,s.prototype._digest=function(e){return"hex"===e?a.toHex32(this.h.slice(0,7),"big"):a.split32(this.h.slice(0,7),"big")}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha/224.js"}],[4369,{"../common":4363,"../utils":4373,"./common":4372,"minimalistic-assert":5197},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("../utils"),r=e("../common"),s=e("./common"),o=e("minimalistic-assert"),i=a.sum32,d=a.sum32_4,c=a.sum32_5,b=s.ch32,f=s.maj32,u=s.s0_256,l=s.s1_256,m=s.g0_256,h=s.g1_256,p=r.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function _(){if(!(this instanceof _))return new _;p.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}a.inherits(_,p),n.exports=_,_.blockSize=512,_.outSize=256,_.hmacStrength=192,_.padLength=64,_.prototype._update=function(e,n){for(var t=this.W,a=0;a<16;a++)t[a]=e[n+a];for(;a<t.length;a++)t[a]=d(h(t[a-2]),t[a-7],m(t[a-15]),t[a-16]);var r=this.h[0],s=this.h[1],p=this.h[2],y=this.h[3],_=this.h[4],g=this.h[5],v=this.h[6],L=this.h[7];for(o(this.k.length===t.length),a=0;a<t.length;a++){var w=c(L,l(_),b(_,g,v),this.k[a],t[a]),T=i(u(r),f(r,s,p));L=v,v=g,g=_,_=i(y,w),y=p,p=s,s=r,r=i(w,T)}this.h[0]=i(this.h[0],r),this.h[1]=i(this.h[1],s),this.h[2]=i(this.h[2],p),this.h[3]=i(this.h[3],y),this.h[4]=i(this.h[4],_),this.h[5]=i(this.h[5],g),this.h[6]=i(this.h[6],v),this.h[7]=i(this.h[7],L)},_.prototype._digest=function(e){return"hex"===e?a.toHex32(this.h,"big"):a.split32(this.h,"big")}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha/256.js"}],[437,{"./_version":435,"./bignumber":436,"@ethersproject/bytes":440,"@ethersproject/logger":465},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FixedNumber=t.FixedFormat=t.parseFixed=t.formatFixed=void 0;var a=e("@ethersproject/bytes"),r=e("@ethersproject/logger"),s=e("./_version"),o=new r.Logger(s.version),i=e("./bignumber"),d={},c=i.BigNumber.from(0),b=i.BigNumber.from(-1);function f(e,n,t,a){var s={fault:n,operation:t};return a!==undefined&&(s.value=a),o.throwError(e,r.Logger.errors.NUMERIC_FAULT,s)}for(var u="0";u.length<256;)u+=u;function l(e){if("number"!=typeof e)try{e=i.BigNumber.from(e).toNumber()}catch(e){}return"number"==typeof e&&e>=0&&e<=256&&!(e%1)?"1"+u.substring(0,e):o.throwArgumentError("invalid decimal size","decimals",e)}function m(e,n){null==n&&(n=0);var t=l(n),a=(e=i.BigNumber.from(e)).lt(c);a&&(e=e.mul(b));for(var r=e.mod(t).toString();r.length<t.length-1;)r="0"+r;r=r.match(/^([0-9]*[1-9]|0)(0*)/)[1];var s=e.div(t).toString();return e=1===t.length?s:s+"."+r,a&&(e="-"+e),e}function h(e,n){null==n&&(n=0);var t=l(n);"string"==typeof e&&e.match(/^-?[0-9.]+$/)||o.throwArgumentError("invalid decimal value","value",e);var a="-"===e.substring(0,1);a&&(e=e.substring(1)),"."===e&&o.throwArgumentError("missing value","value",e);var r=e.split(".");r.length>2&&o.throwArgumentError("too many decimal points","value",e);var s=r[0],d=r[1];for(s||(s="0"),d||(d="0");"0"===d[d.length-1];)d=d.substring(0,d.length-1);for(d.length>t.length-1&&f("fractional component exceeds decimals","underflow","parseFixed"),""===d&&(d="0");d.length<t.length-1;)d+="0";var c=i.BigNumber.from(s),u=i.BigNumber.from(d),m=c.mul(t).add(u);return a&&(m=m.mul(b)),m}t.formatFixed=m,t.parseFixed=h;var p=function(){function e(e,n,t,a){e!==d&&o.throwError("cannot use FixedFormat constructor; use FixedFormat.from",r.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=n,this.width=t,this.decimals=a,this.name=(n?"":"u")+"fixed"+String(t)+"x"+String(a),this._multiplier=l(a),Object.freeze(this)}return e.from=function(n){if(n instanceof e)return n;"number"==typeof n&&(n="fixed128x"+n);var t=!0,a=128,r=18;if("string"==typeof n)if("fixed"===n);else if("ufixed"===n)t=!1;else{var s=n.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);s||o.throwArgumentError("invalid fixed format","format",n),t="u"!==s[1],a=parseInt(s[2]),r=parseInt(s[3])}else if(n){var i=function(e,t,a){return null==n[e]?a:(typeof n[e]!==t&&o.throwArgumentError("invalid fixed format ("+e+" not "+t+")","format."+e,n[e]),n[e])};t=i("signed","boolean",t),a=i("width","number",a),r=i("decimals","number",r)}return a%8&&o.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",a),r>80&&o.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",r),new e(d,t,a,r)},e}();t.FixedFormat=p;var y=function(){function e(n,t,a,s){var i=this.constructor;o.checkNew(i,e),n!==d&&o.throwError("cannot use FixedNumber constructor; use FixedNumber.from",r.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=s,this._hex=t,this._value=a,this._isFixedNumber=!0,Object.freeze(this)}return e.prototype._checkFormat=function(e){this.format.name!==e.format.name&&o.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",e)},e.prototype.addUnsafe=function(n){this._checkFormat(n);var t=h(this._value,this.format.decimals),a=h(n._value,n.format.decimals);return e.fromValue(t.add(a),this.format.decimals,this.format)},e.prototype.subUnsafe=function(n){this._checkFormat(n);var t=h(this._value,this.format.decimals),a=h(n._value,n.format.decimals);return e.fromValue(t.sub(a),this.format.decimals,this.format)},e.prototype.mulUnsafe=function(n){this._checkFormat(n);var t=h(this._value,this.format.decimals),a=h(n._value,n.format.decimals);return e.fromValue(t.mul(a).div(this.format._multiplier),this.format.decimals,this.format)},e.prototype.divUnsafe=function(n){this._checkFormat(n);var t=h(this._value,this.format.decimals),a=h(n._value,n.format.decimals);return e.fromValue(t.mul(this.format._multiplier).div(a),this.format.decimals,this.format)},e.prototype.floor=function(){var n=this.toString().split(".");1===n.length&&n.push("0");var t=e.from(n[0],this.format),a=!n[1].match(/^(0*)$/);return this.isNegative()&&a&&(t=t.subUnsafe(_.toFormat(t.format))),t},e.prototype.ceiling=function(){var n=this.toString().split(".");1===n.length&&n.push("0");var t=e.from(n[0],this.format),a=!n[1].match(/^(0*)$/);return!this.isNegative()&&a&&(t=t.addUnsafe(_.toFormat(t.format))),t},e.prototype.round=function(n){null==n&&(n=0);var t=this.toString().split(".");if(1===t.length&&t.push("0"),(n<0||n>80||n%1)&&o.throwArgumentError("invalid decimal count","decimals",n),t[1].length<=n)return this;var a=e.from("1"+u.substring(0,n),this.format),r=g.toFormat(this.format);return this.mulUnsafe(a).addUnsafe(r).floor().divUnsafe(a)},e.prototype.isZero=function(){return"0.0"===this._value||"0"===this._value},e.prototype.isNegative=function(){return"-"===this._value[0]},e.prototype.toString=function(){return this._value},e.prototype.toHexString=function(e){if(null==e)return this._hex;e%8&&o.throwArgumentError("invalid byte width","width",e);var n=i.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString();return(0,a.hexZeroPad)(n,e/8)},e.prototype.toUnsafeFloat=function(){return parseFloat(this.toString())},e.prototype.toFormat=function(n){return e.fromString(this._value,n)},e.fromValue=function(n,t,a){return null!=a||null==t||(0,i.isBigNumberish)(t)||(a=t,t=null),null==t&&(t=0),null==a&&(a="fixed"),e.fromString(m(n,t),p.from(a))},e.fromString=function(n,t){null==t&&(t="fixed");var r=p.from(t),s=h(n,r.decimals);!r.signed&&s.lt(c)&&f("unsigned value cannot be negative","overflow","value",n);var o=null;r.signed?o=s.toTwos(r.width).toHexString():(o=s.toHexString(),o=(0,a.hexZeroPad)(o,r.width/8));var i=m(s,r.decimals);return new e(d,o,i,r)},e.fromBytes=function(n,t){null==t&&(t="fixed");var r=p.from(t);if((0,a.arrayify)(n).length>r.width/8)throw new Error("overflow");var s=i.BigNumber.from(n);r.signed&&(s=s.fromTwos(r.width));var o=s.toTwos((r.signed?0:1)+r.width).toHexString(),c=m(s,r.decimals);return new e(d,o,c,r)},e.from=function(n,t){if("string"==typeof n)return e.fromString(n,t);if((0,a.isBytes)(n))return e.fromBytes(n,t);try{return e.fromValue(n,0,t)}catch(e){if(e.code!==r.Logger.errors.INVALID_ARGUMENT)throw e}return o.throwArgumentError("invalid FixedNumber value","value",n)},e.isFixedNumber=function(e){return!(!e||!e._isFixedNumber)},e}();t.FixedNumber=y;var _=y.from(1),g=y.from("0.5")}}},{package:"@ethersproject/bignumber",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/bignumber/lib/fixednumber.js"}],[4370,{"../utils":4373,"./512":4371},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("../utils"),r=e("./512");function s(){if(!(this instanceof s))return new s;r.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}a.inherits(s,r),n.exports=s,s.blockSize=1024,s.outSize=384,s.hmacStrength=192,s.padLength=128,s.prototype._digest=function(e){return"hex"===e?a.toHex32(this.h.slice(0,12),"big"):a.split32(this.h.slice(0,12),"big")}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha/384.js"}],[4371,{"../common":4363,"../utils":4373,"minimalistic-assert":5197},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("../utils"),r=e("../common"),s=e("minimalistic-assert"),o=a.rotr64_hi,i=a.rotr64_lo,d=a.shr64_hi,c=a.shr64_lo,b=a.sum64,f=a.sum64_hi,u=a.sum64_lo,l=a.sum64_4_hi,m=a.sum64_4_lo,h=a.sum64_5_hi,p=a.sum64_5_lo,y=r.BlockHash,_=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function g(){if(!(this instanceof g))return new g;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=_,this.W=new Array(160)}function v(e,n,t,a,r){var s=e&t^~e&r;return s<0&&(s+=4294967296),s}function L(e,n,t,a,r,s){var o=n&a^~n&s;return o<0&&(o+=4294967296),o}function w(e,n,t,a,r){var s=e&t^e&r^t&r;return s<0&&(s+=4294967296),s}function T(e,n,t,a,r,s){var o=n&a^n&s^a&s;return o<0&&(o+=4294967296),o}function x(e,n){var t=o(e,n,28)^o(n,e,2)^o(n,e,7);return t<0&&(t+=4294967296),t}function M(e,n){var t=i(e,n,28)^i(n,e,2)^i(n,e,7);return t<0&&(t+=4294967296),t}function C(e,n){var t=o(e,n,14)^o(e,n,18)^o(n,e,9);return t<0&&(t+=4294967296),t}function E(e,n){var t=i(e,n,14)^i(e,n,18)^i(n,e,9);return t<0&&(t+=4294967296),t}function R(e,n){var t=o(e,n,1)^o(e,n,8)^d(e,n,7);return t<0&&(t+=4294967296),t}function A(e,n){var t=i(e,n,1)^i(e,n,8)^c(e,n,7);return t<0&&(t+=4294967296),t}function S(e,n){var t=o(e,n,19)^o(n,e,29)^d(e,n,6);return t<0&&(t+=4294967296),t}function O(e,n){var t=i(e,n,19)^i(n,e,29)^c(e,n,6);return t<0&&(t+=4294967296),t}a.inherits(g,y),n.exports=g,g.blockSize=1024,g.outSize=512,g.hmacStrength=192,g.padLength=128,g.prototype._prepareBlock=function(e,n){for(var t=this.W,a=0;a<32;a++)t[a]=e[n+a];for(;a<t.length;a+=2){var r=S(t[a-4],t[a-3]),s=O(t[a-4],t[a-3]),o=t[a-14],i=t[a-13],d=R(t[a-30],t[a-29]),c=A(t[a-30],t[a-29]),b=t[a-32],f=t[a-31];t[a]=l(r,s,o,i,d,c,b,f),t[a+1]=m(r,s,o,i,d,c,b,f)}},g.prototype._update=function(e,n){this._prepareBlock(e,n);var t=this.W,a=this.h[0],r=this.h[1],o=this.h[2],i=this.h[3],d=this.h[4],c=this.h[5],l=this.h[6],m=this.h[7],y=this.h[8],_=this.h[9],g=this.h[10],R=this.h[11],A=this.h[12],S=this.h[13],O=this.h[14],P=this.h[15];s(this.k.length===t.length);for(var I=0;I<t.length;I+=2){var k=O,N=P,V=C(y,_),B=E(y,_),D=v(y,_,g,R,A),H=L(y,_,g,R,A,S),F=this.k[I],U=this.k[I+1],j=t[I],z=t[I+1],G=h(k,N,V,B,D,H,F,U,j,z),q=p(k,N,V,B,D,H,F,U,j,z);k=x(a,r),N=M(a,r),V=w(a,r,o,i,d),B=T(a,r,o,i,d,c);var W=f(k,N,V,B),X=u(k,N,V,B);O=A,P=S,A=g,S=R,g=y,R=_,y=f(l,m,G,q),_=u(m,m,G,q),l=d,m=c,d=o,c=i,o=a,i=r,a=f(G,q,W,X),r=u(G,q,W,X)}b(this.h,0,a,r),b(this.h,2,o,i),b(this.h,4,d,c),b(this.h,6,l,m),b(this.h,8,y,_),b(this.h,10,g,R),b(this.h,12,A,S),b(this.h,14,O,P)},g.prototype._digest=function(e){return"hex"===e?a.toHex32(this.h,"big"):a.split32(this.h,"big")}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha/512.js"}],[4372,{"../utils":4373},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("../utils").rotr32;function r(e,n,t){return e&n^~e&t}function s(e,n,t){return e&n^e&t^n&t}function o(e,n,t){return e^n^t}t.ft_1=function(e,n,t,a){return 0===e?r(n,t,a):1===e||3===e?o(n,t,a):2===e?s(n,t,a):void 0},t.ch32=r,t.maj32=s,t.p32=o,t.s0_256=function(e){return a(e,2)^a(e,13)^a(e,22)},t.s1_256=function(e){return a(e,6)^a(e,11)^a(e,25)},t.g0_256=function(e){return a(e,7)^a(e,18)^e>>>3},t.g1_256=function(e){return a(e,17)^a(e,19)^e>>>10}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/sha/common.js"}],[4373,{inherits:4404,"minimalistic-assert":5197},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("minimalistic-assert"),r=e("inherits");function s(e,n){return 55296==(64512&e.charCodeAt(n))&&(!(n<0||n+1>=e.length)&&56320==(64512&e.charCodeAt(n+1)))}function o(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function i(e){return 1===e.length?"0"+e:e}function d(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=r,t.toArray=function(e,n){if(Array.isArray(e))return e.slice();if(!e)return[];var t=[];if("string"==typeof e)if(n){if("hex"===n)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),r=0;r<e.length;r+=2)t.push(parseInt(e[r]+e[r+1],16))}else for(var a=0,r=0;r<e.length;r++){var o=e.charCodeAt(r);o<128?t[a++]=o:o<2048?(t[a++]=o>>6|192,t[a++]=63&o|128):s(e,r)?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++r)),t[a++]=o>>18|240,t[a++]=o>>12&63|128,t[a++]=o>>6&63|128,t[a++]=63&o|128):(t[a++]=o>>12|224,t[a++]=o>>6&63|128,t[a++]=63&o|128)}else for(r=0;r<e.length;r++)t[r]=0|e[r];return t},t.toHex=function(e){for(var n="",t=0;t<e.length;t++)n+=i(e[t].toString(16));return n},t.htonl=o,t.toHex32=function(e,n){for(var t="",a=0;a<e.length;a++){var r=e[a];"little"===n&&(r=o(r)),t+=d(r.toString(16))}return t},t.zero2=i,t.zero8=d,t.join32=function(e,n,t,r){var s=t-n;a(s%4==0);for(var o=new Array(s/4),i=0,d=n;i<o.length;i++,d+=4){var c;c="big"===r?e[d]<<24|e[d+1]<<16|e[d+2]<<8|e[d+3]:e[d+3]<<24|e[d+2]<<16|e[d+1]<<8|e[d],o[i]=c>>>0}return o},t.split32=function(e,n){for(var t=new Array(4*e.length),a=0,r=0;a<e.length;a++,r+=4){var s=e[a];"big"===n?(t[r]=s>>>24,t[r+1]=s>>>16&255,t[r+2]=s>>>8&255,t[r+3]=255&s):(t[r+3]=s>>>24,t[r+2]=s>>>16&255,t[r+1]=s>>>8&255,t[r]=255&s)}return t},t.rotr32=function(e,n){return e>>>n|e<<32-n},t.rotl32=function(e,n){return e<<n|e>>>32-n},t.sum32=function(e,n){return e+n>>>0},t.sum32_3=function(e,n,t){return e+n+t>>>0},t.sum32_4=function(e,n,t,a){return e+n+t+a>>>0},t.sum32_5=function(e,n,t,a,r){return e+n+t+a+r>>>0},t.sum64=function(e,n,t,a){var r=e[n],s=a+e[n+1]>>>0,o=(s<a?1:0)+t+r;e[n]=o>>>0,e[n+1]=s},t.sum64_hi=function(e,n,t,a){return(n+a>>>0<n?1:0)+e+t>>>0},t.sum64_lo=function(e,n,t,a){return n+a>>>0},t.sum64_4_hi=function(e,n,t,a,r,s,o,i){var d=0,c=n;return d+=(c=c+a>>>0)<n?1:0,d+=(c=c+s>>>0)<s?1:0,e+t+r+o+(d+=(c=c+i>>>0)<i?1:0)>>>0},t.sum64_4_lo=function(e,n,t,a,r,s,o,i){return n+a+s+i>>>0},t.sum64_5_hi=function(e,n,t,a,r,s,o,i,d,c){var b=0,f=n;return b+=(f=f+a>>>0)<n?1:0,b+=(f=f+s>>>0)<s?1:0,b+=(f=f+i>>>0)<i?1:0,e+t+r+o+d+(b+=(f=f+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,n,t,a,r,s,o,i,d,c){return n+a+s+i+c>>>0},t.rotr64_hi=function(e,n,t){return(n<<32-t|e>>>t)>>>0},t.rotr64_lo=function(e,n,t){return(e<<32-t|n>>>t)>>>0},t.shr64_hi=function(e,n,t){return e>>>t},t.shr64_lo=function(e,n,t){return(e<<32-t|n>>>t)>>>0}}}},{package:"hash.js",file:"/home/gudahtt/projects/metamask-extension/node_modules/hash.js/lib/hash/utils.js"}],[4375,{assert:1700,bs58check:2090,crypto:2191,"safe-buffer":5739,secp256k1:5750},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("assert"),r=e("safe-buffer").Buffer,s=e("crypto"),o=e("bs58check"),i=e("secp256k1"),d=r.from("Bitcoin seed","utf8"),c=2147483648,b={private:76066276,public:76067358};function f(e){this.versions=e||b,this.depth=0,this.index=0,this._privateKey=null,this._publicKey=null,this.chainCode=null,this._fingerprint=0,this.parentFingerprint=0}function u(e,n,t){var a=r.allocUnsafe(78);a.writeUInt32BE(n,0),a.writeUInt8(e.depth,4);var s=e.depth?e.parentFingerprint:0;return a.writeUInt32BE(s,5),a.writeUInt32BE(e.index,9),e.chainCode.copy(a,13),t.copy(a,45),a}function l(e){var n=s.createHash("sha256").update(e).digest();return s.createHash("ripemd160").update(n).digest()}Object.defineProperty(f.prototype,"fingerprint",{get:function(){return this._fingerprint}}),Object.defineProperty(f.prototype,"identifier",{get:function(){return this._identifier}}),Object.defineProperty(f.prototype,"pubKeyHash",{get:function(){return this.identifier}}),Object.defineProperty(f.prototype,"privateKey",{get:function(){return this._privateKey},set:function(e){a.equal(e.length,32,"Private key must be 32 bytes."),a(!0===i.privateKeyVerify(e),"Invalid private key"),this._privateKey=e,this._publicKey=r.from(i.publicKeyCreate(e,!0)),this._identifier=l(this.publicKey),this._fingerprint=this._identifier.slice(0,4).readUInt32BE(0)}}),Object.defineProperty(f.prototype,"publicKey",{get:function(){return this._publicKey},set:function(e){a(33===e.length||65===e.length,"Public key must be 33 or 65 bytes."),a(!0===i.publicKeyVerify(e),"Invalid public key"),this._publicKey=r.from(i.publicKeyConvert(e,!0)),this._identifier=l(this.publicKey),this._fingerprint=this._identifier.slice(0,4).readUInt32BE(0),this._privateKey=null}}),Object.defineProperty(f.prototype,"privateExtendedKey",{get:function(){return this._privateKey?o.encode(u(this,this.versions.private,r.concat([r.alloc(1,0),this.privateKey]))):null}}),Object.defineProperty(f.prototype,"publicExtendedKey",{get:function(){return o.encode(u(this,this.versions.public,this.publicKey))}}),f.prototype.derive=function(e){if("m"===e||"M"===e||"m'"===e||"M'"===e)return this;var n=e.split("/"),t=this;return n.forEach((function(e,n){if(0!==n){var r=e.length>1&&"'"===e[e.length-1],s=parseInt(e,10);a(s<c,"Invalid index"),r&&(s+=c),t=t.deriveChild(s)}else a(/^[mM]{1}/.test(e),'Path must start with "m" or "M"')})),t},f.prototype.deriveChild=function(e){var n,t=e>=c,o=r.allocUnsafe(4);if(o.writeUInt32BE(e,0),t){a(this.privateKey,"Could not derive hardened child key");var d=this.privateKey,b=r.alloc(1,0);d=r.concat([b,d]),n=r.concat([d,o])}else n=r.concat([this.publicKey,o]);var u=s.createHmac("sha512",this.chainCode).update(n).digest(),l=u.slice(0,32),m=u.slice(32),h=new f(this.versions);if(this.privateKey)try{h.privateKey=r.from(i.privateKeyTweakAdd(r.from(this.privateKey),l))}catch(n){return this.deriveChild(e+1)}else try{h.publicKey=r.from(i.publicKeyTweakAdd(r.from(this.publicKey),l,!0))}catch(n){return this.deriveChild(e+1)}return h.chainCode=m,h.depth=this.depth+1,h.parentFingerprint=this.fingerprint,h.index=e,h},f.prototype.sign=function(e){return r.from(i.ecdsaSign(e,this.privateKey).signature)},f.prototype.verify=function(e,n){return i.ecdsaVerify(Uint8Array.from(n),Uint8Array.from(e),Uint8Array.from(this.publicKey))},f.prototype.wipePrivateData=function(){return this._privateKey&&s.randomBytes(this._privateKey.length).copy(this._privateKey),this._privateKey=null,this},f.prototype.toJSON=function(){return{xpriv:this.privateExtendedKey,xpub:this.publicExtendedKey}},f.fromMasterSeed=function(e,n){var t=s.createHmac("sha512",d).update(e).digest(),a=t.slice(0,32),r=t.slice(32),o=new f(n);return o.chainCode=r,o.privateKey=a,o},f.fromExtendedKey=function(e,n){var t=new f(n=n||b),r=o.decode(e),s=r.readUInt32BE(0);a(s===n.private||s===n.public,"Version mismatch: does not match private or public"),t.depth=r.readUInt8(4),t.parentFingerprint=r.readUInt32BE(5),t.index=r.readUInt32BE(9),t.chainCode=r.slice(13,45);var i=r.slice(45);return 0===i.readUInt8(0)?(a(s===n.private,"Version mismatch: version does not match private"),t.privateKey=i.slice(1)):(a(s===n.public,"Version mismatch: version does not match public"),t.publicKey=i),t},f.fromJSON=function(e){return f.fromExtendedKey(e.xpriv)},f.HARDENED_OFFSET=c,n.exports=f}}},{package:"hdkey",file:"/home/gudahtt/projects/metamask-extension/node_modules/hdkey/lib/hdkey.js"}],[438,{"./bignumber":436,"./fixednumber":437},function(){with(this)return function(){"use strict";return function(e,n,t){Object.defineProperty(t,"__esModule",{value:!0}),t._base36To16=t._base16To36=t.parseFixed=t.FixedNumber=t.FixedFormat=t.formatFixed=t.BigNumber=void 0;var a=e("./bignumber");Object.defineProperty(t,"BigNumber",{enumerable:!0,get:function(){return a.BigNumber}});var r=e("./fixednumber");Object.defineProperty(t,"formatFixed",{enumerable:!0,get:function(){return r.formatFixed}}),Object.defineProperty(t,"FixedFormat",{enumerable:!0,get:function(){return r.FixedFormat}}),Object.defineProperty(t,"FixedNumber",{enumerable:!0,get:function(){return r.FixedNumber}}),Object.defineProperty(t,"parseFixed",{enumerable:!0,get:function(){return r.parseFixed}});var s=e("./bignumber");Object.defineProperty(t,"_base16To36",{enumerable:!0,get:function(){return s._base16To36}}),Object.defineProperty(t,"_base36To16",{enumerable:!0,get:function(){return s._base36To16}})}}},{package:"@ethersproject/bignumber",file:"/home/gudahtt/projects/metamask-extension/node_modules/@ethersproject/bignumber/lib/index.js"}],[4380,{"hash.js":4362,"minimalistic-assert":5197,"minimalistic-crypto-utils":5198},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("hash.js"),r=e("minimalistic-crypto-utils"),s=e("minimalistic-assert");function o(e){if(!(this instanceof o))return new o(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var n=r.toArray(e.entropy,e.entropyEnc||"hex"),t=r.toArray(e.nonce,e.nonceEnc||"hex"),a=r.toArray(e.pers,e.persEnc||"hex");s(n.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(n,t,a)}n.exports=o,o.prototype._init=function(e,n,t){var a=e.concat(n).concat(t);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var r=0;r<this.V.length;r++)this.K[r]=0,this.V[r]=1;this._update(a),this._reseed=1,this.reseedInterval=281474976710656},o.prototype._hmac=function(){return new a.hmac(this.hash,this.K)},o.prototype._update=function(e){var n=this._hmac().update(this.V).update([0]);e&&(n=n.update(e)),this.K=n.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},o.prototype.reseed=function(e,n,t,a){"string"!=typeof n&&(a=t,t=n,n=null),e=r.toArray(e,n),t=r.toArray(t,a),s(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(t||[])),this._reseed=1},o.prototype.generate=function(e,n,t,a){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof n&&(a=t,t=n,n=null),t&&(t=r.toArray(t,a||"hex"),this._update(t));for(var s=[];s.length<e;)this.V=this._hmac().update(this.V).digest(),s=s.concat(this.V);var o=s.slice(0,e);return this._update(t),this._reseed++,r.encode(o,n)}}}},{package:"hmac-drbg",file:"/home/gudahtt/projects/metamask-extension/node_modules/hmac-drbg/lib/hmac-drbg.js"}],[4382,{http:5876,url:6004},function(){with(this)return function(){"use strict";return function(e,n,t){var a=e("http"),r=e("url"),s=n.exports;for(var o in a)a.hasOwnProperty(o)&&(s[o]=a[o]);function i(e){if("string"==typeof e&&(e=r.parse(e)),e.protocol||(e.protocol="https:"),"https:"!==e.protocol)throw new Error('Protocol "'+e.protocol+'" not supported. Expected "https:"');return e}s.request=function(e,n){return e=i(e),a.request.call(this,e,n)},s.get=function(e,n){return e=i(e),a.get.call(this,e,n)}}}},{package:"https-browserify",file:"/home/gudahtt/projects/metamask-extension/node_modules/https-browserify/index.js"}],[4384,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports=[{constant:!0,inputs:[{name:"interfaceID",type:"bytes4"}],name:"supportsInterface",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"name",outputs:[{name:"_name",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_tokenId",type:"uint256"}],name:"getApproved",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_approved",type:"address"},{name:"_tokenId",type:"uint256"}],name:"approve",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"transferFrom",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_index",type:"uint256"}],name:"tokenOfOwnerByIndex",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!0,inputs:[{name:"_index",type:"uint256"}],name:"tokenByIndex",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_tokenId",type:"uint256"}],name:"ownerOf",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"_symbol",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_operator",type:"address"},{name:"_approved",type:"bool"}],name:"setApprovalForAll",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokenId",type:"uint256"},{name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],payable:!0,stateMutability:"payable",type:"function"},{constant:!0,inputs:[{name:"_tokenId",type:"uint256"}],name:"tokenURI",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_operator",type:"address"}],name:"isApprovedForAll",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"_from",type:"address"},{indexed:!0,name:"_to",type:"address"},{indexed:!0,name:"_tokenId",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"_owner",type:"address"},{indexed:!0,name:"_approved",type:"address"},{indexed:!0,name:"_tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"_owner",type:"address"},{indexed:!0,name:"_operator",type:"address"},{indexed:!1,name:"_approved",type:"bool"}],name:"ApprovalForAll",type:"event"}]}}},{package:"human-standard-collectible-abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/human-standard-collectible-abi/index.js"}],[4385,{},function(){with(this)return function(){"use strict";return function(e,n,t){n.exports=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"success",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"version",outputs:[{name:"",type:"string"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],payable:!1,type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"success",type:"bool"}],payable:!1,type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"},{name:"_extraData",type:"bytes"}],name:"approveAndCall",outputs:[{name:"success",type:"bool"}],payable:!1,type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"remaining",type:"uint256"}],payable:!1,type:"function"},{inputs:[{name:"_initialAmount",type:"uint256"},{name:"_tokenName",type:"string"},{name:"_decimalUnits",type:"uint8"},{name:"_tokenSymbol",type:"string"}],type:"constructor"},{payable:!1,type:"fallback"},{anonymous:!1,inputs:[{indexed:!0,name:"_from",type:"address"},{indexed:!0,name:"_to",type:"address"},{indexed:!1,name:"_value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"_owner",type:"address"},{indexed:!0,name:"_spender",type:"address"},{indexed:!1,name:"_value",type:"uint256"}],name:"Approval",type:"event"}]}}},{package:"human-standard-token-abi",file:"/home/gudahtt/projects/metamask-extension/node_modules/human-standard-token-abi/index.js"}]],[],{});